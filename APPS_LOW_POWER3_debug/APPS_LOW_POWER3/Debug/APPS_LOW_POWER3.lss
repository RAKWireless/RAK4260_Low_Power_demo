
APPS_LOW_POWER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e9c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000090  20000000  00004e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000070  30000000  30000000  00030000  2**4
                  ALLOC
  3 .bss          000001c4  20000090  00004f2c  00020090  2**2
                  ALLOC
  4 .stack        00002004  20000254  000050f0  00020090  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004ea2d  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000068fd  00000000  00000000  0006eb3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009eff  00000000  00000000  0007543b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009c0  00000000  00000000  0007f33a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e30  00000000  00000000  0007fcfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000226f3  00000000  00000000  00080b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000167d5  00000000  00000000  000a321d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a1cd4  00000000  00000000  000b99f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f04  00000000  00000000  0015b6c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 22 00 20 91 27 00 00 8d 27 00 00 8d 27 00 00     X". .'...'...'..
	...
      2c:	8d 27 00 00 00 00 00 00 00 00 00 00 8d 27 00 00     .'...........'..
      3c:	8d 27 00 00 8d 27 00 00 8d 27 00 00 c9 0f 00 00     .'...'...'......
      4c:	59 0c 00 00 8d 27 00 00 79 07 00 00 8d 27 00 00     Y....'..y....'..
      5c:	c9 0a 00 00 55 14 00 00 65 14 00 00 75 14 00 00     ....U...e...u...
      6c:	85 14 00 00 95 14 00 00 a5 14 00 00 8d 27 00 00     .............'..
      7c:	8d 27 00 00 8d 27 00 00 3d 27 00 00 4d 27 00 00     .'...'..='..M'..
      8c:	5d 27 00 00 6d 27 00 00 7d 27 00 00 b5 06 00 00     ]'..m'..}'......
      9c:	8d 27 00 00 8d 27 00 00 8d 27 00 00 8d 27 00 00     .'...'...'...'..
      ac:	8d 27 00 00 00 00 00 00                             .'......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000090 	.word	0x20000090
      d4:	00000000 	.word	0x00000000
      d8:	00004e9c 	.word	0x00004e9c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000094 	.word	0x20000094
     108:	00004e9c 	.word	0x00004e9c
     10c:	00004e9c 	.word	0x00004e9c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000024a1 	.word	0x000024a1
     140:	0000364d 	.word	0x0000364d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ac:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d106      	bne.n	1c2 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     1b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b8:	2b00      	cmp	r3, #0
     1ba:	d007      	beq.n	1cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b09      	ldr	r3, [pc, #36]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1c2:	4a07      	ldr	r2, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1c4:	6813      	ldr	r3, [r2, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	6013      	str	r3, [r2, #0]
}
     1ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1cc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1d2:	2200      	movs	r2, #0
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_enter_critical+0x3c>)
     1d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1d8:	3201      	adds	r2, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	e7f0      	b.n	1c2 <cpu_irq_enter_critical+0x16>
     1e0:	200000ac 	.word	0x200000ac
     1e4:	200000b0 	.word	0x200000b0
     1e8:	20000008 	.word	0x20000008

000001ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <cpu_irq_leave_critical+0x24>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	3a01      	subs	r2, #1
     1f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d109      	bne.n	20e <cpu_irq_leave_critical+0x22>
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <cpu_irq_leave_critical+0x28>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d005      	beq.n	20e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     202:	2201      	movs	r2, #1
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_leave_critical+0x2c>)
     206:	701a      	strb	r2, [r3, #0]
     208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     20c:	b662      	cpsie	i
	}
}
     20e:	4770      	bx	lr
     210:	200000ac 	.word	0x200000ac
     214:	200000b0 	.word	0x200000b0
     218:	20000008 	.word	0x20000008

0000021c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     220:	ac01      	add	r4, sp, #4
     222:	2501      	movs	r5, #1
     224:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     226:	2300      	movs	r3, #0
     228:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     22a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     22c:	0021      	movs	r1, r4
     22e:	2009      	movs	r0, #9
     230:	4e11      	ldr	r6, [pc, #68]	; (278 <system_board_init+0x5c>)
     232:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     234:	4f11      	ldr	r7, [pc, #68]	; (27c <system_board_init+0x60>)
     236:	2380      	movs	r3, #128	; 0x80
     238:	009b      	lsls	r3, r3, #2
     23a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     23c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     23e:	0021      	movs	r1, r4
     240:	2012      	movs	r0, #18
     242:	47b0      	blx	r6
     244:	2380      	movs	r3, #128	; 0x80
     246:	02db      	lsls	r3, r3, #11
     248:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     24a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     24c:	0021      	movs	r1, r4
     24e:	200d      	movs	r0, #13
     250:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
     252:	2380      	movs	r3, #128	; 0x80
     254:	019b      	lsls	r3, r3, #6
     256:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     258:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     25a:	0021      	movs	r1, r4
     25c:	2023      	movs	r0, #35	; 0x23
     25e:	47b0      	blx	r6
     260:	2208      	movs	r2, #8
     262:	4b07      	ldr	r3, [pc, #28]	; (280 <system_board_init+0x64>)
     264:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     266:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RFSW_PWR_PIN, &pin_conf);
     268:	0021      	movs	r1, r4
     26a:	201c      	movs	r0, #28
     26c:	47b0      	blx	r6
     26e:	2380      	movs	r3, #128	; 0x80
     270:	055b      	lsls	r3, r3, #21
     272:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RFSW_PWR_PIN, RFSW_PWR_INACTIVE);
	
		
}
     274:	b003      	add	sp, #12
     276:	bdf0      	pop	{r4, r5, r6, r7, pc}
     278:	00000ded 	.word	0x00000ded
     27c:	40002800 	.word	0x40002800
     280:	40002880 	.word	0x40002880

00000284 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     284:	2000      	movs	r0, #0
     286:	4770      	bx	lr

00000288 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     288:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     28a:	2300      	movs	r3, #0
     28c:	2200      	movs	r2, #0
     28e:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     290:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     292:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     294:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     296:	2100      	movs	r1, #0
     298:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     29a:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     29c:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
     29e:	2406      	movs	r4, #6
     2a0:	7104      	strb	r4, [r0, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     2a2:	24c0      	movs	r4, #192	; 0xc0
     2a4:	0164      	lsls	r4, r4, #5
     2a6:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     2a8:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     2aa:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     2ac:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     2ae:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     2b0:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     2b2:	242a      	movs	r4, #42	; 0x2a
     2b4:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     2b6:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     2b8:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     2ba:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     2bc:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     2be:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     2c0:	3c06      	subs	r4, #6
     2c2:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     2c4:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     2c6:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     2c8:	7541      	strb	r1, [r0, #21]
}
     2ca:	bd10      	pop	{r4, pc}

000002cc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ce:	46ce      	mov	lr, r9
     2d0:	b500      	push	{lr}
     2d2:	b098      	sub	sp, #96	; 0x60
     2d4:	0005      	movs	r5, r0
     2d6:	000c      	movs	r4, r1
     2d8:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     2da:	0008      	movs	r0, r1
     2dc:	4bb2      	ldr	r3, [pc, #712]	; (5a8 <adc_init+0x2dc>)
     2de:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     2e0:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     2e2:	4ab2      	ldr	r2, [pc, #712]	; (5ac <adc_init+0x2e0>)
     2e4:	6a13      	ldr	r3, [r2, #32]
     2e6:	2108      	movs	r1, #8
     2e8:	430b      	orrs	r3, r1
     2ea:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2ec:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     2ee:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2f0:	07d2      	lsls	r2, r2, #31
     2f2:	d504      	bpl.n	2fe <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     2f4:	0018      	movs	r0, r3
     2f6:	b018      	add	sp, #96	; 0x60
     2f8:	bc04      	pop	{r2}
     2fa:	4691      	mov	r9, r2
     2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     2fe:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     300:	8c13      	ldrh	r3, [r2, #32]
     302:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     304:	2b00      	cmp	r3, #0
     306:	d1fb      	bne.n	300 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     308:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     30a:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     30c:	0792      	lsls	r2, r2, #30
     30e:	d4f1      	bmi.n	2f4 <adc_init+0x28>
	module_inst->reference = config->reference;
     310:	7873      	ldrb	r3, [r6, #1]
     312:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     314:	2b00      	cmp	r3, #0
     316:	d104      	bne.n	322 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     318:	4aa5      	ldr	r2, [pc, #660]	; (5b0 <adc_init+0x2e4>)
     31a:	69d3      	ldr	r3, [r2, #28]
     31c:	2104      	movs	r1, #4
     31e:	430b      	orrs	r3, r1
     320:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     322:	2300      	movs	r3, #0
     324:	60ab      	str	r3, [r5, #8]
     326:	60eb      	str	r3, [r5, #12]
     328:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     32a:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     32c:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     32e:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     330:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     332:	0080      	lsls	r0, r0, #2
     334:	4b9f      	ldr	r3, [pc, #636]	; (5b4 <adc_init+0x2e8>)
     336:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     338:	232a      	movs	r3, #42	; 0x2a
     33a:	5cf3      	ldrb	r3, [r6, r3]
     33c:	2b00      	cmp	r3, #0
     33e:	d105      	bne.n	34c <adc_init+0x80>
     340:	7b33      	ldrb	r3, [r6, #12]
     342:	2b00      	cmp	r3, #0
     344:	d102      	bne.n	34c <adc_init+0x80>
		module_inst->software_trigger = true;
     346:	3301      	adds	r3, #1
     348:	776b      	strb	r3, [r5, #29]
     34a:	e001      	b.n	350 <adc_init+0x84>
		module_inst->software_trigger = false;
     34c:	2300      	movs	r3, #0
     34e:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     350:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     352:	7833      	ldrb	r3, [r6, #0]
     354:	466a      	mov	r2, sp
     356:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     358:	4669      	mov	r1, sp
     35a:	201e      	movs	r0, #30
     35c:	4b96      	ldr	r3, [pc, #600]	; (5b8 <adc_init+0x2ec>)
     35e:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     360:	201e      	movs	r0, #30
     362:	4b96      	ldr	r3, [pc, #600]	; (5bc <adc_init+0x2f0>)
     364:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     366:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     368:	2258      	movs	r2, #88	; 0x58
     36a:	4995      	ldr	r1, [pc, #596]	; (5c0 <adc_init+0x2f4>)
     36c:	a802      	add	r0, sp, #8
     36e:	4b95      	ldr	r3, [pc, #596]	; (5c4 <adc_init+0x2f8>)
     370:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     372:	2c13      	cmp	r4, #19
     374:	d90b      	bls.n	38e <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
     376:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     378:	2258      	movs	r2, #88	; 0x58
     37a:	4991      	ldr	r1, [pc, #580]	; (5c0 <adc_init+0x2f4>)
     37c:	a802      	add	r0, sp, #8
     37e:	4b91      	ldr	r3, [pc, #580]	; (5c4 <adc_init+0x2f8>)
     380:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     382:	2c13      	cmp	r4, #19
     384:	d911      	bls.n	3aa <adc_init+0xde>
     386:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     388:	4b8e      	ldr	r3, [pc, #568]	; (5c4 <adc_init+0x2f8>)
     38a:	4699      	mov	r9, r3
     38c:	e01e      	b.n	3cc <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     38e:	00a4      	lsls	r4, r4, #2
     390:	ab02      	add	r3, sp, #8
     392:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     394:	a901      	add	r1, sp, #4
     396:	2300      	movs	r3, #0
     398:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     39a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     39c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     39e:	3301      	adds	r3, #1
     3a0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3a2:	b2c0      	uxtb	r0, r0
     3a4:	4b88      	ldr	r3, [pc, #544]	; (5c8 <adc_init+0x2fc>)
     3a6:	4798      	blx	r3
     3a8:	e7e5      	b.n	376 <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3aa:	00a4      	lsls	r4, r4, #2
     3ac:	ab02      	add	r3, sp, #8
     3ae:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3b0:	a901      	add	r1, sp, #4
     3b2:	2300      	movs	r3, #0
     3b4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3b6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3b8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3ba:	3301      	adds	r3, #1
     3bc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3be:	b2c0      	uxtb	r0, r0
     3c0:	4b81      	ldr	r3, [pc, #516]	; (5c8 <adc_init+0x2fc>)
     3c2:	4798      	blx	r3
     3c4:	e7df      	b.n	386 <adc_init+0xba>
     3c6:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     3c8:	2c14      	cmp	r4, #20
     3ca:	d018      	beq.n	3fe <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     3cc:	2301      	movs	r3, #1
     3ce:	40a3      	lsls	r3, r4
     3d0:	6932      	ldr	r2, [r6, #16]
     3d2:	421a      	tst	r2, r3
     3d4:	d0f7      	beq.n	3c6 <adc_init+0xfa>
	const uint32_t pinmapping[] = {
     3d6:	2258      	movs	r2, #88	; 0x58
     3d8:	4979      	ldr	r1, [pc, #484]	; (5c0 <adc_init+0x2f4>)
     3da:	a802      	add	r0, sp, #8
     3dc:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     3de:	2c13      	cmp	r4, #19
     3e0:	d8f1      	bhi.n	3c6 <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3e2:	00a3      	lsls	r3, r4, #2
     3e4:	aa02      	add	r2, sp, #8
     3e6:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3e8:	a901      	add	r1, sp, #4
     3ea:	2300      	movs	r3, #0
     3ec:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3f2:	3301      	adds	r3, #1
     3f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3f6:	b2c0      	uxtb	r0, r0
     3f8:	4b73      	ldr	r3, [pc, #460]	; (5c8 <adc_init+0x2fc>)
     3fa:	4798      	blx	r3
     3fc:	e7e3      	b.n	3c6 <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     3fe:	7b73      	ldrb	r3, [r6, #13]
     400:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     402:	7bb2      	ldrb	r2, [r6, #14]
     404:	01d2      	lsls	r2, r2, #7
     406:	4313      	orrs	r3, r2
     408:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     40a:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     40c:	7d33      	ldrb	r3, [r6, #20]
     40e:	01db      	lsls	r3, r3, #7
			| (config->reference);
     410:	7872      	ldrb	r2, [r6, #1]
     412:	4313      	orrs	r3, r2
     414:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     416:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     418:	78f3      	ldrb	r3, [r6, #3]
     41a:	2b34      	cmp	r3, #52	; 0x34
     41c:	d900      	bls.n	420 <adc_init+0x154>
     41e:	e140      	b.n	6a2 <adc_init+0x3d6>
     420:	009b      	lsls	r3, r3, #2
     422:	4a6a      	ldr	r2, [pc, #424]	; (5cc <adc_init+0x300>)
     424:	58d3      	ldr	r3, [r2, r3]
     426:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     428:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     42a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     42c:	2102      	movs	r1, #2
     42e:	e01a      	b.n	466 <adc_init+0x19a>
		adjres = config->divide_result;
     430:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     432:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     434:	2010      	movs	r0, #16
     436:	e016      	b.n	466 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     438:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     43a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     43c:	2101      	movs	r1, #1
     43e:	e012      	b.n	466 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     440:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     442:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     444:	2100      	movs	r1, #0
     446:	e00e      	b.n	466 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     448:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     44a:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     44c:	2100      	movs	r1, #0
     44e:	e00a      	b.n	466 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     450:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     452:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     454:	2100      	movs	r1, #0
     456:	e006      	b.n	466 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     458:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     45a:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     45c:	2100      	movs	r1, #0
     45e:	e002      	b.n	466 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     460:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     462:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     464:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     466:	0109      	lsls	r1, r1, #4
     468:	2370      	movs	r3, #112	; 0x70
     46a:	400b      	ands	r3, r1
     46c:	4313      	orrs	r3, r2
     46e:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     470:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     472:	8c13      	ldrh	r3, [r2, #32]
     474:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     476:	2b00      	cmp	r3, #0
     478:	d1fb      	bne.n	472 <adc_init+0x1a6>
	if (config->sample_length > 63) {
     47a:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     47c:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
     47e:	2a3f      	cmp	r2, #63	; 0x3f
     480:	d900      	bls.n	484 <adc_init+0x1b8>
     482:	e737      	b.n	2f4 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     484:	7bf3      	ldrb	r3, [r6, #15]
     486:	01db      	lsls	r3, r3, #7
     488:	431a      	orrs	r2, r3
     48a:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
     48c:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     48e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     490:	8c13      	ldrh	r3, [r2, #32]
     492:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     494:	2b00      	cmp	r3, #0
     496:	d1fb      	bne.n	490 <adc_init+0x1c4>
			config->clock_prescaler;
     498:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     49a:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     49c:	2324      	movs	r3, #36	; 0x24
     49e:	5cf3      	ldrb	r3, [r6, r3]
     4a0:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     4a2:	7b32      	ldrb	r2, [r6, #12]
     4a4:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     4a6:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     4a8:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     4aa:	4313      	orrs	r3, r2
     4ac:	7ab2      	ldrb	r2, [r6, #10]
     4ae:	0052      	lsls	r2, r2, #1
     4b0:	4313      	orrs	r3, r2
     4b2:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
     4b4:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     4b6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4b8:	8c13      	ldrh	r3, [r2, #32]
     4ba:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4bc:	2b00      	cmp	r3, #0
     4be:	d1fb      	bne.n	4b8 <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     4c0:	8b32      	ldrh	r2, [r6, #24]
     4c2:	2a00      	cmp	r2, #0
     4c4:	d020      	beq.n	508 <adc_init+0x23c>
		switch (resolution) {
     4c6:	2810      	cmp	r0, #16
     4c8:	d100      	bne.n	4cc <adc_init+0x200>
     4ca:	e0c9      	b.n	660 <adc_init+0x394>
     4cc:	d800      	bhi.n	4d0 <adc_init+0x204>
     4ce:	e083      	b.n	5d8 <adc_init+0x30c>
     4d0:	2820      	cmp	r0, #32
     4d2:	d100      	bne.n	4d6 <adc_init+0x20a>
     4d4:	e0a3      	b.n	61e <adc_init+0x352>
     4d6:	2830      	cmp	r0, #48	; 0x30
     4d8:	d116      	bne.n	508 <adc_init+0x23c>
			if (config->differential_mode &&
     4da:	7af3      	ldrb	r3, [r6, #11]
     4dc:	2b00      	cmp	r3, #0
     4de:	d00a      	beq.n	4f6 <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
     4e0:	69f1      	ldr	r1, [r6, #28]
     4e2:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4e4:	2317      	movs	r3, #23
			if (config->differential_mode &&
     4e6:	29ff      	cmp	r1, #255	; 0xff
     4e8:	d900      	bls.n	4ec <adc_init+0x220>
     4ea:	e703      	b.n	2f4 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     4ec:	6a31      	ldr	r1, [r6, #32]
     4ee:	3180      	adds	r1, #128	; 0x80
     4f0:	29ff      	cmp	r1, #255	; 0xff
     4f2:	d900      	bls.n	4f6 <adc_init+0x22a>
     4f4:	e6fe      	b.n	2f4 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     4f6:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
     4f8:	69f1      	ldr	r1, [r6, #28]
     4fa:	29ff      	cmp	r1, #255	; 0xff
     4fc:	dd00      	ble.n	500 <adc_init+0x234>
     4fe:	e6f9      	b.n	2f4 <adc_init+0x28>
     500:	6a31      	ldr	r1, [r6, #32]
     502:	29ff      	cmp	r1, #255	; 0xff
     504:	dd00      	ble.n	508 <adc_init+0x23c>
     506:	e6f5      	b.n	2f4 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
     508:	897b      	ldrh	r3, [r7, #10]
     50a:	431a      	orrs	r2, r3
     50c:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     50e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     510:	8c13      	ldrh	r3, [r2, #32]
     512:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     514:	2b00      	cmp	r3, #0
     516:	d1fb      	bne.n	510 <adc_init+0x244>
	adc_module->WINLT.reg =
     518:	8bb3      	ldrh	r3, [r6, #28]
     51a:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     51c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     51e:	8c13      	ldrh	r3, [r2, #32]
     520:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     522:	2b00      	cmp	r3, #0
     524:	d1fb      	bne.n	51e <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     526:	8c33      	ldrh	r3, [r6, #32]
     528:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     52a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     52c:	8c13      	ldrh	r3, [r2, #32]
     52e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     530:	2b00      	cmp	r3, #0
     532:	d1fb      	bne.n	52c <adc_init+0x260>
			config->positive_input;
     534:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     536:	88f2      	ldrh	r2, [r6, #6]
     538:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     53a:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     53c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     53e:	8c13      	ldrh	r3, [r2, #32]
     540:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     542:	2b00      	cmp	r3, #0
     544:	d1fb      	bne.n	53e <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
     546:	332a      	adds	r3, #42	; 0x2a
     548:	5cf3      	ldrb	r3, [r6, r3]
     54a:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     54c:	2307      	movs	r3, #7
     54e:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     550:	331d      	adds	r3, #29
     552:	5cf3      	ldrb	r3, [r6, r3]
     554:	2b00      	cmp	r3, #0
     556:	d01b      	beq.n	590 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     558:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
     55a:	491d      	ldr	r1, [pc, #116]	; (5d0 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     55c:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     55e:	428a      	cmp	r2, r1
     560:	d900      	bls.n	564 <adc_init+0x298>
     562:	e6c7      	b.n	2f4 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     564:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     566:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     568:	8c13      	ldrh	r3, [r2, #32]
     56a:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     56c:	2b00      	cmp	r3, #0
     56e:	d1fb      	bne.n	568 <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
     570:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     572:	2380      	movs	r3, #128	; 0x80
     574:	011b      	lsls	r3, r3, #4
     576:	18ca      	adds	r2, r1, r3
     578:	4815      	ldr	r0, [pc, #84]	; (5d0 <adc_init+0x304>)
     57a:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
     57c:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
     57e:	4282      	cmp	r2, r0
     580:	d900      	bls.n	584 <adc_init+0x2b8>
     582:	e6b7      	b.n	2f4 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     584:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     586:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     588:	8c13      	ldrh	r3, [r2, #32]
     58a:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     58c:	2b00      	cmp	r3, #0
     58e:	d1fb      	bne.n	588 <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
     590:	4b10      	ldr	r3, [pc, #64]	; (5d4 <adc_init+0x308>)
     592:	681b      	ldr	r3, [r3, #0]
     594:	021a      	lsls	r2, r3, #8
     596:	21e0      	movs	r1, #224	; 0xe0
     598:	00c9      	lsls	r1, r1, #3
     59a:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     59c:	069b      	lsls	r3, r3, #26
     59e:	0f5b      	lsrs	r3, r3, #29
			) |
     5a0:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     5a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     5a4:	2300      	movs	r3, #0
     5a6:	e6a5      	b.n	2f4 <adc_init+0x28>
     5a8:	00000285 	.word	0x00000285
     5ac:	40000400 	.word	0x40000400
     5b0:	40001400 	.word	0x40001400
     5b4:	200001ac 	.word	0x200001ac
     5b8:	0000257d 	.word	0x0000257d
     5bc:	0000250d 	.word	0x0000250d
     5c0:	000049b0 	.word	0x000049b0
     5c4:	00003801 	.word	0x00003801
     5c8:	00002679 	.word	0x00002679
     5cc:	000048dc 	.word	0x000048dc
     5d0:	00000fff 	.word	0x00000fff
     5d4:	00806020 	.word	0x00806020
		switch (resolution) {
     5d8:	2800      	cmp	r0, #0
     5da:	d195      	bne.n	508 <adc_init+0x23c>
			if (config->differential_mode &&
     5dc:	7af3      	ldrb	r3, [r6, #11]
     5de:	2b00      	cmp	r3, #0
     5e0:	d012      	beq.n	608 <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
     5e2:	69f3      	ldr	r3, [r6, #28]
     5e4:	2080      	movs	r0, #128	; 0x80
     5e6:	0100      	lsls	r0, r0, #4
     5e8:	4684      	mov	ip, r0
     5ea:	4463      	add	r3, ip
     5ec:	0019      	movs	r1, r3
			if (config->differential_mode &&
     5ee:	482e      	ldr	r0, [pc, #184]	; (6a8 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     5f0:	2317      	movs	r3, #23
			if (config->differential_mode &&
     5f2:	4281      	cmp	r1, r0
     5f4:	d900      	bls.n	5f8 <adc_init+0x32c>
     5f6:	e67d      	b.n	2f4 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     5f8:	6a33      	ldr	r3, [r6, #32]
     5fa:	4463      	add	r3, ip
     5fc:	0019      	movs	r1, r3
     5fe:	482a      	ldr	r0, [pc, #168]	; (6a8 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     600:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
     602:	4281      	cmp	r1, r0
     604:	d900      	bls.n	608 <adc_init+0x33c>
     606:	e675      	b.n	2f4 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     608:	4927      	ldr	r1, [pc, #156]	; (6a8 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     60a:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
     60c:	69f0      	ldr	r0, [r6, #28]
     60e:	4288      	cmp	r0, r1
     610:	dd00      	ble.n	614 <adc_init+0x348>
     612:	e66f      	b.n	2f4 <adc_init+0x28>
     614:	6a30      	ldr	r0, [r6, #32]
     616:	4288      	cmp	r0, r1
     618:	dd00      	ble.n	61c <adc_init+0x350>
     61a:	e66b      	b.n	2f4 <adc_init+0x28>
     61c:	e774      	b.n	508 <adc_init+0x23c>
			if (config->differential_mode &&
     61e:	7af3      	ldrb	r3, [r6, #11]
     620:	2b00      	cmp	r3, #0
     622:	d012      	beq.n	64a <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
     624:	69f3      	ldr	r3, [r6, #28]
     626:	2080      	movs	r0, #128	; 0x80
     628:	0080      	lsls	r0, r0, #2
     62a:	4684      	mov	ip, r0
     62c:	4463      	add	r3, ip
     62e:	0019      	movs	r1, r3
			if (config->differential_mode &&
     630:	481e      	ldr	r0, [pc, #120]	; (6ac <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     632:	2317      	movs	r3, #23
			if (config->differential_mode &&
     634:	4281      	cmp	r1, r0
     636:	d900      	bls.n	63a <adc_init+0x36e>
     638:	e65c      	b.n	2f4 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     63a:	6a33      	ldr	r3, [r6, #32]
     63c:	4463      	add	r3, ip
     63e:	0019      	movs	r1, r3
     640:	481a      	ldr	r0, [pc, #104]	; (6ac <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     642:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
     644:	4281      	cmp	r1, r0
     646:	d900      	bls.n	64a <adc_init+0x37e>
     648:	e654      	b.n	2f4 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     64a:	4918      	ldr	r1, [pc, #96]	; (6ac <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     64c:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
     64e:	69f0      	ldr	r0, [r6, #28]
     650:	4288      	cmp	r0, r1
     652:	dd00      	ble.n	656 <adc_init+0x38a>
     654:	e64e      	b.n	2f4 <adc_init+0x28>
     656:	6a30      	ldr	r0, [r6, #32]
     658:	4288      	cmp	r0, r1
     65a:	dd00      	ble.n	65e <adc_init+0x392>
     65c:	e64a      	b.n	2f4 <adc_init+0x28>
     65e:	e753      	b.n	508 <adc_init+0x23c>
			if (config->differential_mode &&
     660:	7af3      	ldrb	r3, [r6, #11]
     662:	2b00      	cmp	r3, #0
     664:	d012      	beq.n	68c <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
     666:	69f3      	ldr	r3, [r6, #28]
     668:	2080      	movs	r0, #128	; 0x80
     66a:	0200      	lsls	r0, r0, #8
     66c:	4684      	mov	ip, r0
     66e:	4463      	add	r3, ip
     670:	0019      	movs	r1, r3
			if (config->differential_mode &&
     672:	480f      	ldr	r0, [pc, #60]	; (6b0 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     674:	2317      	movs	r3, #23
			if (config->differential_mode &&
     676:	4281      	cmp	r1, r0
     678:	d900      	bls.n	67c <adc_init+0x3b0>
     67a:	e63b      	b.n	2f4 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     67c:	6a33      	ldr	r3, [r6, #32]
     67e:	4463      	add	r3, ip
     680:	0019      	movs	r1, r3
     682:	480b      	ldr	r0, [pc, #44]	; (6b0 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     684:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
     686:	4281      	cmp	r1, r0
     688:	d900      	bls.n	68c <adc_init+0x3c0>
     68a:	e633      	b.n	2f4 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     68c:	4908      	ldr	r1, [pc, #32]	; (6b0 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     68e:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
     690:	69f0      	ldr	r0, [r6, #28]
     692:	4288      	cmp	r0, r1
     694:	dd00      	ble.n	698 <adc_init+0x3cc>
     696:	e62d      	b.n	2f4 <adc_init+0x28>
     698:	6a30      	ldr	r0, [r6, #32]
     69a:	4288      	cmp	r0, r1
     69c:	dd00      	ble.n	6a0 <adc_init+0x3d4>
     69e:	e629      	b.n	2f4 <adc_init+0x28>
     6a0:	e732      	b.n	508 <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
     6a2:	2317      	movs	r3, #23
     6a4:	e626      	b.n	2f4 <adc_init+0x28>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	00000fff 	.word	0x00000fff
     6ac:	000003ff 	.word	0x000003ff
     6b0:	0000ffff 	.word	0x0000ffff

000006b4 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     6b4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     6b6:	4b2f      	ldr	r3, [pc, #188]	; (774 <ADC_Handler+0xc0>)
     6b8:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     6ba:	6823      	ldr	r3, [r4, #0]
     6bc:	799a      	ldrb	r2, [r3, #6]
     6be:	795d      	ldrb	r5, [r3, #5]
     6c0:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     6c2:	07ea      	lsls	r2, r5, #31
     6c4:	d52a      	bpl.n	71c <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     6c6:	2201      	movs	r2, #1
     6c8:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
     6ca:	6962      	ldr	r2, [r4, #20]
     6cc:	1c93      	adds	r3, r2, #2
     6ce:	6163      	str	r3, [r4, #20]
     6d0:	6823      	ldr	r3, [r4, #0]
     6d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     6d4:	b29b      	uxth	r3, r3
     6d6:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
     6d8:	8b23      	ldrh	r3, [r4, #24]
     6da:	3b01      	subs	r3, #1
     6dc:	b29b      	uxth	r3, r3
     6de:	8323      	strh	r3, [r4, #24]
     6e0:	2b00      	cmp	r3, #0
     6e2:	d015      	beq.n	710 <ADC_Handler+0x5c>
			if (module->software_trigger == true
     6e4:	7f63      	ldrb	r3, [r4, #29]
     6e6:	2b00      	cmp	r3, #0
     6e8:	d018      	beq.n	71c <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     6ea:	6822      	ldr	r2, [r4, #0]
     6ec:	79d3      	ldrb	r3, [r2, #7]
     6ee:	b25b      	sxtb	r3, r3
     6f0:	2b00      	cmp	r3, #0
     6f2:	db13      	blt.n	71c <ADC_Handler+0x68>
     6f4:	8c13      	ldrh	r3, [r2, #32]
     6f6:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     6f8:	2b00      	cmp	r3, #0
     6fa:	d1fb      	bne.n	6f4 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6fc:	7e13      	ldrb	r3, [r2, #24]
     6fe:	2102      	movs	r1, #2
     700:	430b      	orrs	r3, r1
     702:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     704:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     706:	8c13      	ldrh	r3, [r2, #32]
     708:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     70a:	2b00      	cmp	r3, #0
     70c:	d1fb      	bne.n	706 <ADC_Handler+0x52>
     70e:	e005      	b.n	71c <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     710:	2301      	movs	r3, #1
     712:	6822      	ldr	r2, [r4, #0]
     714:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
     716:	7f23      	ldrb	r3, [r4, #28]
     718:	2b05      	cmp	r3, #5
     71a:	d016      	beq.n	74a <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
     71c:	076b      	lsls	r3, r5, #29
     71e:	d508      	bpl.n	732 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     720:	2304      	movs	r3, #4
     722:	6822      	ldr	r2, [r4, #0]
     724:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     726:	7ee3      	ldrb	r3, [r4, #27]
     728:	079b      	lsls	r3, r3, #30
     72a:	d502      	bpl.n	732 <ADC_Handler+0x7e>
     72c:	7ea3      	ldrb	r3, [r4, #26]
     72e:	079b      	lsls	r3, r3, #30
     730:	d417      	bmi.n	762 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     732:	07ab      	lsls	r3, r5, #30
     734:	d508      	bpl.n	748 <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     736:	2302      	movs	r3, #2
     738:	6822      	ldr	r2, [r4, #0]
     73a:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     73c:	7ee3      	ldrb	r3, [r4, #27]
     73e:	075b      	lsls	r3, r3, #29
     740:	d502      	bpl.n	748 <ADC_Handler+0x94>
     742:	7ea3      	ldrb	r3, [r4, #26]
     744:	075b      	lsls	r3, r3, #29
     746:	d410      	bmi.n	76a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     748:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     74a:	2300      	movs	r3, #0
     74c:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     74e:	7ee3      	ldrb	r3, [r4, #27]
     750:	07db      	lsls	r3, r3, #31
     752:	d5e3      	bpl.n	71c <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     754:	7ea3      	ldrb	r3, [r4, #26]
     756:	07db      	lsls	r3, r3, #31
     758:	d5e0      	bpl.n	71c <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     75a:	0020      	movs	r0, r4
     75c:	68a3      	ldr	r3, [r4, #8]
     75e:	4798      	blx	r3
     760:	e7dc      	b.n	71c <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     762:	0020      	movs	r0, r4
     764:	68e3      	ldr	r3, [r4, #12]
     766:	4798      	blx	r3
     768:	e7e3      	b.n	732 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     76a:	6923      	ldr	r3, [r4, #16]
     76c:	0020      	movs	r0, r4
     76e:	4798      	blx	r3
}
     770:	e7ea      	b.n	748 <ADC_Handler+0x94>
     772:	46c0      	nop			; (mov r8, r8)
     774:	200001ac 	.word	0x200001ac

00000778 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     778:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     77a:	4b25      	ldr	r3, [pc, #148]	; (810 <DMAC_Handler+0x98>)
     77c:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     77e:	4925      	ldr	r1, [pc, #148]	; (814 <DMAC_Handler+0x9c>)
     780:	8c0b      	ldrh	r3, [r1, #32]
     782:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     784:	4013      	ands	r3, r2
     786:	009b      	lsls	r3, r3, #2
     788:	4823      	ldr	r0, [pc, #140]	; (818 <DMAC_Handler+0xa0>)
     78a:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     78c:	7803      	ldrb	r3, [r0, #0]
     78e:	401a      	ands	r2, r3
     790:	233f      	movs	r3, #63	; 0x3f
     792:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     794:	330f      	adds	r3, #15
     796:	5cca      	ldrb	r2, [r1, r3]
     798:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     79a:	7801      	ldrb	r1, [r0, #0]
     79c:	0109      	lsls	r1, r1, #4
     79e:	4b1f      	ldr	r3, [pc, #124]	; (81c <DMAC_Handler+0xa4>)
     7a0:	185b      	adds	r3, r3, r1
     7a2:	8859      	ldrh	r1, [r3, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     7a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	resource->transfered_size = total_size - write_size;
     7a6:	1acb      	subs	r3, r1, r3
     7a8:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     7aa:	07d3      	lsls	r3, r2, #31
     7ac:	d50f      	bpl.n	7ce <DMAC_Handler+0x56>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     7ae:	2101      	movs	r1, #1
     7b0:	234e      	movs	r3, #78	; 0x4e
     7b2:	4a18      	ldr	r2, [pc, #96]	; (814 <DMAC_Handler+0x9c>)
     7b4:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     7b6:	3b3e      	subs	r3, #62	; 0x3e
     7b8:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     7ba:	7c03      	ldrb	r3, [r0, #16]
     7bc:	07db      	lsls	r3, r3, #31
     7be:	d503      	bpl.n	7c8 <DMAC_Handler+0x50>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     7c0:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     7c2:	2b00      	cmp	r3, #0
     7c4:	d000      	beq.n	7c8 <DMAC_Handler+0x50>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     7c6:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     7c8:	4b15      	ldr	r3, [pc, #84]	; (820 <DMAC_Handler+0xa8>)
     7ca:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     7cc:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     7ce:	0793      	lsls	r3, r2, #30
     7d0:	d50d      	bpl.n	7ee <DMAC_Handler+0x76>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     7d2:	2102      	movs	r1, #2
     7d4:	234e      	movs	r3, #78	; 0x4e
     7d6:	4a0f      	ldr	r2, [pc, #60]	; (814 <DMAC_Handler+0x9c>)
     7d8:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     7da:	2300      	movs	r3, #0
     7dc:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     7de:	7c03      	ldrb	r3, [r0, #16]
     7e0:	079b      	lsls	r3, r3, #30
     7e2:	d5f1      	bpl.n	7c8 <DMAC_Handler+0x50>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     7e4:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     7e6:	2b00      	cmp	r3, #0
     7e8:	d0ee      	beq.n	7c8 <DMAC_Handler+0x50>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     7ea:	4798      	blx	r3
     7ec:	e7ec      	b.n	7c8 <DMAC_Handler+0x50>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     7ee:	0753      	lsls	r3, r2, #29
     7f0:	d5ea      	bpl.n	7c8 <DMAC_Handler+0x50>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     7f2:	2104      	movs	r1, #4
     7f4:	234e      	movs	r3, #78	; 0x4e
     7f6:	4a07      	ldr	r2, [pc, #28]	; (814 <DMAC_Handler+0x9c>)
     7f8:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     7fa:	3b48      	subs	r3, #72	; 0x48
     7fc:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     7fe:	7c03      	ldrb	r3, [r0, #16]
     800:	075b      	lsls	r3, r3, #29
     802:	d5e1      	bpl.n	7c8 <DMAC_Handler+0x50>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     804:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     806:	2b00      	cmp	r3, #0
     808:	d0de      	beq.n	7c8 <DMAC_Handler+0x50>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     80a:	4798      	blx	r3
     80c:	e7dc      	b.n	7c8 <DMAC_Handler+0x50>
     80e:	46c0      	nop			; (mov r8, r8)
     810:	000001ad 	.word	0x000001ad
     814:	44000400 	.word	0x44000400
     818:	200000b4 	.word	0x200000b4
     81c:	30000000 	.word	0x30000000
     820:	000001ed 	.word	0x000001ed

00000824 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     824:	2300      	movs	r3, #0
     826:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     828:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
     82a:	2203      	movs	r2, #3
     82c:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     82e:	7103      	strb	r3, [r0, #4]
	config->event_config.event_output_enable = false;
     830:	7143      	strb	r3, [r0, #5]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
     832:	70c3      	strb	r3, [r0, #3]
#endif
}
     834:	4770      	bx	lr
	...

00000838 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     838:	b570      	push	{r4, r5, r6, lr}
     83a:	0004      	movs	r4, r0
     83c:	000d      	movs	r5, r1
	cpu_irq_enter_critical();
     83e:	4b42      	ldr	r3, [pc, #264]	; (948 <dma_allocate+0x110>)
     840:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     842:	4b42      	ldr	r3, [pc, #264]	; (94c <dma_allocate+0x114>)
     844:	781b      	ldrb	r3, [r3, #0]
     846:	2b00      	cmp	r3, #0
     848:	d115      	bne.n	876 <dma_allocate+0x3e>
	MCLK->AHBMASK.reg |= ahb_mask;
     84a:	4a41      	ldr	r2, [pc, #260]	; (950 <dma_allocate+0x118>)
     84c:	6911      	ldr	r1, [r2, #16]
     84e:	2380      	movs	r3, #128	; 0x80
     850:	011b      	lsls	r3, r3, #4
     852:	430b      	orrs	r3, r1
     854:	6113      	str	r3, [r2, #16]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     856:	4b3f      	ldr	r3, [pc, #252]	; (954 <dma_allocate+0x11c>)
     858:	881a      	ldrh	r2, [r3, #0]
     85a:	2102      	movs	r1, #2
     85c:	438a      	bics	r2, r1
     85e:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     860:	2201      	movs	r2, #1
     862:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     864:	4a3c      	ldr	r2, [pc, #240]	; (958 <dma_allocate+0x120>)
     866:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     868:	3220      	adds	r2, #32
     86a:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     86c:	4a3b      	ldr	r2, [pc, #236]	; (95c <dma_allocate+0x124>)
     86e:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     870:	4b36      	ldr	r3, [pc, #216]	; (94c <dma_allocate+0x114>)
     872:	2201      	movs	r2, #1
     874:	701a      	strb	r2, [r3, #0]
     876:	4b34      	ldr	r3, [pc, #208]	; (948 <dma_allocate+0x110>)
     878:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     87a:	4b34      	ldr	r3, [pc, #208]	; (94c <dma_allocate+0x114>)
     87c:	685b      	ldr	r3, [r3, #4]
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     87e:	2600      	movs	r6, #0
		if (!(tmp & 0x00000001)) {
     880:	07da      	lsls	r2, r3, #31
     882:	d508      	bpl.n	896 <dma_allocate+0x5e>
     884:	079b      	lsls	r3, r3, #30
     886:	d505      	bpl.n	894 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     888:	4b35      	ldr	r3, [pc, #212]	; (960 <dma_allocate+0x128>)
     88a:	4798      	blx	r3
     88c:	4b34      	ldr	r3, [pc, #208]	; (960 <dma_allocate+0x128>)
     88e:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     890:	2014      	movs	r0, #20
     892:	e057      	b.n	944 <dma_allocate+0x10c>
		if (!(tmp & 0x00000001)) {
     894:	2601      	movs	r6, #1
			_dma_inst.allocated_channels |= 1 << count;
     896:	4a2d      	ldr	r2, [pc, #180]	; (94c <dma_allocate+0x114>)
     898:	6851      	ldr	r1, [r2, #4]
     89a:	2301      	movs	r3, #1
     89c:	40b3      	lsls	r3, r6
     89e:	430b      	orrs	r3, r1
     8a0:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     8a2:	7a13      	ldrb	r3, [r2, #8]
     8a4:	3b01      	subs	r3, #1
     8a6:	7213      	strb	r3, [r2, #8]
     8a8:	4b2d      	ldr	r3, [pc, #180]	; (960 <dma_allocate+0x128>)
     8aa:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     8ac:	2eff      	cmp	r6, #255	; 0xff
     8ae:	d0ed      	beq.n	88c <dma_allocate+0x54>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     8b0:	7026      	strb	r6, [r4, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     8b2:	4b28      	ldr	r3, [pc, #160]	; (954 <dma_allocate+0x11c>)
     8b4:	223f      	movs	r2, #63	; 0x3f
     8b6:	549e      	strb	r6, [r3, r2]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     8b8:	3201      	adds	r2, #1
     8ba:	5c99      	ldrb	r1, [r3, r2]
     8bc:	2002      	movs	r0, #2
     8be:	4381      	bics	r1, r0
     8c0:	5499      	strb	r1, [r3, r2]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     8c2:	2101      	movs	r1, #1
     8c4:	5499      	strb	r1, [r3, r2]

#ifdef FEATURE_DMA_CHANNEL_STANDBY
	if(config->run_in_standby){
     8c6:	78eb      	ldrb	r3, [r5, #3]
     8c8:	2b00      	cmp	r3, #0
     8ca:	d004      	beq.n	8d6 <dma_allocate+0x9e>
		DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_RUNSTDBY;
     8cc:	4921      	ldr	r1, [pc, #132]	; (954 <dma_allocate+0x11c>)
     8ce:	5c8b      	ldrb	r3, [r1, r2]
     8d0:	303e      	adds	r0, #62	; 0x3e
     8d2:	4303      	orrs	r3, r0
     8d4:	548b      	strb	r3, [r1, r2]
	cpu_irq_enter_critical();
     8d6:	4b1c      	ldr	r3, [pc, #112]	; (948 <dma_allocate+0x110>)
     8d8:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     8da:	7823      	ldrb	r3, [r4, #0]
     8dc:	220f      	movs	r2, #15
     8de:	401a      	ands	r2, r3
     8e0:	4b1c      	ldr	r3, [pc, #112]	; (954 <dma_allocate+0x11c>)
     8e2:	213f      	movs	r1, #63	; 0x3f
     8e4:	545a      	strb	r2, [r3, r1]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     8e6:	691a      	ldr	r2, [r3, #16]
     8e8:	7820      	ldrb	r0, [r4, #0]
     8ea:	393e      	subs	r1, #62	; 0x3e
     8ec:	4081      	lsls	r1, r0
     8ee:	438a      	bics	r2, r1
     8f0:	611a      	str	r2, [r3, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     8f2:	782a      	ldrb	r2, [r5, #0]
     8f4:	0152      	lsls	r2, r2, #5
     8f6:	2360      	movs	r3, #96	; 0x60
     8f8:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     8fa:	786a      	ldrb	r2, [r5, #1]
     8fc:	0212      	lsls	r2, r2, #8
     8fe:	21fc      	movs	r1, #252	; 0xfc
     900:	0189      	lsls	r1, r1, #6
     902:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     904:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     906:	78aa      	ldrb	r2, [r5, #2]
     908:	0592      	lsls	r2, r2, #22
     90a:	21c0      	movs	r1, #192	; 0xc0
     90c:	0409      	lsls	r1, r1, #16
     90e:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     910:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     912:	7929      	ldrb	r1, [r5, #4]
     914:	2900      	cmp	r1, #0
     916:	d004      	beq.n	922 <dma_allocate+0xea>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     918:	2207      	movs	r2, #7
     91a:	400a      	ands	r2, r1
     91c:	2108      	movs	r1, #8
     91e:	430a      	orrs	r2, r1
     920:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     922:	796a      	ldrb	r2, [r5, #5]
     924:	2a00      	cmp	r2, #0
     926:	d001      	beq.n	92c <dma_allocate+0xf4>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     928:	2210      	movs	r2, #16
     92a:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     92c:	4a09      	ldr	r2, [pc, #36]	; (954 <dma_allocate+0x11c>)
     92e:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     930:	4d0b      	ldr	r5, [pc, #44]	; (960 <dma_allocate+0x128>)
     932:	47a8      	blx	r5
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     934:	2300      	movs	r3, #0
     936:	61a3      	str	r3, [r4, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     938:	7823      	ldrb	r3, [r4, #0]
     93a:	009b      	lsls	r3, r3, #2
     93c:	4a09      	ldr	r2, [pc, #36]	; (964 <dma_allocate+0x12c>)
     93e:	509c      	str	r4, [r3, r2]
     940:	47a8      	blx	r5

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     942:	2000      	movs	r0, #0
}
     944:	bd70      	pop	{r4, r5, r6, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	000001ad 	.word	0x000001ad
     94c:	2000000c 	.word	0x2000000c
     950:	40000400 	.word	0x40000400
     954:	44000400 	.word	0x44000400
     958:	30000000 	.word	0x30000000
     95c:	00000f02 	.word	0x00000f02
     960:	000001ed 	.word	0x000001ed
     964:	200000b4 	.word	0x200000b4

00000968 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     968:	b570      	push	{r4, r5, r6, lr}
     96a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     96c:	4b1a      	ldr	r3, [pc, #104]	; (9d8 <dma_start_transfer_job+0x70>)
     96e:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     970:	7c63      	ldrb	r3, [r4, #17]
     972:	2b05      	cmp	r3, #5
     974:	d008      	beq.n	988 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     976:	69a3      	ldr	r3, [r4, #24]
     978:	885b      	ldrh	r3, [r3, #2]
     97a:	b29b      	uxth	r3, r3
     97c:	2b00      	cmp	r3, #0
     97e:	d107      	bne.n	990 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     980:	4b16      	ldr	r3, [pc, #88]	; (9dc <dma_start_transfer_job+0x74>)
     982:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     984:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     986:	bd70      	pop	{r4, r5, r6, pc}
     988:	4b14      	ldr	r3, [pc, #80]	; (9dc <dma_start_transfer_job+0x74>)
     98a:	4798      	blx	r3
		return STATUS_BUSY;
     98c:	2005      	movs	r0, #5
     98e:	e7fa      	b.n	986 <dma_start_transfer_job+0x1e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     990:	2220      	movs	r2, #32
     992:	4b13      	ldr	r3, [pc, #76]	; (9e0 <dma_start_transfer_job+0x78>)
     994:	601a      	str	r2, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     996:	7822      	ldrb	r2, [r4, #0]
     998:	230f      	movs	r3, #15
     99a:	4013      	ands	r3, r2
     99c:	4d11      	ldr	r5, [pc, #68]	; (9e4 <dma_start_transfer_job+0x7c>)
     99e:	223f      	movs	r2, #63	; 0x3f
     9a0:	54ab      	strb	r3, [r5, r2]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     9a2:	7823      	ldrb	r3, [r4, #0]
     9a4:	4a10      	ldr	r2, [pc, #64]	; (9e8 <dma_start_transfer_job+0x80>)
     9a6:	5cd2      	ldrb	r2, [r2, r3]
     9a8:	2307      	movs	r3, #7
     9aa:	4013      	ands	r3, r2
     9ac:	224d      	movs	r2, #77	; 0x4d
     9ae:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     9b0:	2305      	movs	r3, #5
     9b2:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     9b4:	7823      	ldrb	r3, [r4, #0]
     9b6:	011b      	lsls	r3, r3, #4
     9b8:	480c      	ldr	r0, [pc, #48]	; (9ec <dma_start_transfer_job+0x84>)
     9ba:	18c0      	adds	r0, r0, r3
     9bc:	69a1      	ldr	r1, [r4, #24]
     9be:	3a3d      	subs	r2, #61	; 0x3d
     9c0:	4b0b      	ldr	r3, [pc, #44]	; (9f0 <dma_start_transfer_job+0x88>)
     9c2:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     9c4:	2240      	movs	r2, #64	; 0x40
     9c6:	5cab      	ldrb	r3, [r5, r2]
     9c8:	2102      	movs	r1, #2
     9ca:	430b      	orrs	r3, r1
     9cc:	54ab      	strb	r3, [r5, r2]
	cpu_irq_leave_critical();
     9ce:	4b03      	ldr	r3, [pc, #12]	; (9dc <dma_start_transfer_job+0x74>)
     9d0:	4798      	blx	r3
	return STATUS_OK;
     9d2:	2000      	movs	r0, #0
     9d4:	e7d7      	b.n	986 <dma_start_transfer_job+0x1e>
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	000001ad 	.word	0x000001ad
     9dc:	000001ed 	.word	0x000001ed
     9e0:	e000e100 	.word	0xe000e100
     9e4:	44000400 	.word	0x44000400
     9e8:	200000bc 	.word	0x200000bc
     9ec:	30000000 	.word	0x30000000
     9f0:	00003801 	.word	0x00003801

000009f4 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     9f6:	780a      	ldrb	r2, [r1, #0]
     9f8:	8803      	ldrh	r3, [r0, #0]
     9fa:	2601      	movs	r6, #1
     9fc:	4032      	ands	r2, r6
     9fe:	2401      	movs	r4, #1
     a00:	43a3      	bics	r3, r4
     a02:	4313      	orrs	r3, r2
     a04:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     a06:	784b      	ldrb	r3, [r1, #1]
     a08:	8804      	ldrh	r4, [r0, #0]
     a0a:	2703      	movs	r7, #3
     a0c:	403b      	ands	r3, r7
     a0e:	005b      	lsls	r3, r3, #1
     a10:	2206      	movs	r2, #6
     a12:	4394      	bics	r4, r2
     a14:	431c      	orrs	r4, r3
     a16:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     a18:	788d      	ldrb	r5, [r1, #2]
     a1a:	8804      	ldrh	r4, [r0, #0]
     a1c:	403d      	ands	r5, r7
     a1e:	00ed      	lsls	r5, r5, #3
     a20:	2318      	movs	r3, #24
     a22:	439c      	bics	r4, r3
     a24:	432c      	orrs	r4, r5
     a26:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     a28:	78ca      	ldrb	r2, [r1, #3]
     a2a:	8803      	ldrh	r3, [r0, #0]
     a2c:	403a      	ands	r2, r7
     a2e:	0212      	lsls	r2, r2, #8
     a30:	4c16      	ldr	r4, [pc, #88]	; (a8c <dma_descriptor_create+0x98>)
     a32:	4023      	ands	r3, r4
     a34:	4313      	orrs	r3, r2
     a36:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     a38:	790b      	ldrb	r3, [r1, #4]
     a3a:	8804      	ldrh	r4, [r0, #0]
     a3c:	4033      	ands	r3, r6
     a3e:	029b      	lsls	r3, r3, #10
     a40:	4a13      	ldr	r2, [pc, #76]	; (a90 <dma_descriptor_create+0x9c>)
     a42:	4014      	ands	r4, r2
     a44:	431c      	orrs	r4, r3
     a46:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     a48:	794d      	ldrb	r5, [r1, #5]
     a4a:	8804      	ldrh	r4, [r0, #0]
     a4c:	4035      	ands	r5, r6
     a4e:	02ed      	lsls	r5, r5, #11
     a50:	4b10      	ldr	r3, [pc, #64]	; (a94 <dma_descriptor_create+0xa0>)
     a52:	401c      	ands	r4, r3
     a54:	432c      	orrs	r4, r5
     a56:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     a58:	798a      	ldrb	r2, [r1, #6]
     a5a:	8803      	ldrh	r3, [r0, #0]
     a5c:	4032      	ands	r2, r6
     a5e:	0312      	lsls	r2, r2, #12
     a60:	4c0d      	ldr	r4, [pc, #52]	; (a98 <dma_descriptor_create+0xa4>)
     a62:	4023      	ands	r3, r4
     a64:	4313      	orrs	r3, r2
     a66:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     a68:	79cb      	ldrb	r3, [r1, #7]
     a6a:	2207      	movs	r2, #7
     a6c:	401a      	ands	r2, r3
     a6e:	8803      	ldrh	r3, [r0, #0]
     a70:	0352      	lsls	r2, r2, #13
     a72:	04db      	lsls	r3, r3, #19
     a74:	0cdb      	lsrs	r3, r3, #19
     a76:	4313      	orrs	r3, r2
     a78:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     a7a:	890b      	ldrh	r3, [r1, #8]
     a7c:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     a7e:	68cb      	ldr	r3, [r1, #12]
     a80:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     a82:	690b      	ldr	r3, [r1, #16]
     a84:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     a86:	694b      	ldr	r3, [r1, #20]
     a88:	60c3      	str	r3, [r0, #12]
}
     a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a8c:	fffffcff 	.word	0xfffffcff
     a90:	fffffbff 	.word	0xfffffbff
     a94:	fffff7ff 	.word	0xfffff7ff
     a98:	ffffefff 	.word	0xffffefff

00000a9c <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     a9c:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     a9e:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     aa0:	2a05      	cmp	r2, #5
     aa2:	d00b      	beq.n	abc <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     aa4:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     aa6:	2b00      	cmp	r3, #0
     aa8:	d00a      	beq.n	ac0 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     aaa:	68da      	ldr	r2, [r3, #12]
     aac:	2a00      	cmp	r2, #0
     aae:	d003      	beq.n	ab8 <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     ab0:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     ab2:	68da      	ldr	r2, [r3, #12]
     ab4:	2a00      	cmp	r2, #0
     ab6:	d1fb      	bne.n	ab0 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     ab8:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     aba:	2300      	movs	r3, #0
}
     abc:	0018      	movs	r0, r3
     abe:	4770      	bx	lr
		resource->descriptor = descriptor;
     ac0:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     ac2:	2300      	movs	r3, #0
     ac4:	e7fa      	b.n	abc <dma_add_descriptor+0x20>
	...

00000ac8 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     ac8:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     aca:	4b0c      	ldr	r3, [pc, #48]	; (afc <EVSYS_Handler+0x34>)
     acc:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     ace:	2186      	movs	r1, #134	; 0x86
     ad0:	05c9      	lsls	r1, r1, #23
     ad2:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     ad4:	6898      	ldr	r0, [r3, #8]
     ad6:	4302      	orrs	r2, r0
     ad8:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     ada:	4b09      	ldr	r3, [pc, #36]	; (b00 <EVSYS_Handler+0x38>)
     adc:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     ade:	2c00      	cmp	r4, #0
     ae0:	d005      	beq.n	aee <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     ae2:	6820      	ldr	r0, [r4, #0]
     ae4:	6863      	ldr	r3, [r4, #4]
     ae6:	4798      	blx	r3
		current_hook = current_hook->next;
     ae8:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     aea:	2c00      	cmp	r4, #0
     aec:	d1f9      	bne.n	ae2 <EVSYS_Handler+0x1a>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     aee:	4b03      	ldr	r3, [pc, #12]	; (afc <EVSYS_Handler+0x34>)
     af0:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     af2:	689a      	ldr	r2, [r3, #8]
     af4:	438a      	bics	r2, r1
     af6:	609a      	str	r2, [r3, #8]
}
     af8:	bd10      	pop	{r4, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	20000018 	.word	0x20000018
     b00:	0fff0fff 	.word	0x0fff0fff

00000b04 <_system_events_init>:
			MCLK->APBDMASK.reg |= mask;
     b04:	4906      	ldr	r1, [pc, #24]	; (b20 <_system_events_init+0x1c>)
     b06:	6a0b      	ldr	r3, [r1, #32]
     b08:	2201      	movs	r2, #1
     b0a:	4313      	orrs	r3, r2
     b0c:	620b      	str	r3, [r1, #32]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     b0e:	2386      	movs	r3, #134	; 0x86
     b10:	05db      	lsls	r3, r3, #23
     b12:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     b14:	0019      	movs	r1, r3
     b16:	780b      	ldrb	r3, [r1, #0]
     b18:	4213      	tst	r3, r2
     b1a:	d1fc      	bne.n	b16 <_system_events_init+0x12>
	}
}
     b1c:	4770      	bx	lr
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	40000400 	.word	0x40000400

00000b24 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     b24:	2301      	movs	r3, #1
     b26:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     b28:	2300      	movs	r3, #0
     b2a:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     b2c:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     b2e:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     b30:	7103      	strb	r3, [r0, #4]
	config->on_demand    = false;
     b32:	7143      	strb	r3, [r0, #5]
}
     b34:	4770      	bx	lr
	...

00000b38 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     b38:	b570      	push	{r4, r5, r6, lr}
     b3a:	b082      	sub	sp, #8
     b3c:	0005      	movs	r5, r0
     b3e:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     b40:	4b25      	ldr	r3, [pc, #148]	; (bd8 <events_allocate+0xa0>)
     b42:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     b44:	4b25      	ldr	r3, [pc, #148]	; (bdc <events_allocate+0xa4>)
     b46:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     b48:	07da      	lsls	r2, r3, #31
     b4a:	d50e      	bpl.n	b6a <events_allocate+0x32>
		tmp = tmp >> 1;
     b4c:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     b4e:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     b50:	2201      	movs	r2, #1
     b52:	421a      	tst	r2, r3
     b54:	d00a      	beq.n	b6c <events_allocate+0x34>
		tmp = tmp >> 1;
     b56:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     b58:	3401      	adds	r4, #1
     b5a:	b2e4      	uxtb	r4, r4
     b5c:	2c0c      	cmp	r4, #12
     b5e:	d1f8      	bne.n	b52 <events_allocate+0x1a>
	cpu_irq_leave_critical();
     b60:	4b1f      	ldr	r3, [pc, #124]	; (be0 <events_allocate+0xa8>)
     b62:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     b64:	2014      	movs	r0, #20
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
}
     b66:	b002      	add	sp, #8
     b68:	bd70      	pop	{r4, r5, r6, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     b6a:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     b6c:	4a1b      	ldr	r2, [pc, #108]	; (bdc <events_allocate+0xa4>)
     b6e:	6811      	ldr	r1, [r2, #0]
     b70:	2301      	movs	r3, #1
     b72:	40a3      	lsls	r3, r4
     b74:	430b      	orrs	r3, r1
     b76:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     b78:	7913      	ldrb	r3, [r2, #4]
     b7a:	3b01      	subs	r3, #1
     b7c:	7113      	strb	r3, [r2, #4]
     b7e:	4b18      	ldr	r3, [pc, #96]	; (be0 <events_allocate+0xa8>)
     b80:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     b82:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     b84:	2cff      	cmp	r4, #255	; 0xff
     b86:	d0ee      	beq.n	b66 <events_allocate+0x2e>
	resource->channel = new_channel;
     b88:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     b8a:	7873      	ldrb	r3, [r6, #1]
     b8c:	2b02      	cmp	r3, #2
     b8e:	d00a      	beq.n	ba6 <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     b90:	a901      	add	r1, sp, #4
     b92:	78f3      	ldrb	r3, [r6, #3]
     b94:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     b96:	3405      	adds	r4, #5
     b98:	b2e4      	uxtb	r4, r4
     b9a:	0020      	movs	r0, r4
     b9c:	4b11      	ldr	r3, [pc, #68]	; (be4 <events_allocate+0xac>)
     b9e:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     ba0:	0020      	movs	r0, r4
     ba2:	4b11      	ldr	r3, [pc, #68]	; (be8 <events_allocate+0xb0>)
     ba4:	4798      	blx	r3
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
     ba6:	78b2      	ldrb	r2, [r6, #2]
     ba8:	237f      	movs	r3, #127	; 0x7f
     baa:	4013      	ands	r3, r2
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     bac:	7932      	ldrb	r2, [r6, #4]
     bae:	0392      	lsls	r2, r2, #14
     bb0:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
     bb2:	7972      	ldrb	r2, [r6, #5]
     bb4:	03d2      	lsls	r2, r2, #15
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     bb6:	4313      	orrs	r3, r2
			EVSYS_CHANNEL_PATH(config->path)                                 |
     bb8:	7872      	ldrb	r2, [r6, #1]
     bba:	0212      	lsls	r2, r2, #8
     bbc:	21c0      	movs	r1, #192	; 0xc0
     bbe:	0089      	lsls	r1, r1, #2
     bc0:	400a      	ands	r2, r1
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     bc2:	4313      	orrs	r3, r2
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     bc4:	7832      	ldrb	r2, [r6, #0]
     bc6:	0292      	lsls	r2, r2, #10
     bc8:	21c0      	movs	r1, #192	; 0xc0
     bca:	0109      	lsls	r1, r1, #4
     bcc:	400a      	ands	r2, r1
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
     bce:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
     bd0:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
     bd2:	2000      	movs	r0, #0
     bd4:	e7c7      	b.n	b66 <events_allocate+0x2e>
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	000001ad 	.word	0x000001ad
     bdc:	20000018 	.word	0x20000018
     be0:	000001ed 	.word	0x000001ed
     be4:	0000257d 	.word	0x0000257d
     be8:	0000250d 	.word	0x0000250d

00000bec <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER[user_id].reg = EVSYS_USER_CHANNEL(resource->channel + 1);
     bec:	7802      	ldrb	r2, [r0, #0]
     bee:	3201      	adds	r2, #1
     bf0:	231f      	movs	r3, #31
     bf2:	4013      	ands	r3, r2
     bf4:	2286      	movs	r2, #134	; 0x86
     bf6:	05d2      	lsls	r2, r2, #23
     bf8:	3120      	adds	r1, #32
     bfa:	0089      	lsls	r1, r1, #2
     bfc:	508b      	str	r3, [r1, r2]

	/* Then configure the channel */
	EVSYS->CHANNEL[resource->channel].reg = resource->channel_reg;
     bfe:	7803      	ldrb	r3, [r0, #0]
     c00:	6841      	ldr	r1, [r0, #4]
     c02:	3308      	adds	r3, #8
     c04:	009b      	lsls	r3, r3, #2
     c06:	5099      	str	r1, [r3, r2]

	return STATUS_OK;
}
     c08:	2000      	movs	r0, #0
     c0a:	4770      	bx	lr

00000c0c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c0c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     c0e:	2a00      	cmp	r2, #0
     c10:	d001      	beq.n	c16 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c12:	0018      	movs	r0, r3
     c14:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     c16:	008b      	lsls	r3, r1, #2
     c18:	4a06      	ldr	r2, [pc, #24]	; (c34 <extint_register_callback+0x28>)
     c1a:	589b      	ldr	r3, [r3, r2]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d003      	beq.n	c28 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     c20:	4283      	cmp	r3, r0
     c22:	d005      	beq.n	c30 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     c24:	231d      	movs	r3, #29
     c26:	e7f4      	b.n	c12 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     c28:	0089      	lsls	r1, r1, #2
     c2a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     c2c:	2300      	movs	r3, #0
     c2e:	e7f0      	b.n	c12 <extint_register_callback+0x6>
		return STATUS_OK;
     c30:	2300      	movs	r3, #0
     c32:	e7ee      	b.n	c12 <extint_register_callback+0x6>
     c34:	200001b4 	.word	0x200001b4

00000c38 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c38:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c3a:	2900      	cmp	r1, #0
     c3c:	d001      	beq.n	c42 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     c3e:	0018      	movs	r0, r3
     c40:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     c42:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     c44:	281f      	cmp	r0, #31
     c46:	d800      	bhi.n	c4a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     c48:	4a02      	ldr	r2, [pc, #8]	; (c54 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     c4a:	2301      	movs	r3, #1
     c4c:	4083      	lsls	r3, r0
     c4e:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     c50:	2300      	movs	r3, #0
     c52:	e7f4      	b.n	c3e <extint_chan_enable_callback+0x6>
     c54:	40002400 	.word	0x40002400

00000c58 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     c58:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     c5a:	2200      	movs	r2, #0
     c5c:	4b10      	ldr	r3, [pc, #64]	; (ca0 <EIC_Handler+0x48>)
     c5e:	701a      	strb	r2, [r3, #0]
     c60:	2300      	movs	r3, #0
     c62:	4910      	ldr	r1, [pc, #64]	; (ca4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     c64:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     c66:	4e10      	ldr	r6, [pc, #64]	; (ca8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     c68:	4c0d      	ldr	r4, [pc, #52]	; (ca0 <EIC_Handler+0x48>)
     c6a:	e00a      	b.n	c82 <EIC_Handler+0x2a>
		return eics[eic_index];
     c6c:	490d      	ldr	r1, [pc, #52]	; (ca4 <EIC_Handler+0x4c>)
     c6e:	e008      	b.n	c82 <EIC_Handler+0x2a>
     c70:	7823      	ldrb	r3, [r4, #0]
     c72:	3301      	adds	r3, #1
     c74:	b2db      	uxtb	r3, r3
     c76:	7023      	strb	r3, [r4, #0]
     c78:	2b0f      	cmp	r3, #15
     c7a:	d810      	bhi.n	c9e <EIC_Handler+0x46>
		return NULL;
     c7c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     c7e:	2b1f      	cmp	r3, #31
     c80:	d9f4      	bls.n	c6c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     c82:	0028      	movs	r0, r5
     c84:	4018      	ands	r0, r3
     c86:	2201      	movs	r2, #1
     c88:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     c8a:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     c8c:	4210      	tst	r0, r2
     c8e:	d0ef      	beq.n	c70 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     c90:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     c92:	009b      	lsls	r3, r3, #2
     c94:	599b      	ldr	r3, [r3, r6]
     c96:	2b00      	cmp	r3, #0
     c98:	d0ea      	beq.n	c70 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     c9a:	4798      	blx	r3
     c9c:	e7e8      	b.n	c70 <EIC_Handler+0x18>
			}
		}
	}
}
     c9e:	bd70      	pop	{r4, r5, r6, pc}
     ca0:	200001b0 	.word	0x200001b0
     ca4:	40002400 	.word	0x40002400
     ca8:	200001b4 	.word	0x200001b4

00000cac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     cac:	4a06      	ldr	r2, [pc, #24]	; (cc8 <_extint_enable+0x1c>)
     cae:	7813      	ldrb	r3, [r2, #0]
     cb0:	2102      	movs	r1, #2
     cb2:	430b      	orrs	r3, r1
     cb4:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     cb6:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     cb8:	6853      	ldr	r3, [r2, #4]
     cba:	4219      	tst	r1, r3
     cbc:	d1fc      	bne.n	cb8 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     cbe:	6853      	ldr	r3, [r2, #4]
     cc0:	4218      	tst	r0, r3
     cc2:	d1f9      	bne.n	cb8 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     cc4:	4770      	bx	lr
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	40002400 	.word	0x40002400

00000ccc <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     ccc:	4a06      	ldr	r2, [pc, #24]	; (ce8 <_extint_disable+0x1c>)
     cce:	7813      	ldrb	r3, [r2, #0]
     cd0:	2102      	movs	r1, #2
     cd2:	438b      	bics	r3, r1
     cd4:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     cd6:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     cd8:	6853      	ldr	r3, [r2, #4]
     cda:	4219      	tst	r1, r3
     cdc:	d1fc      	bne.n	cd8 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     cde:	6853      	ldr	r3, [r2, #4]
     ce0:	4218      	tst	r0, r3
     ce2:	d1f9      	bne.n	cd8 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     ce4:	4770      	bx	lr
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	40002400 	.word	0x40002400

00000cec <_system_extint_init>:
{
     cec:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
     cee:	4a12      	ldr	r2, [pc, #72]	; (d38 <_system_extint_init+0x4c>)
     cf0:	6951      	ldr	r1, [r2, #20]
     cf2:	2380      	movs	r3, #128	; 0x80
     cf4:	009b      	lsls	r3, r3, #2
     cf6:	430b      	orrs	r3, r1
     cf8:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     cfa:	4a10      	ldr	r2, [pc, #64]	; (d3c <_system_extint_init+0x50>)
     cfc:	7813      	ldrb	r3, [r2, #0]
     cfe:	2101      	movs	r1, #1
     d00:	430b      	orrs	r3, r1
     d02:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     d04:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     d06:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     d08:	6853      	ldr	r3, [r2, #4]
     d0a:	4219      	tst	r1, r3
     d0c:	d1fc      	bne.n	d08 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     d0e:	6853      	ldr	r3, [r2, #4]
     d10:	4218      	tst	r0, r3
     d12:	d1f9      	bne.n	d08 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
     d14:	4a09      	ldr	r2, [pc, #36]	; (d3c <_system_extint_init+0x50>)
     d16:	7813      	ldrb	r3, [r2, #0]
     d18:	2110      	movs	r1, #16
     d1a:	430b      	orrs	r3, r1
     d1c:	7013      	strb	r3, [r2, #0]
     d1e:	4b08      	ldr	r3, [pc, #32]	; (d40 <_system_extint_init+0x54>)
     d20:	0019      	movs	r1, r3
     d22:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     d24:	2200      	movs	r2, #0
     d26:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     d28:	428b      	cmp	r3, r1
     d2a:	d1fc      	bne.n	d26 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d2c:	2208      	movs	r2, #8
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <_system_extint_init+0x58>)
     d30:	601a      	str	r2, [r3, #0]
	_extint_enable();
     d32:	4b05      	ldr	r3, [pc, #20]	; (d48 <_system_extint_init+0x5c>)
     d34:	4798      	blx	r3
}
     d36:	bd10      	pop	{r4, pc}
     d38:	40000400 	.word	0x40000400
     d3c:	40002400 	.word	0x40002400
     d40:	200001b4 	.word	0x200001b4
     d44:	e000e100 	.word	0xe000e100
     d48:	00000cad 	.word	0x00000cad

00000d4c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     d4c:	2300      	movs	r3, #0
     d4e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     d50:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     d52:	2201      	movs	r2, #1
     d54:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     d56:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     d58:	3201      	adds	r2, #1
     d5a:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     d5c:	7243      	strb	r3, [r0, #9]
}
     d5e:	4770      	bx	lr

00000d60 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     d60:	b5f0      	push	{r4, r5, r6, r7, lr}
     d62:	b083      	sub	sp, #12
     d64:	0005      	movs	r5, r0
     d66:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     d68:	4b1c      	ldr	r3, [pc, #112]	; (ddc <extint_chan_set_config+0x7c>)
     d6a:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d6c:	a901      	add	r1, sp, #4
     d6e:	2300      	movs	r3, #0
     d70:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     d72:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     d74:	7923      	ldrb	r3, [r4, #4]
     d76:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     d78:	7a23      	ldrb	r3, [r4, #8]
     d7a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     d7c:	7820      	ldrb	r0, [r4, #0]
     d7e:	4b18      	ldr	r3, [pc, #96]	; (de0 <extint_chan_set_config+0x80>)
     d80:	4798      	blx	r3
		return NULL;
     d82:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     d84:	2d1f      	cmp	r5, #31
     d86:	d800      	bhi.n	d8a <extint_chan_set_config+0x2a>
		return eics[eic_index];
     d88:	4916      	ldr	r1, [pc, #88]	; (de4 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     d8a:	2207      	movs	r2, #7
     d8c:	402a      	ands	r2, r5
     d8e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     d90:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     d92:	7aa3      	ldrb	r3, [r4, #10]
     d94:	2b00      	cmp	r3, #0
     d96:	d001      	beq.n	d9c <extint_chan_set_config+0x3c>
     d98:	2308      	movs	r3, #8
     d9a:	431f      	orrs	r7, r3
     d9c:	08eb      	lsrs	r3, r5, #3
     d9e:	009b      	lsls	r3, r3, #2
     da0:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     da2:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     da4:	260f      	movs	r6, #15
     da6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     da8:	43b0      	bics	r0, r6
			(new_config << config_pos);
     daa:	4097      	lsls	r7, r2
     dac:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     dae:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     db0:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     db2:	7a63      	ldrb	r3, [r4, #9]
     db4:	2b00      	cmp	r3, #0
     db6:	d10b      	bne.n	dd0 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     db8:	698a      	ldr	r2, [r1, #24]
     dba:	2301      	movs	r3, #1
     dbc:	40ab      	lsls	r3, r5
     dbe:	43db      	mvns	r3, r3
     dc0:	041b      	lsls	r3, r3, #16
     dc2:	0c1b      	lsrs	r3, r3, #16
     dc4:	4013      	ands	r3, r2
     dc6:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     dc8:	4b07      	ldr	r3, [pc, #28]	; (de8 <extint_chan_set_config+0x88>)
     dca:	4798      	blx	r3
}
     dcc:	b003      	add	sp, #12
     dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     dd0:	698a      	ldr	r2, [r1, #24]
     dd2:	2301      	movs	r3, #1
     dd4:	40ab      	lsls	r3, r5
     dd6:	4313      	orrs	r3, r2
     dd8:	618b      	str	r3, [r1, #24]
     dda:	e7f5      	b.n	dc8 <extint_chan_set_config+0x68>
     ddc:	00000ccd 	.word	0x00000ccd
     de0:	00002679 	.word	0x00002679
     de4:	40002400 	.word	0x40002400
     de8:	00000cad 	.word	0x00000cad

00000dec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     dec:	b500      	push	{lr}
     dee:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     df0:	ab01      	add	r3, sp, #4
     df2:	2280      	movs	r2, #128	; 0x80
     df4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     df6:	780a      	ldrb	r2, [r1, #0]
     df8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     dfa:	784a      	ldrb	r2, [r1, #1]
     dfc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     dfe:	788a      	ldrb	r2, [r1, #2]
     e00:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e02:	0019      	movs	r1, r3
     e04:	4b01      	ldr	r3, [pc, #4]	; (e0c <port_pin_set_config+0x20>)
     e06:	4798      	blx	r3
}
     e08:	b003      	add	sp, #12
     e0a:	bd00      	pop	{pc}
     e0c:	00002679 	.word	0x00002679

00000e10 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     e10:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     e12:	6918      	ldr	r0, [r3, #16]
     e14:	1e43      	subs	r3, r0, #1
     e16:	4198      	sbcs	r0, r3
     e18:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     e1a:	4770      	bx	lr

00000e1c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     e20:	6806      	ldr	r6, [r0, #0]
     e22:	2204      	movs	r2, #4
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <rtc_count_enable+0x2c>)
     e26:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     e28:	4d08      	ldr	r5, [pc, #32]	; (e4c <rtc_count_enable+0x30>)
     e2a:	0020      	movs	r0, r4
     e2c:	47a8      	blx	r5
     e2e:	2800      	cmp	r0, #0
     e30:	d1fb      	bne.n	e2a <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     e32:	8833      	ldrh	r3, [r6, #0]
     e34:	2202      	movs	r2, #2
     e36:	4313      	orrs	r3, r2
     e38:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     e3a:	4d04      	ldr	r5, [pc, #16]	; (e4c <rtc_count_enable+0x30>)
     e3c:	0020      	movs	r0, r4
     e3e:	47a8      	blx	r5
     e40:	2800      	cmp	r0, #0
     e42:	d1fb      	bne.n	e3c <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
     e44:	bd70      	pop	{r4, r5, r6, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	e000e100 	.word	0xe000e100
     e4c:	00000e11 	.word	0x00000e11

00000e50 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     e50:	b570      	push	{r4, r5, r6, lr}
     e52:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     e54:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e56:	2104      	movs	r1, #4
     e58:	2380      	movs	r3, #128	; 0x80
     e5a:	4a0a      	ldr	r2, [pc, #40]	; (e84 <rtc_count_disable+0x34>)
     e5c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     e5e:	4d0a      	ldr	r5, [pc, #40]	; (e88 <rtc_count_disable+0x38>)
     e60:	0020      	movs	r0, r4
     e62:	47a8      	blx	r5
     e64:	2800      	cmp	r0, #0
     e66:	d1fb      	bne.n	e60 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     e68:	4b08      	ldr	r3, [pc, #32]	; (e8c <rtc_count_disable+0x3c>)
     e6a:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     e6c:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     e6e:	8833      	ldrh	r3, [r6, #0]
     e70:	2202      	movs	r2, #2
     e72:	4393      	bics	r3, r2
     e74:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     e76:	4d04      	ldr	r5, [pc, #16]	; (e88 <rtc_count_disable+0x38>)
     e78:	0020      	movs	r0, r4
     e7a:	47a8      	blx	r5
     e7c:	2800      	cmp	r0, #0
     e7e:	d1fb      	bne.n	e78 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
     e80:	bd70      	pop	{r4, r5, r6, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	e000e100 	.word	0xe000e100
     e88:	00000e11 	.word	0x00000e11
     e8c:	ffff81ff 	.word	0xffff81ff

00000e90 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     e94:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     e96:	4b0a      	ldr	r3, [pc, #40]	; (ec0 <rtc_count_reset+0x30>)
     e98:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     e9a:	2300      	movs	r3, #0
     e9c:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
     e9e:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     ea0:	4d08      	ldr	r5, [pc, #32]	; (ec4 <rtc_count_reset+0x34>)
     ea2:	0020      	movs	r0, r4
     ea4:	47a8      	blx	r5
     ea6:	2800      	cmp	r0, #0
     ea8:	d1fb      	bne.n	ea2 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     eaa:	8833      	ldrh	r3, [r6, #0]
     eac:	2201      	movs	r2, #1
     eae:	4313      	orrs	r3, r2
     eb0:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     eb2:	4d04      	ldr	r5, [pc, #16]	; (ec4 <rtc_count_reset+0x34>)
     eb4:	0020      	movs	r0, r4
     eb6:	47a8      	blx	r5
     eb8:	2800      	cmp	r0, #0
     eba:	d1fb      	bne.n	eb4 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
     ebc:	bd70      	pop	{r4, r5, r6, pc}
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	00000e51 	.word	0x00000e51
     ec4:	00000e11 	.word	0x00000e11

00000ec8 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eca:	b083      	sub	sp, #12
     ecc:	0004      	movs	r4, r0
     ece:	9101      	str	r1, [sp, #4]
     ed0:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ed2:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     ed4:	4f13      	ldr	r7, [pc, #76]	; (f24 <rtc_count_set_compare+0x5c>)
     ed6:	0020      	movs	r0, r4
     ed8:	47b8      	blx	r7
     eda:	2800      	cmp	r0, #0
     edc:	d1fb      	bne.n	ed6 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     ede:	7923      	ldrb	r3, [r4, #4]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d00e      	beq.n	f02 <rtc_count_set_compare+0x3a>
     ee4:	2b01      	cmp	r3, #1
     ee6:	d119      	bne.n	f1c <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
     ee8:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
     eea:	2d01      	cmp	r5, #1
     eec:	d817      	bhi.n	f1e <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     eee:	3508      	adds	r5, #8
     ef0:	00ad      	lsls	r5, r5, #2
     ef2:	9b01      	ldr	r3, [sp, #4]
     ef4:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
     ef6:	4d0b      	ldr	r5, [pc, #44]	; (f24 <rtc_count_set_compare+0x5c>)
     ef8:	0020      	movs	r0, r4
     efa:	47a8      	blx	r5
     efc:	2800      	cmp	r0, #0
     efe:	d1fb      	bne.n	ef8 <rtc_count_set_compare+0x30>
     f00:	e00d      	b.n	f1e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     f02:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     f04:	2d02      	cmp	r5, #2
     f06:	d80a      	bhi.n	f1e <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
     f08:	4b07      	ldr	r3, [pc, #28]	; (f28 <rtc_count_set_compare+0x60>)
     f0a:	9a01      	ldr	r2, [sp, #4]
     f0c:	429a      	cmp	r2, r3
     f0e:	d806      	bhi.n	f1e <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     f10:	466b      	mov	r3, sp
     f12:	889b      	ldrh	r3, [r3, #4]
     f14:	3510      	adds	r5, #16
     f16:	006d      	lsls	r5, r5, #1
     f18:	53ab      	strh	r3, [r5, r6]
			break;
     f1a:	e7ec      	b.n	ef6 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
     f1c:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     f1e:	b003      	add	sp, #12
     f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	00000e11 	.word	0x00000e11
     f28:	0000ffff 	.word	0x0000ffff

00000f2c <rtc_count_init>:
{
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	0004      	movs	r4, r0
     f30:	0015      	movs	r5, r2
	module->hw = hw;
     f32:	6001      	str	r1, [r0, #0]
     f34:	4a1f      	ldr	r2, [pc, #124]	; (fb4 <rtc_count_init+0x88>)
     f36:	6951      	ldr	r1, [r2, #20]
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	005b      	lsls	r3, r3, #1
     f3c:	430b      	orrs	r3, r1
     f3e:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     f40:	2201      	movs	r2, #1
     f42:	4b1d      	ldr	r3, [pc, #116]	; (fb8 <rtc_count_init+0x8c>)
     f44:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
     f46:	4b1d      	ldr	r3, [pc, #116]	; (fbc <rtc_count_init+0x90>)
     f48:	4798      	blx	r3
	module->mode                = config->mode;
     f4a:	78ab      	ldrb	r3, [r5, #2]
     f4c:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
     f4e:	4b1c      	ldr	r3, [pc, #112]	; (fc0 <rtc_count_init+0x94>)
     f50:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     f52:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     f54:	792b      	ldrb	r3, [r5, #4]
     f56:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
     f58:	8829      	ldrh	r1, [r5, #0]
     f5a:	430b      	orrs	r3, r1
     f5c:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     f5e:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
     f60:	78ab      	ldrb	r3, [r5, #2]
     f62:	2b00      	cmp	r3, #0
     f64:	d013      	beq.n	f8e <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
     f66:	2017      	movs	r0, #23
	switch (config->mode) {
     f68:	2b01      	cmp	r3, #1
     f6a:	d10f      	bne.n	f8c <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     f6c:	8813      	ldrh	r3, [r2, #0]
     f6e:	b29b      	uxth	r3, r3
     f70:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     f72:	78eb      	ldrb	r3, [r5, #3]
     f74:	2b00      	cmp	r3, #0
     f76:	d003      	beq.n	f80 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     f78:	8813      	ldrh	r3, [r2, #0]
     f7a:	2180      	movs	r1, #128	; 0x80
     f7c:	430b      	orrs	r3, r1
     f7e:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
     f80:	68a9      	ldr	r1, [r5, #8]
     f82:	2200      	movs	r2, #0
     f84:	0020      	movs	r0, r4
     f86:	4b0f      	ldr	r3, [pc, #60]	; (fc4 <rtc_count_init+0x98>)
     f88:	4798      	blx	r3
	return STATUS_OK;
     f8a:	2000      	movs	r0, #0
}
     f8c:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     f8e:	8813      	ldrh	r3, [r2, #0]
     f90:	2104      	movs	r1, #4
     f92:	430b      	orrs	r3, r1
     f94:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     f96:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
     f98:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     f9a:	2b00      	cmp	r3, #0
     f9c:	d1f6      	bne.n	f8c <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     f9e:	2200      	movs	r2, #0
     fa0:	68a9      	ldr	r1, [r5, #8]
     fa2:	0020      	movs	r0, r4
     fa4:	4e07      	ldr	r6, [pc, #28]	; (fc4 <rtc_count_init+0x98>)
     fa6:	47b0      	blx	r6
     fa8:	68e9      	ldr	r1, [r5, #12]
     faa:	2201      	movs	r2, #1
     fac:	0020      	movs	r0, r4
     fae:	47b0      	blx	r6
	return STATUS_OK;
     fb0:	2000      	movs	r0, #0
     fb2:	e7eb      	b.n	f8c <rtc_count_init+0x60>
     fb4:	40000400 	.word	0x40000400
     fb8:	40001000 	.word	0x40001000
     fbc:	00000e91 	.word	0x00000e91
     fc0:	200001f4 	.word	0x200001f4
     fc4:	00000ec9 	.word	0x00000ec9

00000fc8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fca:	46de      	mov	lr, fp
     fcc:	4657      	mov	r7, sl
     fce:	464e      	mov	r6, r9
     fd0:	4645      	mov	r5, r8
     fd2:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     fd4:	4b2b      	ldr	r3, [pc, #172]	; (1084 <RTC_Handler+0xbc>)
     fd6:	681b      	ldr	r3, [r3, #0]
     fd8:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     fda:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
     fde:	4652      	mov	r2, sl
     fe0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
     fe2:	401a      	ands	r2, r3
     fe4:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     fe6:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     fe8:	8973      	ldrh	r3, [r6, #10]
     fea:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     fec:	b21a      	sxth	r2, r3
     fee:	2a00      	cmp	r2, #0
     ff0:	db08      	blt.n	1004 <RTC_Handler+0x3c>
     ff2:	27ff      	movs	r7, #255	; 0xff
     ff4:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
     ff6:	d02a      	beq.n	104e <RTC_Handler+0x86>
     ff8:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     ffa:	2301      	movs	r3, #1
     ffc:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     ffe:	33fe      	adds	r3, #254	; 0xfe
    1000:	469b      	mov	fp, r3
    1002:	e014      	b.n	102e <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    1004:	4643      	mov	r3, r8
    1006:	055b      	lsls	r3, r3, #21
    1008:	d407      	bmi.n	101a <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    100a:	4b1f      	ldr	r3, [pc, #124]	; (1088 <RTC_Handler+0xc0>)
    100c:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    100e:	bc3c      	pop	{r2, r3, r4, r5}
    1010:	4690      	mov	r8, r2
    1012:	4699      	mov	r9, r3
    1014:	46a2      	mov	sl, r4
    1016:	46ab      	mov	fp, r5
    1018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    101a:	4653      	mov	r3, sl
    101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    101e:	4798      	blx	r3
    1020:	e7f3      	b.n	100a <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    1022:	465b      	mov	r3, fp
    1024:	401d      	ands	r5, r3
    1026:	81b5      	strh	r5, [r6, #12]
    1028:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    102a:	2c08      	cmp	r4, #8
    102c:	d0ef      	beq.n	100e <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    102e:	0023      	movs	r3, r4
    1030:	464d      	mov	r5, r9
    1032:	40a5      	lsls	r5, r4
    1034:	422f      	tst	r7, r5
    1036:	d0f4      	beq.n	1022 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    1038:	4642      	mov	r2, r8
    103a:	4122      	asrs	r2, r4
    103c:	4649      	mov	r1, r9
    103e:	4211      	tst	r1, r2
    1040:	d0ef      	beq.n	1022 <RTC_Handler+0x5a>
				module->callbacks[i]();
    1042:	3302      	adds	r3, #2
    1044:	009b      	lsls	r3, r3, #2
    1046:	4652      	mov	r2, sl
    1048:	589b      	ldr	r3, [r3, r2]
    104a:	4798      	blx	r3
    104c:	e7e9      	b.n	1022 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    104e:	05da      	lsls	r2, r3, #23
    1050:	d50a      	bpl.n	1068 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    1052:	4643      	mov	r3, r8
    1054:	05db      	lsls	r3, r3, #23
    1056:	d403      	bmi.n	1060 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    1058:	2380      	movs	r3, #128	; 0x80
    105a:	005b      	lsls	r3, r3, #1
    105c:	81b3      	strh	r3, [r6, #12]
    105e:	e7d6      	b.n	100e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    1060:	4653      	mov	r3, sl
    1062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1064:	4798      	blx	r3
    1066:	e7f7      	b.n	1058 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    1068:	059b      	lsls	r3, r3, #22
    106a:	d5d0      	bpl.n	100e <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    106c:	4643      	mov	r3, r8
    106e:	059b      	lsls	r3, r3, #22
    1070:	d403      	bmi.n	107a <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    1072:	2380      	movs	r3, #128	; 0x80
    1074:	009b      	lsls	r3, r3, #2
    1076:	81b3      	strh	r3, [r6, #12]
}
    1078:	e7c9      	b.n	100e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    107a:	4653      	mov	r3, sl
    107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    107e:	4798      	blx	r3
    1080:	e7f7      	b.n	1072 <RTC_Handler+0xaa>
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	200001f4 	.word	0x200001f4
    1088:	ffff8000 	.word	0xffff8000

0000108c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    108c:	b5f0      	push	{r4, r5, r6, r7, lr}
    108e:	46de      	mov	lr, fp
    1090:	4657      	mov	r7, sl
    1092:	464e      	mov	r6, r9
    1094:	4645      	mov	r5, r8
    1096:	b5e0      	push	{r5, r6, r7, lr}
    1098:	b087      	sub	sp, #28
    109a:	4680      	mov	r8, r0
    109c:	9104      	str	r1, [sp, #16]
    109e:	0016      	movs	r6, r2
    10a0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    10a2:	2200      	movs	r2, #0
    10a4:	2300      	movs	r3, #0
    10a6:	2100      	movs	r1, #0
    10a8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    10aa:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    10ac:	2001      	movs	r0, #1
    10ae:	0021      	movs	r1, r4
    10b0:	9600      	str	r6, [sp, #0]
    10b2:	9701      	str	r7, [sp, #4]
    10b4:	465c      	mov	r4, fp
    10b6:	9403      	str	r4, [sp, #12]
    10b8:	4644      	mov	r4, r8
    10ba:	9405      	str	r4, [sp, #20]
    10bc:	e013      	b.n	10e6 <long_division+0x5a>
    10be:	2420      	movs	r4, #32
    10c0:	1a64      	subs	r4, r4, r1
    10c2:	0005      	movs	r5, r0
    10c4:	40e5      	lsrs	r5, r4
    10c6:	46a8      	mov	r8, r5
    10c8:	e014      	b.n	10f4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    10ca:	9c00      	ldr	r4, [sp, #0]
    10cc:	9d01      	ldr	r5, [sp, #4]
    10ce:	1b12      	subs	r2, r2, r4
    10d0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    10d2:	465c      	mov	r4, fp
    10d4:	464d      	mov	r5, r9
    10d6:	432c      	orrs	r4, r5
    10d8:	46a3      	mov	fp, r4
    10da:	9c03      	ldr	r4, [sp, #12]
    10dc:	4645      	mov	r5, r8
    10de:	432c      	orrs	r4, r5
    10e0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    10e2:	3901      	subs	r1, #1
    10e4:	d325      	bcc.n	1132 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    10e6:	2420      	movs	r4, #32
    10e8:	4264      	negs	r4, r4
    10ea:	190c      	adds	r4, r1, r4
    10ec:	d4e7      	bmi.n	10be <long_division+0x32>
    10ee:	0005      	movs	r5, r0
    10f0:	40a5      	lsls	r5, r4
    10f2:	46a8      	mov	r8, r5
    10f4:	0004      	movs	r4, r0
    10f6:	408c      	lsls	r4, r1
    10f8:	46a1      	mov	r9, r4
		r = r << 1;
    10fa:	1892      	adds	r2, r2, r2
    10fc:	415b      	adcs	r3, r3
    10fe:	0014      	movs	r4, r2
    1100:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1102:	9e05      	ldr	r6, [sp, #20]
    1104:	464f      	mov	r7, r9
    1106:	403e      	ands	r6, r7
    1108:	46b4      	mov	ip, r6
    110a:	9e04      	ldr	r6, [sp, #16]
    110c:	4647      	mov	r7, r8
    110e:	403e      	ands	r6, r7
    1110:	46b2      	mov	sl, r6
    1112:	4666      	mov	r6, ip
    1114:	4657      	mov	r7, sl
    1116:	433e      	orrs	r6, r7
    1118:	d003      	beq.n	1122 <long_division+0x96>
			r |= 0x01;
    111a:	0006      	movs	r6, r0
    111c:	4326      	orrs	r6, r4
    111e:	0032      	movs	r2, r6
    1120:	002b      	movs	r3, r5
		if (r >= d) {
    1122:	9c00      	ldr	r4, [sp, #0]
    1124:	9d01      	ldr	r5, [sp, #4]
    1126:	429d      	cmp	r5, r3
    1128:	d8db      	bhi.n	10e2 <long_division+0x56>
    112a:	d1ce      	bne.n	10ca <long_division+0x3e>
    112c:	4294      	cmp	r4, r2
    112e:	d8d8      	bhi.n	10e2 <long_division+0x56>
    1130:	e7cb      	b.n	10ca <long_division+0x3e>
    1132:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1134:	4658      	mov	r0, fp
    1136:	0019      	movs	r1, r3
    1138:	b007      	add	sp, #28
    113a:	bc3c      	pop	{r2, r3, r4, r5}
    113c:	4690      	mov	r8, r2
    113e:	4699      	mov	r9, r3
    1140:	46a2      	mov	sl, r4
    1142:	46ab      	mov	fp, r5
    1144:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001146 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1146:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1148:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    114a:	2340      	movs	r3, #64	; 0x40
    114c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    114e:	4281      	cmp	r1, r0
    1150:	d202      	bcs.n	1158 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1152:	0018      	movs	r0, r3
    1154:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1156:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1158:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    115a:	1c63      	adds	r3, r4, #1
    115c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    115e:	4288      	cmp	r0, r1
    1160:	d9f9      	bls.n	1156 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1162:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1164:	2cff      	cmp	r4, #255	; 0xff
    1166:	d8f4      	bhi.n	1152 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1168:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    116a:	2300      	movs	r3, #0
    116c:	e7f1      	b.n	1152 <_sercom_get_sync_baud_val+0xc>
	...

00001170 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1170:	b5f0      	push	{r4, r5, r6, r7, lr}
    1172:	b083      	sub	sp, #12
    1174:	000f      	movs	r7, r1
    1176:	0016      	movs	r6, r2
    1178:	aa08      	add	r2, sp, #32
    117a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    117c:	0004      	movs	r4, r0
    117e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1180:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1182:	42bc      	cmp	r4, r7
    1184:	d902      	bls.n	118c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1186:	0010      	movs	r0, r2
    1188:	b003      	add	sp, #12
    118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    118c:	2b00      	cmp	r3, #0
    118e:	d114      	bne.n	11ba <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1190:	0002      	movs	r2, r0
    1192:	0008      	movs	r0, r1
    1194:	2100      	movs	r1, #0
    1196:	4c19      	ldr	r4, [pc, #100]	; (11fc <_sercom_get_async_baud_val+0x8c>)
    1198:	47a0      	blx	r4
    119a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    119c:	003a      	movs	r2, r7
    119e:	2300      	movs	r3, #0
    11a0:	2000      	movs	r0, #0
    11a2:	4c17      	ldr	r4, [pc, #92]	; (1200 <_sercom_get_async_baud_val+0x90>)
    11a4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    11a6:	2200      	movs	r2, #0
    11a8:	2301      	movs	r3, #1
    11aa:	1a12      	subs	r2, r2, r0
    11ac:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    11ae:	0c12      	lsrs	r2, r2, #16
    11b0:	041b      	lsls	r3, r3, #16
    11b2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    11b4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    11b6:	2200      	movs	r2, #0
    11b8:	e7e5      	b.n	1186 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    11ba:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    11bc:	2b01      	cmp	r3, #1
    11be:	d1f9      	bne.n	11b4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    11c0:	000a      	movs	r2, r1
    11c2:	2300      	movs	r3, #0
    11c4:	2100      	movs	r1, #0
    11c6:	4c0d      	ldr	r4, [pc, #52]	; (11fc <_sercom_get_async_baud_val+0x8c>)
    11c8:	47a0      	blx	r4
    11ca:	0002      	movs	r2, r0
    11cc:	000b      	movs	r3, r1
    11ce:	9200      	str	r2, [sp, #0]
    11d0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    11d2:	0038      	movs	r0, r7
    11d4:	2100      	movs	r1, #0
    11d6:	4c0a      	ldr	r4, [pc, #40]	; (1200 <_sercom_get_async_baud_val+0x90>)
    11d8:	47a0      	blx	r4
    11da:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    11dc:	2380      	movs	r3, #128	; 0x80
    11de:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11e0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    11e2:	4298      	cmp	r0, r3
    11e4:	d8cf      	bhi.n	1186 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    11e6:	0f79      	lsrs	r1, r7, #29
    11e8:	00f8      	lsls	r0, r7, #3
    11ea:	9a00      	ldr	r2, [sp, #0]
    11ec:	9b01      	ldr	r3, [sp, #4]
    11ee:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    11f0:	00ea      	lsls	r2, r5, #3
    11f2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    11f4:	b2d2      	uxtb	r2, r2
    11f6:	0352      	lsls	r2, r2, #13
    11f8:	432a      	orrs	r2, r5
    11fa:	e7db      	b.n	11b4 <_sercom_get_async_baud_val+0x44>
    11fc:	00003765 	.word	0x00003765
    1200:	0000108d 	.word	0x0000108d

00001204 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1204:	b510      	push	{r4, lr}
    1206:	b082      	sub	sp, #8
    1208:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    120a:	4b0e      	ldr	r3, [pc, #56]	; (1244 <sercom_set_gclk_generator+0x40>)
    120c:	781b      	ldrb	r3, [r3, #0]
    120e:	2b00      	cmp	r3, #0
    1210:	d007      	beq.n	1222 <sercom_set_gclk_generator+0x1e>
    1212:	2900      	cmp	r1, #0
    1214:	d105      	bne.n	1222 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1216:	4b0b      	ldr	r3, [pc, #44]	; (1244 <sercom_set_gclk_generator+0x40>)
    1218:	785b      	ldrb	r3, [r3, #1]
    121a:	4283      	cmp	r3, r0
    121c:	d010      	beq.n	1240 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    121e:	201d      	movs	r0, #29
    1220:	e00c      	b.n	123c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1222:	a901      	add	r1, sp, #4
    1224:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1226:	2011      	movs	r0, #17
    1228:	4b07      	ldr	r3, [pc, #28]	; (1248 <sercom_set_gclk_generator+0x44>)
    122a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    122c:	2011      	movs	r0, #17
    122e:	4b07      	ldr	r3, [pc, #28]	; (124c <sercom_set_gclk_generator+0x48>)
    1230:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1232:	4b04      	ldr	r3, [pc, #16]	; (1244 <sercom_set_gclk_generator+0x40>)
    1234:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1236:	2201      	movs	r2, #1
    1238:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    123a:	2000      	movs	r0, #0
}
    123c:	b002      	add	sp, #8
    123e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1240:	2000      	movs	r0, #0
    1242:	e7fb      	b.n	123c <sercom_set_gclk_generator+0x38>
    1244:	200000c0 	.word	0x200000c0
    1248:	0000257d 	.word	0x0000257d
    124c:	0000250d 	.word	0x0000250d

00001250 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1250:	4b3c      	ldr	r3, [pc, #240]	; (1344 <_sercom_get_default_pad+0xf4>)
    1252:	4298      	cmp	r0, r3
    1254:	d032      	beq.n	12bc <_sercom_get_default_pad+0x6c>
    1256:	d90a      	bls.n	126e <_sercom_get_default_pad+0x1e>
    1258:	4b3b      	ldr	r3, [pc, #236]	; (1348 <_sercom_get_default_pad+0xf8>)
    125a:	4298      	cmp	r0, r3
    125c:	d04e      	beq.n	12fc <_sercom_get_default_pad+0xac>
    125e:	4b3b      	ldr	r3, [pc, #236]	; (134c <_sercom_get_default_pad+0xfc>)
    1260:	4298      	cmp	r0, r3
    1262:	d055      	beq.n	1310 <_sercom_get_default_pad+0xc0>
    1264:	4b3a      	ldr	r3, [pc, #232]	; (1350 <_sercom_get_default_pad+0x100>)
    1266:	4298      	cmp	r0, r3
    1268:	d038      	beq.n	12dc <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    126a:	2000      	movs	r0, #0
}
    126c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    126e:	2384      	movs	r3, #132	; 0x84
    1270:	05db      	lsls	r3, r3, #23
    1272:	4298      	cmp	r0, r3
    1274:	d00c      	beq.n	1290 <_sercom_get_default_pad+0x40>
    1276:	4b37      	ldr	r3, [pc, #220]	; (1354 <_sercom_get_default_pad+0x104>)
    1278:	4298      	cmp	r0, r3
    127a:	d1f6      	bne.n	126a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    127c:	2901      	cmp	r1, #1
    127e:	d017      	beq.n	12b0 <_sercom_get_default_pad+0x60>
    1280:	2900      	cmp	r1, #0
    1282:	d057      	beq.n	1334 <_sercom_get_default_pad+0xe4>
    1284:	2902      	cmp	r1, #2
    1286:	d015      	beq.n	12b4 <_sercom_get_default_pad+0x64>
    1288:	2903      	cmp	r1, #3
    128a:	d015      	beq.n	12b8 <_sercom_get_default_pad+0x68>
	return 0;
    128c:	2000      	movs	r0, #0
    128e:	e7ed      	b.n	126c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1290:	2901      	cmp	r1, #1
    1292:	d007      	beq.n	12a4 <_sercom_get_default_pad+0x54>
    1294:	2900      	cmp	r1, #0
    1296:	d04b      	beq.n	1330 <_sercom_get_default_pad+0xe0>
    1298:	2902      	cmp	r1, #2
    129a:	d005      	beq.n	12a8 <_sercom_get_default_pad+0x58>
    129c:	2903      	cmp	r1, #3
    129e:	d005      	beq.n	12ac <_sercom_get_default_pad+0x5c>
	return 0;
    12a0:	2000      	movs	r0, #0
    12a2:	e7e3      	b.n	126c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12a4:	482c      	ldr	r0, [pc, #176]	; (1358 <_sercom_get_default_pad+0x108>)
    12a6:	e7e1      	b.n	126c <_sercom_get_default_pad+0x1c>
    12a8:	482c      	ldr	r0, [pc, #176]	; (135c <_sercom_get_default_pad+0x10c>)
    12aa:	e7df      	b.n	126c <_sercom_get_default_pad+0x1c>
    12ac:	482c      	ldr	r0, [pc, #176]	; (1360 <_sercom_get_default_pad+0x110>)
    12ae:	e7dd      	b.n	126c <_sercom_get_default_pad+0x1c>
    12b0:	482c      	ldr	r0, [pc, #176]	; (1364 <_sercom_get_default_pad+0x114>)
    12b2:	e7db      	b.n	126c <_sercom_get_default_pad+0x1c>
    12b4:	482c      	ldr	r0, [pc, #176]	; (1368 <_sercom_get_default_pad+0x118>)
    12b6:	e7d9      	b.n	126c <_sercom_get_default_pad+0x1c>
    12b8:	482c      	ldr	r0, [pc, #176]	; (136c <_sercom_get_default_pad+0x11c>)
    12ba:	e7d7      	b.n	126c <_sercom_get_default_pad+0x1c>
    12bc:	2901      	cmp	r1, #1
    12be:	d007      	beq.n	12d0 <_sercom_get_default_pad+0x80>
    12c0:	2900      	cmp	r1, #0
    12c2:	d039      	beq.n	1338 <_sercom_get_default_pad+0xe8>
    12c4:	2902      	cmp	r1, #2
    12c6:	d005      	beq.n	12d4 <_sercom_get_default_pad+0x84>
    12c8:	2903      	cmp	r1, #3
    12ca:	d005      	beq.n	12d8 <_sercom_get_default_pad+0x88>
	return 0;
    12cc:	2000      	movs	r0, #0
    12ce:	e7cd      	b.n	126c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12d0:	4827      	ldr	r0, [pc, #156]	; (1370 <_sercom_get_default_pad+0x120>)
    12d2:	e7cb      	b.n	126c <_sercom_get_default_pad+0x1c>
    12d4:	4827      	ldr	r0, [pc, #156]	; (1374 <_sercom_get_default_pad+0x124>)
    12d6:	e7c9      	b.n	126c <_sercom_get_default_pad+0x1c>
    12d8:	4827      	ldr	r0, [pc, #156]	; (1378 <_sercom_get_default_pad+0x128>)
    12da:	e7c7      	b.n	126c <_sercom_get_default_pad+0x1c>
    12dc:	2901      	cmp	r1, #1
    12de:	d007      	beq.n	12f0 <_sercom_get_default_pad+0xa0>
    12e0:	2900      	cmp	r1, #0
    12e2:	d02b      	beq.n	133c <_sercom_get_default_pad+0xec>
    12e4:	2902      	cmp	r1, #2
    12e6:	d005      	beq.n	12f4 <_sercom_get_default_pad+0xa4>
    12e8:	2903      	cmp	r1, #3
    12ea:	d005      	beq.n	12f8 <_sercom_get_default_pad+0xa8>
	return 0;
    12ec:	2000      	movs	r0, #0
    12ee:	e7bd      	b.n	126c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12f0:	4822      	ldr	r0, [pc, #136]	; (137c <_sercom_get_default_pad+0x12c>)
    12f2:	e7bb      	b.n	126c <_sercom_get_default_pad+0x1c>
    12f4:	4822      	ldr	r0, [pc, #136]	; (1380 <_sercom_get_default_pad+0x130>)
    12f6:	e7b9      	b.n	126c <_sercom_get_default_pad+0x1c>
    12f8:	4822      	ldr	r0, [pc, #136]	; (1384 <_sercom_get_default_pad+0x134>)
    12fa:	e7b7      	b.n	126c <_sercom_get_default_pad+0x1c>
    12fc:	2902      	cmp	r1, #2
    12fe:	d003      	beq.n	1308 <_sercom_get_default_pad+0xb8>
    1300:	2903      	cmp	r1, #3
    1302:	d003      	beq.n	130c <_sercom_get_default_pad+0xbc>
    1304:	2000      	movs	r0, #0
    1306:	e7b1      	b.n	126c <_sercom_get_default_pad+0x1c>
    1308:	481f      	ldr	r0, [pc, #124]	; (1388 <_sercom_get_default_pad+0x138>)
    130a:	e7af      	b.n	126c <_sercom_get_default_pad+0x1c>
    130c:	481f      	ldr	r0, [pc, #124]	; (138c <_sercom_get_default_pad+0x13c>)
    130e:	e7ad      	b.n	126c <_sercom_get_default_pad+0x1c>
    1310:	2901      	cmp	r1, #1
    1312:	d007      	beq.n	1324 <_sercom_get_default_pad+0xd4>
    1314:	2900      	cmp	r1, #0
    1316:	d013      	beq.n	1340 <_sercom_get_default_pad+0xf0>
    1318:	2902      	cmp	r1, #2
    131a:	d005      	beq.n	1328 <_sercom_get_default_pad+0xd8>
    131c:	2903      	cmp	r1, #3
    131e:	d005      	beq.n	132c <_sercom_get_default_pad+0xdc>
	return 0;
    1320:	2000      	movs	r0, #0
    1322:	e7a3      	b.n	126c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1324:	481a      	ldr	r0, [pc, #104]	; (1390 <_sercom_get_default_pad+0x140>)
    1326:	e7a1      	b.n	126c <_sercom_get_default_pad+0x1c>
    1328:	481a      	ldr	r0, [pc, #104]	; (1394 <_sercom_get_default_pad+0x144>)
    132a:	e79f      	b.n	126c <_sercom_get_default_pad+0x1c>
    132c:	481a      	ldr	r0, [pc, #104]	; (1398 <_sercom_get_default_pad+0x148>)
    132e:	e79d      	b.n	126c <_sercom_get_default_pad+0x1c>
    1330:	481a      	ldr	r0, [pc, #104]	; (139c <_sercom_get_default_pad+0x14c>)
    1332:	e79b      	b.n	126c <_sercom_get_default_pad+0x1c>
    1334:	2003      	movs	r0, #3
    1336:	e799      	b.n	126c <_sercom_get_default_pad+0x1c>
    1338:	4819      	ldr	r0, [pc, #100]	; (13a0 <_sercom_get_default_pad+0x150>)
    133a:	e797      	b.n	126c <_sercom_get_default_pad+0x1c>
    133c:	4819      	ldr	r0, [pc, #100]	; (13a4 <_sercom_get_default_pad+0x154>)
    133e:	e795      	b.n	126c <_sercom_get_default_pad+0x1c>
    1340:	4819      	ldr	r0, [pc, #100]	; (13a8 <_sercom_get_default_pad+0x158>)
    1342:	e793      	b.n	126c <_sercom_get_default_pad+0x1c>
    1344:	42000800 	.word	0x42000800
    1348:	42001000 	.word	0x42001000
    134c:	43000400 	.word	0x43000400
    1350:	42000c00 	.word	0x42000c00
    1354:	42000400 	.word	0x42000400
    1358:	00050003 	.word	0x00050003
    135c:	00060003 	.word	0x00060003
    1360:	00070003 	.word	0x00070003
    1364:	00010003 	.word	0x00010003
    1368:	001e0003 	.word	0x001e0003
    136c:	001f0003 	.word	0x001f0003
    1370:	00090003 	.word	0x00090003
    1374:	000a0003 	.word	0x000a0003
    1378:	000b0003 	.word	0x000b0003
    137c:	00110003 	.word	0x00110003
    1380:	00120003 	.word	0x00120003
    1384:	00130003 	.word	0x00130003
    1388:	000e0003 	.word	0x000e0003
    138c:	000f0003 	.word	0x000f0003
    1390:	00170003 	.word	0x00170003
    1394:	00180003 	.word	0x00180003
    1398:	00190003 	.word	0x00190003
    139c:	00040003 	.word	0x00040003
    13a0:	00080003 	.word	0x00080003
    13a4:	00100003 	.word	0x00100003
    13a8:	00160003 	.word	0x00160003

000013ac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    13ac:	b530      	push	{r4, r5, lr}
    13ae:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    13b0:	4b0b      	ldr	r3, [pc, #44]	; (13e0 <_sercom_get_sercom_inst_index+0x34>)
    13b2:	466a      	mov	r2, sp
    13b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    13b6:	c232      	stmia	r2!, {r1, r4, r5}
    13b8:	cb32      	ldmia	r3!, {r1, r4, r5}
    13ba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    13bc:	9b00      	ldr	r3, [sp, #0]
    13be:	4283      	cmp	r3, r0
    13c0:	d00b      	beq.n	13da <_sercom_get_sercom_inst_index+0x2e>
    13c2:	2301      	movs	r3, #1
    13c4:	009a      	lsls	r2, r3, #2
    13c6:	4669      	mov	r1, sp
    13c8:	5852      	ldr	r2, [r2, r1]
    13ca:	4282      	cmp	r2, r0
    13cc:	d006      	beq.n	13dc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13ce:	3301      	adds	r3, #1
    13d0:	2b06      	cmp	r3, #6
    13d2:	d1f7      	bne.n	13c4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    13d4:	2000      	movs	r0, #0
}
    13d6:	b007      	add	sp, #28
    13d8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13da:	2300      	movs	r3, #0
			return i;
    13dc:	b2d8      	uxtb	r0, r3
    13de:	e7fa      	b.n	13d6 <_sercom_get_sercom_inst_index+0x2a>
    13e0:	00004a08 	.word	0x00004a08

000013e4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    13e4:	4770      	bx	lr
	...

000013e8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    13e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    13ea:	4b0a      	ldr	r3, [pc, #40]	; (1414 <_sercom_set_handler+0x2c>)
    13ec:	781b      	ldrb	r3, [r3, #0]
    13ee:	2b00      	cmp	r3, #0
    13f0:	d10c      	bne.n	140c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    13f2:	4f09      	ldr	r7, [pc, #36]	; (1418 <_sercom_set_handler+0x30>)
    13f4:	4e09      	ldr	r6, [pc, #36]	; (141c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    13f6:	4d0a      	ldr	r5, [pc, #40]	; (1420 <_sercom_set_handler+0x38>)
    13f8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    13fa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    13fc:	195a      	adds	r2, r3, r5
    13fe:	6014      	str	r4, [r2, #0]
    1400:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1402:	2b18      	cmp	r3, #24
    1404:	d1f9      	bne.n	13fa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1406:	2201      	movs	r2, #1
    1408:	4b02      	ldr	r3, [pc, #8]	; (1414 <_sercom_set_handler+0x2c>)
    140a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    140c:	0080      	lsls	r0, r0, #2
    140e:	4b02      	ldr	r3, [pc, #8]	; (1418 <_sercom_set_handler+0x30>)
    1410:	50c1      	str	r1, [r0, r3]
}
    1412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1414:	200000c2 	.word	0x200000c2
    1418:	200000c4 	.word	0x200000c4
    141c:	000013e5 	.word	0x000013e5
    1420:	200001f8 	.word	0x200001f8

00001424 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1424:	b500      	push	{lr}
    1426:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1428:	2308      	movs	r3, #8
    142a:	466a      	mov	r2, sp
    142c:	7013      	strb	r3, [r2, #0]
    142e:	3301      	adds	r3, #1
    1430:	7053      	strb	r3, [r2, #1]
    1432:	3301      	adds	r3, #1
    1434:	7093      	strb	r3, [r2, #2]
    1436:	3301      	adds	r3, #1
    1438:	70d3      	strb	r3, [r2, #3]
    143a:	3301      	adds	r3, #1
    143c:	7113      	strb	r3, [r2, #4]
    143e:	3301      	adds	r3, #1
    1440:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1442:	4b03      	ldr	r3, [pc, #12]	; (1450 <_sercom_get_interrupt_vector+0x2c>)
    1444:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1446:	466b      	mov	r3, sp
    1448:	5618      	ldrsb	r0, [r3, r0]
}
    144a:	b003      	add	sp, #12
    144c:	bd00      	pop	{pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	000013ad 	.word	0x000013ad

00001454 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1454:	b510      	push	{r4, lr}
    1456:	4b02      	ldr	r3, [pc, #8]	; (1460 <SERCOM0_Handler+0xc>)
    1458:	681b      	ldr	r3, [r3, #0]
    145a:	2000      	movs	r0, #0
    145c:	4798      	blx	r3
    145e:	bd10      	pop	{r4, pc}
    1460:	200000c4 	.word	0x200000c4

00001464 <SERCOM1_Handler>:
    1464:	b510      	push	{r4, lr}
    1466:	4b02      	ldr	r3, [pc, #8]	; (1470 <SERCOM1_Handler+0xc>)
    1468:	685b      	ldr	r3, [r3, #4]
    146a:	2001      	movs	r0, #1
    146c:	4798      	blx	r3
    146e:	bd10      	pop	{r4, pc}
    1470:	200000c4 	.word	0x200000c4

00001474 <SERCOM2_Handler>:
    1474:	b510      	push	{r4, lr}
    1476:	4b02      	ldr	r3, [pc, #8]	; (1480 <SERCOM2_Handler+0xc>)
    1478:	689b      	ldr	r3, [r3, #8]
    147a:	2002      	movs	r0, #2
    147c:	4798      	blx	r3
    147e:	bd10      	pop	{r4, pc}
    1480:	200000c4 	.word	0x200000c4

00001484 <SERCOM3_Handler>:
    1484:	b510      	push	{r4, lr}
    1486:	4b02      	ldr	r3, [pc, #8]	; (1490 <SERCOM3_Handler+0xc>)
    1488:	68db      	ldr	r3, [r3, #12]
    148a:	2003      	movs	r0, #3
    148c:	4798      	blx	r3
    148e:	bd10      	pop	{r4, pc}
    1490:	200000c4 	.word	0x200000c4

00001494 <SERCOM4_Handler>:
    1494:	b510      	push	{r4, lr}
    1496:	4b02      	ldr	r3, [pc, #8]	; (14a0 <SERCOM4_Handler+0xc>)
    1498:	691b      	ldr	r3, [r3, #16]
    149a:	2004      	movs	r0, #4
    149c:	4798      	blx	r3
    149e:	bd10      	pop	{r4, pc}
    14a0:	200000c4 	.word	0x200000c4

000014a4 <SERCOM5_Handler>:
    14a4:	b510      	push	{r4, lr}
    14a6:	4b02      	ldr	r3, [pc, #8]	; (14b0 <SERCOM5_Handler+0xc>)
    14a8:	695b      	ldr	r3, [r3, #20]
    14aa:	2005      	movs	r0, #5
    14ac:	4798      	blx	r3
    14ae:	bd10      	pop	{r4, pc}
    14b0:	200000c4 	.word	0x200000c4

000014b4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    14b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14b6:	46d6      	mov	lr, sl
    14b8:	464f      	mov	r7, r9
    14ba:	4646      	mov	r6, r8
    14bc:	b5c0      	push	{r6, r7, lr}
    14be:	b08a      	sub	sp, #40	; 0x28
    14c0:	0006      	movs	r6, r0
    14c2:	000f      	movs	r7, r1
    14c4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    14c6:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    14c8:	680b      	ldr	r3, [r1, #0]
    14ca:	079b      	lsls	r3, r3, #30
    14cc:	d40a      	bmi.n	14e4 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    14ce:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    14d0:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    14d2:	07db      	lsls	r3, r3, #31
    14d4:	d400      	bmi.n	14d8 <spi_init+0x24>
    14d6:	e097      	b.n	1608 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    14d8:	b00a      	add	sp, #40	; 0x28
    14da:	bc1c      	pop	{r2, r3, r4}
    14dc:	4690      	mov	r8, r2
    14de:	4699      	mov	r9, r3
    14e0:	46a2      	mov	sl, r4
    14e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    14e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14e6:	9305      	str	r3, [sp, #20]
    14e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    14ea:	9306      	str	r3, [sp, #24]
    14ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
    14ee:	9307      	str	r3, [sp, #28]
    14f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    14f2:	9308      	str	r3, [sp, #32]
    14f4:	2500      	movs	r5, #0
    14f6:	e00a      	b.n	150e <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    14f8:	0038      	movs	r0, r7
    14fa:	4b9a      	ldr	r3, [pc, #616]	; (1764 <spi_init+0x2b0>)
    14fc:	4798      	blx	r3
    14fe:	e00e      	b.n	151e <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1500:	230f      	movs	r3, #15
    1502:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    1504:	4581      	cmp	r9, r0
    1506:	d130      	bne.n	156a <spi_init+0xb6>
    1508:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    150a:	2d04      	cmp	r5, #4
    150c:	d031      	beq.n	1572 <spi_init+0xbe>
    150e:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1510:	00ab      	lsls	r3, r5, #2
    1512:	aa02      	add	r2, sp, #8
    1514:	200c      	movs	r0, #12
    1516:	1812      	adds	r2, r2, r0
    1518:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    151a:	2800      	cmp	r0, #0
    151c:	d0ec      	beq.n	14f8 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    151e:	1c43      	adds	r3, r0, #1
    1520:	d0f2      	beq.n	1508 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    1522:	0401      	lsls	r1, r0, #16
    1524:	0c0b      	lsrs	r3, r1, #16
    1526:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1528:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    152a:	b2c3      	uxtb	r3, r0
    152c:	469c      	mov	ip, r3
		return NULL;
    152e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1530:	0602      	lsls	r2, r0, #24
    1532:	d405      	bmi.n	1540 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    1534:	4663      	mov	r3, ip
    1536:	095b      	lsrs	r3, r3, #5
    1538:	01db      	lsls	r3, r3, #7
    153a:	4a8b      	ldr	r2, [pc, #556]	; (1768 <spi_init+0x2b4>)
    153c:	4690      	mov	r8, r2
    153e:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    1540:	221f      	movs	r2, #31
    1542:	4660      	mov	r0, ip
    1544:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1546:	1898      	adds	r0, r3, r2
    1548:	3040      	adds	r0, #64	; 0x40
    154a:	7800      	ldrb	r0, [r0, #0]
    154c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    154e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1550:	4651      	mov	r1, sl
    1552:	07c9      	lsls	r1, r1, #31
    1554:	d5d6      	bpl.n	1504 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1556:	0852      	lsrs	r2, r2, #1
    1558:	189b      	adds	r3, r3, r2
    155a:	3330      	adds	r3, #48	; 0x30
    155c:	7818      	ldrb	r0, [r3, #0]
    155e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    1560:	4663      	mov	r3, ip
    1562:	07db      	lsls	r3, r3, #31
    1564:	d5cc      	bpl.n	1500 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1566:	0900      	lsrs	r0, r0, #4
    1568:	e7cc      	b.n	1504 <spi_init+0x50>
			module->hw = NULL;
    156a:	2300      	movs	r3, #0
    156c:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    156e:	201c      	movs	r0, #28
    1570:	e7b2      	b.n	14d8 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1572:	2011      	movs	r0, #17
    1574:	4b7d      	ldr	r3, [pc, #500]	; (176c <spi_init+0x2b8>)
    1576:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1578:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    157a:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    157c:	2a01      	cmp	r2, #1
    157e:	d026      	beq.n	15ce <spi_init+0x11a>
	ctrla |= config->mux_setting;
    1580:	6863      	ldr	r3, [r4, #4]
    1582:	68a2      	ldr	r2, [r4, #8]
    1584:	4313      	orrs	r3, r2
    1586:	68e2      	ldr	r2, [r4, #12]
    1588:	4313      	orrs	r3, r2
    158a:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    158c:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    158e:	7c61      	ldrb	r1, [r4, #17]
    1590:	2900      	cmp	r1, #0
    1592:	d001      	beq.n	1598 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1594:	2180      	movs	r1, #128	; 0x80
    1596:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1598:	7ca1      	ldrb	r1, [r4, #18]
    159a:	2900      	cmp	r1, #0
    159c:	d002      	beq.n	15a4 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    159e:	2180      	movs	r1, #128	; 0x80
    15a0:	0289      	lsls	r1, r1, #10
    15a2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    15a4:	7ce1      	ldrb	r1, [r4, #19]
    15a6:	2900      	cmp	r1, #0
    15a8:	d002      	beq.n	15b0 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    15aa:	2180      	movs	r1, #128	; 0x80
    15ac:	0089      	lsls	r1, r1, #2
    15ae:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    15b0:	7d21      	ldrb	r1, [r4, #20]
    15b2:	2900      	cmp	r1, #0
    15b4:	d002      	beq.n	15bc <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    15b6:	2180      	movs	r1, #128	; 0x80
    15b8:	0189      	lsls	r1, r1, #6
    15ba:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    15bc:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    15be:	2002      	movs	r0, #2
    15c0:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    15c2:	428b      	cmp	r3, r1
    15c4:	d017      	beq.n	15f6 <spi_init+0x142>
	module->hw = NULL;
    15c6:	2300      	movs	r3, #0
    15c8:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    15ca:	201c      	movs	r0, #28
    15cc:	e784      	b.n	14d8 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    15ce:	aa04      	add	r2, sp, #16
    15d0:	0001      	movs	r1, r0
    15d2:	69a0      	ldr	r0, [r4, #24]
    15d4:	4b66      	ldr	r3, [pc, #408]	; (1770 <spi_init+0x2bc>)
    15d6:	4798      	blx	r3
    15d8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    15da:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    15dc:	2b00      	cmp	r3, #0
    15de:	d000      	beq.n	15e2 <spi_init+0x12e>
    15e0:	e77a      	b.n	14d8 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    15e2:	7b3b      	ldrb	r3, [r7, #12]
    15e4:	b2db      	uxtb	r3, r3
    15e6:	aa04      	add	r2, sp, #16
    15e8:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    15ea:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    15ec:	429a      	cmp	r2, r3
    15ee:	d000      	beq.n	15f2 <spi_init+0x13e>
    15f0:	e772      	b.n	14d8 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    15f2:	350c      	adds	r5, #12
    15f4:	e7c4      	b.n	1580 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    15f6:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    15f8:	4293      	cmp	r3, r2
    15fa:	d1e4      	bne.n	15c6 <spi_init+0x112>
		module->mode           = config->mode;
    15fc:	7823      	ldrb	r3, [r4, #0]
    15fe:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    1600:	7c23      	ldrb	r3, [r4, #16]
    1602:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    1604:	2000      	movs	r0, #0
    1606:	e767      	b.n	14d8 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1608:	0008      	movs	r0, r1
    160a:	4b5a      	ldr	r3, [pc, #360]	; (1774 <spi_init+0x2c0>)
    160c:	4798      	blx	r3
	if (sercom_index == 5) {
    160e:	2805      	cmp	r0, #5
    1610:	d100      	bne.n	1614 <spi_init+0x160>
    1612:	e09f      	b.n	1754 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1614:	0003      	movs	r3, r0
    1616:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    1618:	4957      	ldr	r1, [pc, #348]	; (1778 <spi_init+0x2c4>)
    161a:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    161c:	2201      	movs	r2, #1
    161e:	4082      	lsls	r2, r0
    1620:	432a      	orrs	r2, r5
    1622:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    1624:	a909      	add	r1, sp, #36	; 0x24
    1626:	2524      	movs	r5, #36	; 0x24
    1628:	5d62      	ldrb	r2, [r4, r5]
    162a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    162c:	b2db      	uxtb	r3, r3
    162e:	9301      	str	r3, [sp, #4]
    1630:	0018      	movs	r0, r3
    1632:	4b52      	ldr	r3, [pc, #328]	; (177c <spi_init+0x2c8>)
    1634:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1636:	9801      	ldr	r0, [sp, #4]
    1638:	4b51      	ldr	r3, [pc, #324]	; (1780 <spi_init+0x2cc>)
    163a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    163c:	5d60      	ldrb	r0, [r4, r5]
    163e:	2100      	movs	r1, #0
    1640:	4b50      	ldr	r3, [pc, #320]	; (1784 <spi_init+0x2d0>)
    1642:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1644:	7823      	ldrb	r3, [r4, #0]
    1646:	2b01      	cmp	r3, #1
    1648:	d019      	beq.n	167e <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    164a:	6833      	ldr	r3, [r6, #0]
    164c:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    164e:	ab04      	add	r3, sp, #16
    1650:	2280      	movs	r2, #128	; 0x80
    1652:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1654:	2200      	movs	r2, #0
    1656:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1658:	2101      	movs	r1, #1
    165a:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    165c:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    165e:	7823      	ldrb	r3, [r4, #0]
    1660:	2b00      	cmp	r3, #0
    1662:	d101      	bne.n	1668 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1664:	ab04      	add	r3, sp, #16
    1666:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1668:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166a:	9305      	str	r3, [sp, #20]
    166c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    166e:	9306      	str	r3, [sp, #24]
    1670:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1672:	9307      	str	r3, [sp, #28]
    1674:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1676:	9308      	str	r3, [sp, #32]
    1678:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    167a:	ad05      	add	r5, sp, #20
    167c:	e011      	b.n	16a2 <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    167e:	683b      	ldr	r3, [r7, #0]
    1680:	220c      	movs	r2, #12
    1682:	4313      	orrs	r3, r2
    1684:	603b      	str	r3, [r7, #0]
    1686:	e7e0      	b.n	164a <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1688:	4640      	mov	r0, r8
    168a:	4b36      	ldr	r3, [pc, #216]	; (1764 <spi_init+0x2b0>)
    168c:	4798      	blx	r3
    168e:	e00d      	b.n	16ac <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1690:	a904      	add	r1, sp, #16
    1692:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1694:	0c00      	lsrs	r0, r0, #16
    1696:	b2c0      	uxtb	r0, r0
    1698:	4b3b      	ldr	r3, [pc, #236]	; (1788 <spi_init+0x2d4>)
    169a:	4798      	blx	r3
    169c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    169e:	2f04      	cmp	r7, #4
    16a0:	d007      	beq.n	16b2 <spi_init+0x1fe>
    16a2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16a4:	00bb      	lsls	r3, r7, #2
    16a6:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    16a8:	2800      	cmp	r0, #0
    16aa:	d0ed      	beq.n	1688 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    16ac:	1c43      	adds	r3, r0, #1
    16ae:	d1ef      	bne.n	1690 <spi_init+0x1dc>
    16b0:	e7f4      	b.n	169c <spi_init+0x1e8>
	module->mode             = config->mode;
    16b2:	7823      	ldrb	r3, [r4, #0]
    16b4:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    16b6:	7c23      	ldrb	r3, [r4, #16]
    16b8:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    16ba:	7ca3      	ldrb	r3, [r4, #18]
    16bc:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    16be:	7d23      	ldrb	r3, [r4, #20]
    16c0:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    16c2:	2200      	movs	r2, #0
    16c4:	ab02      	add	r3, sp, #8
    16c6:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    16c8:	7823      	ldrb	r3, [r4, #0]
    16ca:	2b01      	cmp	r3, #1
    16cc:	d02a      	beq.n	1724 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    16ce:	6863      	ldr	r3, [r4, #4]
    16d0:	68a2      	ldr	r2, [r4, #8]
    16d2:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    16d4:	68e2      	ldr	r2, [r4, #12]
    16d6:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    16d8:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    16da:	7c62      	ldrb	r2, [r4, #17]
    16dc:	2a00      	cmp	r2, #0
    16de:	d103      	bne.n	16e8 <spi_init+0x234>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    16e0:	4a2a      	ldr	r2, [pc, #168]	; (178c <spi_init+0x2d8>)
    16e2:	7892      	ldrb	r2, [r2, #2]
    16e4:	0792      	lsls	r2, r2, #30
    16e6:	d501      	bpl.n	16ec <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    16e8:	2280      	movs	r2, #128	; 0x80
    16ea:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    16ec:	7ca2      	ldrb	r2, [r4, #18]
    16ee:	2a00      	cmp	r2, #0
    16f0:	d002      	beq.n	16f8 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    16f2:	2280      	movs	r2, #128	; 0x80
    16f4:	0292      	lsls	r2, r2, #10
    16f6:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    16f8:	7ce2      	ldrb	r2, [r4, #19]
    16fa:	2a00      	cmp	r2, #0
    16fc:	d002      	beq.n	1704 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    16fe:	2280      	movs	r2, #128	; 0x80
    1700:	0092      	lsls	r2, r2, #2
    1702:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1704:	7d22      	ldrb	r2, [r4, #20]
    1706:	2a00      	cmp	r2, #0
    1708:	d002      	beq.n	1710 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    170a:	2280      	movs	r2, #128	; 0x80
    170c:	0192      	lsls	r2, r2, #6
    170e:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1710:	4642      	mov	r2, r8
    1712:	6812      	ldr	r2, [r2, #0]
    1714:	4313      	orrs	r3, r2
    1716:	4642      	mov	r2, r8
    1718:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    171a:	6853      	ldr	r3, [r2, #4]
    171c:	430b      	orrs	r3, r1
    171e:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    1720:	2000      	movs	r0, #0
    1722:	e6d9      	b.n	14d8 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1724:	6830      	ldr	r0, [r6, #0]
    1726:	4b13      	ldr	r3, [pc, #76]	; (1774 <spi_init+0x2c0>)
    1728:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    172a:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    172c:	b2c0      	uxtb	r0, r0
    172e:	4b0f      	ldr	r3, [pc, #60]	; (176c <spi_init+0x2b8>)
    1730:	4798      	blx	r3
    1732:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1734:	ab02      	add	r3, sp, #8
    1736:	1d9a      	adds	r2, r3, #6
    1738:	69a0      	ldr	r0, [r4, #24]
    173a:	4b0d      	ldr	r3, [pc, #52]	; (1770 <spi_init+0x2bc>)
    173c:	4798      	blx	r3
    173e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1740:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1742:	2b00      	cmp	r3, #0
    1744:	d000      	beq.n	1748 <spi_init+0x294>
    1746:	e6c7      	b.n	14d8 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1748:	ab02      	add	r3, sp, #8
    174a:	3306      	adds	r3, #6
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	4642      	mov	r2, r8
    1750:	7313      	strb	r3, [r2, #12]
    1752:	e7bc      	b.n	16ce <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    1754:	4a08      	ldr	r2, [pc, #32]	; (1778 <spi_init+0x2c4>)
    1756:	6a13      	ldr	r3, [r2, #32]
    1758:	2102      	movs	r1, #2
    175a:	430b      	orrs	r3, r1
    175c:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    175e:	2318      	movs	r3, #24
    1760:	e760      	b.n	1624 <spi_init+0x170>
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	00001251 	.word	0x00001251
    1768:	40002800 	.word	0x40002800
    176c:	000025a1 	.word	0x000025a1
    1770:	00001147 	.word	0x00001147
    1774:	000013ad 	.word	0x000013ad
    1778:	40000400 	.word	0x40000400
    177c:	0000257d 	.word	0x0000257d
    1780:	0000250d 	.word	0x0000250d
    1784:	00001205 	.word	0x00001205
    1788:	00002679 	.word	0x00002679
    178c:	41002000 	.word	0x41002000

00001790 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1790:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1792:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1794:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1796:	2c01      	cmp	r4, #1
    1798:	d001      	beq.n	179e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    179a:	0018      	movs	r0, r3
    179c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    179e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    17a0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    17a2:	2c00      	cmp	r4, #0
    17a4:	d1f9      	bne.n	179a <spi_select_slave+0xa>
		if (select) {
    17a6:	2a00      	cmp	r2, #0
    17a8:	d058      	beq.n	185c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    17aa:	784b      	ldrb	r3, [r1, #1]
    17ac:	2b00      	cmp	r3, #0
    17ae:	d044      	beq.n	183a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17b0:	6803      	ldr	r3, [r0, #0]
    17b2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    17b4:	07db      	lsls	r3, r3, #31
    17b6:	d410      	bmi.n	17da <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    17b8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    17ba:	09d1      	lsrs	r1, r2, #7
		return NULL;
    17bc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17be:	2900      	cmp	r1, #0
    17c0:	d104      	bne.n	17cc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    17c2:	0953      	lsrs	r3, r2, #5
    17c4:	01db      	lsls	r3, r3, #7
    17c6:	492e      	ldr	r1, [pc, #184]	; (1880 <spi_select_slave+0xf0>)
    17c8:	468c      	mov	ip, r1
    17ca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17cc:	211f      	movs	r1, #31
    17ce:	4011      	ands	r1, r2
    17d0:	2201      	movs	r2, #1
    17d2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    17d4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    17d6:	2305      	movs	r3, #5
    17d8:	e7df      	b.n	179a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    17da:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    17dc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    17de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17e0:	2c00      	cmp	r4, #0
    17e2:	d104      	bne.n	17ee <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    17e4:	0953      	lsrs	r3, r2, #5
    17e6:	01db      	lsls	r3, r3, #7
    17e8:	4c25      	ldr	r4, [pc, #148]	; (1880 <spi_select_slave+0xf0>)
    17ea:	46a4      	mov	ip, r4
    17ec:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17ee:	241f      	movs	r4, #31
    17f0:	4014      	ands	r4, r2
    17f2:	2201      	movs	r2, #1
    17f4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    17f6:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    17f8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17fa:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    17fc:	07d2      	lsls	r2, r2, #31
    17fe:	d501      	bpl.n	1804 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1800:	788a      	ldrb	r2, [r1, #2]
    1802:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1804:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1806:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1808:	2a00      	cmp	r2, #0
    180a:	d1c6      	bne.n	179a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    180c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    180e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1810:	7e13      	ldrb	r3, [r2, #24]
    1812:	420b      	tst	r3, r1
    1814:	d0fc      	beq.n	1810 <spi_select_slave+0x80>
    1816:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1818:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    181a:	0749      	lsls	r1, r1, #29
    181c:	d5bd      	bpl.n	179a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    181e:	8b53      	ldrh	r3, [r2, #26]
    1820:	075b      	lsls	r3, r3, #29
    1822:	d501      	bpl.n	1828 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1824:	2304      	movs	r3, #4
    1826:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1828:	7983      	ldrb	r3, [r0, #6]
    182a:	2b01      	cmp	r3, #1
    182c:	d002      	beq.n	1834 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    182e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1830:	2300      	movs	r3, #0
    1832:	e7b2      	b.n	179a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1834:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1836:	2300      	movs	r3, #0
    1838:	e7af      	b.n	179a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    183a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    183c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    183e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1840:	2900      	cmp	r1, #0
    1842:	d104      	bne.n	184e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1844:	0953      	lsrs	r3, r2, #5
    1846:	01db      	lsls	r3, r3, #7
    1848:	490d      	ldr	r1, [pc, #52]	; (1880 <spi_select_slave+0xf0>)
    184a:	468c      	mov	ip, r1
    184c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    184e:	211f      	movs	r1, #31
    1850:	4011      	ands	r1, r2
    1852:	2201      	movs	r2, #1
    1854:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1856:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1858:	2300      	movs	r3, #0
    185a:	e79e      	b.n	179a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    185c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    185e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1860:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1862:	2900      	cmp	r1, #0
    1864:	d104      	bne.n	1870 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1866:	0953      	lsrs	r3, r2, #5
    1868:	01db      	lsls	r3, r3, #7
    186a:	4905      	ldr	r1, [pc, #20]	; (1880 <spi_select_slave+0xf0>)
    186c:	468c      	mov	ip, r1
    186e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1870:	211f      	movs	r1, #31
    1872:	4011      	ands	r1, r2
    1874:	2201      	movs	r2, #1
    1876:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1878:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    187a:	2300      	movs	r3, #0
    187c:	e78d      	b.n	179a <spi_select_slave+0xa>
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	40002800 	.word	0x40002800

00001884 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1884:	b5f0      	push	{r4, r5, r6, r7, lr}
    1886:	46de      	mov	lr, fp
    1888:	4657      	mov	r7, sl
    188a:	464e      	mov	r6, r9
    188c:	4645      	mov	r5, r8
    188e:	b5e0      	push	{r5, r6, r7, lr}
    1890:	b091      	sub	sp, #68	; 0x44
    1892:	0005      	movs	r5, r0
    1894:	000c      	movs	r4, r1
    1896:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1898:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    189a:	0008      	movs	r0, r1
    189c:	4bc4      	ldr	r3, [pc, #784]	; (1bb0 <usart_init+0x32c>)
    189e:	4798      	blx	r3
    18a0:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    18a2:	2805      	cmp	r0, #5
    18a4:	d00d      	beq.n	18c2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    18a6:	0007      	movs	r7, r0
    18a8:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    18aa:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    18ac:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    18ae:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    18b0:	07c9      	lsls	r1, r1, #31
    18b2:	d509      	bpl.n	18c8 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    18b4:	b011      	add	sp, #68	; 0x44
    18b6:	bc3c      	pop	{r2, r3, r4, r5}
    18b8:	4690      	mov	r8, r2
    18ba:	4699      	mov	r9, r3
    18bc:	46a2      	mov	sl, r4
    18be:	46ab      	mov	fp, r5
    18c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    18c2:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    18c4:	2301      	movs	r3, #1
    18c6:	e7f1      	b.n	18ac <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    18c8:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    18ca:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    18cc:	0789      	lsls	r1, r1, #30
    18ce:	d4f1      	bmi.n	18b4 <usart_init+0x30>
	if (sercom_index == 5) {
    18d0:	2a05      	cmp	r2, #5
    18d2:	d049      	beq.n	1968 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    18d4:	49b7      	ldr	r1, [pc, #732]	; (1bb4 <usart_init+0x330>)
    18d6:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    18d8:	2201      	movs	r2, #1
    18da:	409a      	lsls	r2, r3
    18dc:	0013      	movs	r3, r2
    18de:	4303      	orrs	r3, r0
    18e0:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    18e2:	a90f      	add	r1, sp, #60	; 0x3c
    18e4:	232d      	movs	r3, #45	; 0x2d
    18e6:	4698      	mov	r8, r3
    18e8:	5cf3      	ldrb	r3, [r6, r3]
    18ea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    18ec:	b2ff      	uxtb	r7, r7
    18ee:	0038      	movs	r0, r7
    18f0:	4bb1      	ldr	r3, [pc, #708]	; (1bb8 <usart_init+0x334>)
    18f2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    18f4:	0038      	movs	r0, r7
    18f6:	4bb1      	ldr	r3, [pc, #708]	; (1bbc <usart_init+0x338>)
    18f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    18fa:	4643      	mov	r3, r8
    18fc:	5cf0      	ldrb	r0, [r6, r3]
    18fe:	2100      	movs	r1, #0
    1900:	4baf      	ldr	r3, [pc, #700]	; (1bc0 <usart_init+0x33c>)
    1902:	4798      	blx	r3
	module->character_size = config->character_size;
    1904:	7af3      	ldrb	r3, [r6, #11]
    1906:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1908:	2324      	movs	r3, #36	; 0x24
    190a:	5cf3      	ldrb	r3, [r6, r3]
    190c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    190e:	2325      	movs	r3, #37	; 0x25
    1910:	5cf3      	ldrb	r3, [r6, r3]
    1912:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1914:	7ef3      	ldrb	r3, [r6, #27]
    1916:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1918:	7f33      	ldrb	r3, [r6, #28]
    191a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    191c:	682b      	ldr	r3, [r5, #0]
    191e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1920:	0018      	movs	r0, r3
    1922:	4ba3      	ldr	r3, [pc, #652]	; (1bb0 <usart_init+0x32c>)
    1924:	4798      	blx	r3
	if (sercom_index == 5) {
    1926:	2805      	cmp	r0, #5
    1928:	d026      	beq.n	1978 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    192a:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    192c:	2200      	movs	r2, #0
    192e:	230e      	movs	r3, #14
    1930:	a906      	add	r1, sp, #24
    1932:	468c      	mov	ip, r1
    1934:	4463      	add	r3, ip
    1936:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1938:	8a32      	ldrh	r2, [r6, #16]
    193a:	9202      	str	r2, [sp, #8]
    193c:	2380      	movs	r3, #128	; 0x80
    193e:	01db      	lsls	r3, r3, #7
    1940:	429a      	cmp	r2, r3
    1942:	d100      	bne.n	1946 <usart_init+0xc2>
    1944:	e0a7      	b.n	1a96 <usart_init+0x212>
    1946:	d919      	bls.n	197c <usart_init+0xf8>
    1948:	23c0      	movs	r3, #192	; 0xc0
    194a:	01db      	lsls	r3, r3, #7
    194c:	9a02      	ldr	r2, [sp, #8]
    194e:	429a      	cmp	r2, r3
    1950:	d100      	bne.n	1954 <usart_init+0xd0>
    1952:	e09b      	b.n	1a8c <usart_init+0x208>
    1954:	2380      	movs	r3, #128	; 0x80
    1956:	021b      	lsls	r3, r3, #8
    1958:	429a      	cmp	r2, r3
    195a:	d000      	beq.n	195e <usart_init+0xda>
    195c:	e123      	b.n	1ba6 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    195e:	2303      	movs	r3, #3
    1960:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1962:	2300      	movs	r3, #0
    1964:	9307      	str	r3, [sp, #28]
    1966:	e012      	b.n	198e <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    1968:	4992      	ldr	r1, [pc, #584]	; (1bb4 <usart_init+0x330>)
    196a:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    196c:	3a04      	subs	r2, #4
    196e:	409a      	lsls	r2, r3
    1970:	0013      	movs	r3, r2
    1972:	4303      	orrs	r3, r0
    1974:	620b      	str	r3, [r1, #32]
    1976:	e7b4      	b.n	18e2 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1978:	2018      	movs	r0, #24
    197a:	e7d7      	b.n	192c <usart_init+0xa8>
	switch (config->sample_rate) {
    197c:	2380      	movs	r3, #128	; 0x80
    197e:	019b      	lsls	r3, r3, #6
    1980:	429a      	cmp	r2, r3
    1982:	d000      	beq.n	1986 <usart_init+0x102>
    1984:	e10f      	b.n	1ba6 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1986:	2310      	movs	r3, #16
    1988:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    198a:	3b0f      	subs	r3, #15
    198c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    198e:	6833      	ldr	r3, [r6, #0]
    1990:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1992:	68f3      	ldr	r3, [r6, #12]
    1994:	469b      	mov	fp, r3
		config->sample_adjustment |
    1996:	6973      	ldr	r3, [r6, #20]
    1998:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    199a:	7e33      	ldrb	r3, [r6, #24]
    199c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    199e:	2326      	movs	r3, #38	; 0x26
    19a0:	5cf3      	ldrb	r3, [r6, r3]
    19a2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    19a4:	6873      	ldr	r3, [r6, #4]
    19a6:	4699      	mov	r9, r3
	switch (transfer_mode)
    19a8:	2b00      	cmp	r3, #0
    19aa:	d100      	bne.n	19ae <usart_init+0x12a>
    19ac:	e09b      	b.n	1ae6 <usart_init+0x262>
    19ae:	2380      	movs	r3, #128	; 0x80
    19b0:	055b      	lsls	r3, r3, #21
    19b2:	4599      	cmp	r9, r3
    19b4:	d104      	bne.n	19c0 <usart_init+0x13c>
			if (!config->use_external_clock) {
    19b6:	2327      	movs	r3, #39	; 0x27
    19b8:	5cf3      	ldrb	r3, [r6, r3]
    19ba:	2b00      	cmp	r3, #0
    19bc:	d100      	bne.n	19c0 <usart_init+0x13c>
    19be:	e080      	b.n	1ac2 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    19c0:	7e73      	ldrb	r3, [r6, #25]
    19c2:	2b00      	cmp	r3, #0
    19c4:	d002      	beq.n	19cc <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    19c6:	7eb3      	ldrb	r3, [r6, #26]
    19c8:	4642      	mov	r2, r8
    19ca:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    19cc:	230e      	movs	r3, #14
    19ce:	aa06      	add	r2, sp, #24
    19d0:	4694      	mov	ip, r2
    19d2:	4463      	add	r3, ip
    19d4:	881b      	ldrh	r3, [r3, #0]
    19d6:	4642      	mov	r2, r8
    19d8:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    19da:	9b05      	ldr	r3, [sp, #20]
    19dc:	465a      	mov	r2, fp
    19de:	4313      	orrs	r3, r2
    19e0:	9a03      	ldr	r2, [sp, #12]
    19e2:	4313      	orrs	r3, r2
    19e4:	464a      	mov	r2, r9
    19e6:	4313      	orrs	r3, r2
    19e8:	9f02      	ldr	r7, [sp, #8]
    19ea:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    19ec:	9b04      	ldr	r3, [sp, #16]
    19ee:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    19f0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    19f2:	4653      	mov	r3, sl
    19f4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    19f6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    19f8:	2327      	movs	r3, #39	; 0x27
    19fa:	5cf3      	ldrb	r3, [r6, r3]
    19fc:	2b00      	cmp	r3, #0
    19fe:	d101      	bne.n	1a04 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1a00:	3304      	adds	r3, #4
    1a02:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1a04:	7e73      	ldrb	r3, [r6, #25]
    1a06:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1a08:	7f32      	ldrb	r2, [r6, #28]
    1a0a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1a0c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1a0e:	7f72      	ldrb	r2, [r6, #29]
    1a10:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1a12:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1a14:	2224      	movs	r2, #36	; 0x24
    1a16:	5cb2      	ldrb	r2, [r6, r2]
    1a18:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1a1a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1a1c:	2225      	movs	r2, #37	; 0x25
    1a1e:	5cb2      	ldrb	r2, [r6, r2]
    1a20:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1a22:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1a24:	7ab1      	ldrb	r1, [r6, #10]
    1a26:	7af2      	ldrb	r2, [r6, #11]
    1a28:	4311      	orrs	r1, r2
    1a2a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1a2c:	8933      	ldrh	r3, [r6, #8]
    1a2e:	2bff      	cmp	r3, #255	; 0xff
    1a30:	d07d      	beq.n	1b2e <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1a32:	2280      	movs	r2, #128	; 0x80
    1a34:	0452      	lsls	r2, r2, #17
    1a36:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1a38:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1a3a:	232c      	movs	r3, #44	; 0x2c
    1a3c:	5cf3      	ldrb	r3, [r6, r3]
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d103      	bne.n	1a4a <usart_init+0x1c6>
    1a42:	4b60      	ldr	r3, [pc, #384]	; (1bc4 <usart_init+0x340>)
    1a44:	789b      	ldrb	r3, [r3, #2]
    1a46:	079b      	lsls	r3, r3, #30
    1a48:	d501      	bpl.n	1a4e <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1a4a:	2380      	movs	r3, #128	; 0x80
    1a4c:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1a4e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a50:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a52:	2b00      	cmp	r3, #0
    1a54:	d1fc      	bne.n	1a50 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    1a56:	4643      	mov	r3, r8
    1a58:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a5a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1a5c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d1fc      	bne.n	1a5c <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    1a62:	4643      	mov	r3, r8
    1a64:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a66:	ab0e      	add	r3, sp, #56	; 0x38
    1a68:	2280      	movs	r2, #128	; 0x80
    1a6a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a6c:	2200      	movs	r2, #0
    1a6e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1a70:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1a72:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1a74:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1a76:	930a      	str	r3, [sp, #40]	; 0x28
    1a78:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1a7a:	930b      	str	r3, [sp, #44]	; 0x2c
    1a7c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1a7e:	930c      	str	r3, [sp, #48]	; 0x30
    1a80:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1a82:	9302      	str	r3, [sp, #8]
    1a84:	930d      	str	r3, [sp, #52]	; 0x34
    1a86:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1a88:	ae0a      	add	r6, sp, #40	; 0x28
    1a8a:	e05e      	b.n	1b4a <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1a8c:	2308      	movs	r3, #8
    1a8e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1a90:	3b07      	subs	r3, #7
    1a92:	9307      	str	r3, [sp, #28]
    1a94:	e77b      	b.n	198e <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    1a96:	6833      	ldr	r3, [r6, #0]
    1a98:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1a9a:	68f3      	ldr	r3, [r6, #12]
    1a9c:	469b      	mov	fp, r3
		config->sample_adjustment |
    1a9e:	6973      	ldr	r3, [r6, #20]
    1aa0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1aa2:	7e33      	ldrb	r3, [r6, #24]
    1aa4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1aa6:	2326      	movs	r3, #38	; 0x26
    1aa8:	5cf3      	ldrb	r3, [r6, r3]
    1aaa:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1aac:	6873      	ldr	r3, [r6, #4]
    1aae:	4699      	mov	r9, r3
	switch (transfer_mode)
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d014      	beq.n	1ade <usart_init+0x25a>
    1ab4:	2380      	movs	r3, #128	; 0x80
    1ab6:	055b      	lsls	r3, r3, #21
    1ab8:	4599      	cmp	r9, r3
    1aba:	d100      	bne.n	1abe <usart_init+0x23a>
    1abc:	e77b      	b.n	19b6 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    1abe:	2000      	movs	r0, #0
    1ac0:	e020      	b.n	1b04 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1ac2:	6a33      	ldr	r3, [r6, #32]
    1ac4:	001f      	movs	r7, r3
    1ac6:	b2c0      	uxtb	r0, r0
    1ac8:	4b3f      	ldr	r3, [pc, #252]	; (1bc8 <usart_init+0x344>)
    1aca:	4798      	blx	r3
    1acc:	0001      	movs	r1, r0
    1ace:	220e      	movs	r2, #14
    1ad0:	ab06      	add	r3, sp, #24
    1ad2:	469c      	mov	ip, r3
    1ad4:	4462      	add	r2, ip
    1ad6:	0038      	movs	r0, r7
    1ad8:	4b3c      	ldr	r3, [pc, #240]	; (1bcc <usart_init+0x348>)
    1ada:	4798      	blx	r3
    1adc:	e012      	b.n	1b04 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1ade:	2308      	movs	r3, #8
    1ae0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1ae2:	2300      	movs	r3, #0
    1ae4:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1ae6:	2327      	movs	r3, #39	; 0x27
    1ae8:	5cf3      	ldrb	r3, [r6, r3]
    1aea:	2b00      	cmp	r3, #0
    1aec:	d00e      	beq.n	1b0c <usart_init+0x288>
				status_code =
    1aee:	9b06      	ldr	r3, [sp, #24]
    1af0:	9300      	str	r3, [sp, #0]
    1af2:	9b07      	ldr	r3, [sp, #28]
    1af4:	220e      	movs	r2, #14
    1af6:	a906      	add	r1, sp, #24
    1af8:	468c      	mov	ip, r1
    1afa:	4462      	add	r2, ip
    1afc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1afe:	6a30      	ldr	r0, [r6, #32]
    1b00:	4f33      	ldr	r7, [pc, #204]	; (1bd0 <usart_init+0x34c>)
    1b02:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1b04:	2800      	cmp	r0, #0
    1b06:	d000      	beq.n	1b0a <usart_init+0x286>
    1b08:	e6d4      	b.n	18b4 <usart_init+0x30>
    1b0a:	e759      	b.n	19c0 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    1b0c:	6a33      	ldr	r3, [r6, #32]
    1b0e:	001f      	movs	r7, r3
    1b10:	b2c0      	uxtb	r0, r0
    1b12:	4b2d      	ldr	r3, [pc, #180]	; (1bc8 <usart_init+0x344>)
    1b14:	4798      	blx	r3
    1b16:	0001      	movs	r1, r0
				status_code =
    1b18:	9b06      	ldr	r3, [sp, #24]
    1b1a:	9300      	str	r3, [sp, #0]
    1b1c:	9b07      	ldr	r3, [sp, #28]
    1b1e:	220e      	movs	r2, #14
    1b20:	a806      	add	r0, sp, #24
    1b22:	4684      	mov	ip, r0
    1b24:	4462      	add	r2, ip
    1b26:	0038      	movs	r0, r7
    1b28:	4f29      	ldr	r7, [pc, #164]	; (1bd0 <usart_init+0x34c>)
    1b2a:	47b8      	blx	r7
    1b2c:	e7ea      	b.n	1b04 <usart_init+0x280>
		if(config->lin_slave_enable) {
    1b2e:	7ef3      	ldrb	r3, [r6, #27]
    1b30:	2b00      	cmp	r3, #0
    1b32:	d082      	beq.n	1a3a <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1b34:	2380      	movs	r3, #128	; 0x80
    1b36:	04db      	lsls	r3, r3, #19
    1b38:	431f      	orrs	r7, r3
    1b3a:	e77e      	b.n	1a3a <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1b3c:	0020      	movs	r0, r4
    1b3e:	4b25      	ldr	r3, [pc, #148]	; (1bd4 <usart_init+0x350>)
    1b40:	4798      	blx	r3
    1b42:	e007      	b.n	1b54 <usart_init+0x2d0>
    1b44:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1b46:	2f04      	cmp	r7, #4
    1b48:	d00d      	beq.n	1b66 <usart_init+0x2e2>
    1b4a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1b4c:	00bb      	lsls	r3, r7, #2
    1b4e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1b50:	2800      	cmp	r0, #0
    1b52:	d0f3      	beq.n	1b3c <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    1b54:	1c43      	adds	r3, r0, #1
    1b56:	d0f5      	beq.n	1b44 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1b58:	a90e      	add	r1, sp, #56	; 0x38
    1b5a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1b5c:	0c00      	lsrs	r0, r0, #16
    1b5e:	b2c0      	uxtb	r0, r0
    1b60:	4b1d      	ldr	r3, [pc, #116]	; (1bd8 <usart_init+0x354>)
    1b62:	4798      	blx	r3
    1b64:	e7ee      	b.n	1b44 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    1b66:	2300      	movs	r3, #0
    1b68:	60eb      	str	r3, [r5, #12]
    1b6a:	612b      	str	r3, [r5, #16]
    1b6c:	616b      	str	r3, [r5, #20]
    1b6e:	61ab      	str	r3, [r5, #24]
    1b70:	61eb      	str	r3, [r5, #28]
    1b72:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1b74:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1b76:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1b78:	2200      	movs	r2, #0
    1b7a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1b7c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1b7e:	3330      	adds	r3, #48	; 0x30
    1b80:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1b82:	3301      	adds	r3, #1
    1b84:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1b86:	3301      	adds	r3, #1
    1b88:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1b8a:	3301      	adds	r3, #1
    1b8c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1b8e:	6828      	ldr	r0, [r5, #0]
    1b90:	4b07      	ldr	r3, [pc, #28]	; (1bb0 <usart_init+0x32c>)
    1b92:	4798      	blx	r3
    1b94:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1b96:	4911      	ldr	r1, [pc, #68]	; (1bdc <usart_init+0x358>)
    1b98:	4b11      	ldr	r3, [pc, #68]	; (1be0 <usart_init+0x35c>)
    1b9a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1b9c:	00a4      	lsls	r4, r4, #2
    1b9e:	4b11      	ldr	r3, [pc, #68]	; (1be4 <usart_init+0x360>)
    1ba0:	50e5      	str	r5, [r4, r3]
	return status_code;
    1ba2:	2000      	movs	r0, #0
    1ba4:	e686      	b.n	18b4 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1ba6:	2310      	movs	r3, #16
    1ba8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1baa:	2300      	movs	r3, #0
    1bac:	9307      	str	r3, [sp, #28]
    1bae:	e6ee      	b.n	198e <usart_init+0x10a>
    1bb0:	000013ad 	.word	0x000013ad
    1bb4:	40000400 	.word	0x40000400
    1bb8:	0000257d 	.word	0x0000257d
    1bbc:	0000250d 	.word	0x0000250d
    1bc0:	00001205 	.word	0x00001205
    1bc4:	41002000 	.word	0x41002000
    1bc8:	000025a1 	.word	0x000025a1
    1bcc:	00001147 	.word	0x00001147
    1bd0:	00001171 	.word	0x00001171
    1bd4:	00001251 	.word	0x00001251
    1bd8:	00002679 	.word	0x00002679
    1bdc:	00001c79 	.word	0x00001c79
    1be0:	000013e9 	.word	0x000013e9
    1be4:	200001f8 	.word	0x200001f8

00001be8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1be8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1bea:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1bec:	2a00      	cmp	r2, #0
    1bee:	d101      	bne.n	1bf4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1bf0:	0018      	movs	r0, r3
    1bf2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1bf4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1bf6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1bf8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1bfa:	2a00      	cmp	r2, #0
    1bfc:	d1f8      	bne.n	1bf0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bfe:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1c00:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1c02:	2102      	movs	r1, #2
    1c04:	7e13      	ldrb	r3, [r2, #24]
    1c06:	420b      	tst	r3, r1
    1c08:	d0fc      	beq.n	1c04 <usart_write_wait+0x1c>
	return STATUS_OK;
    1c0a:	2300      	movs	r3, #0
    1c0c:	e7f0      	b.n	1bf0 <usart_write_wait+0x8>

00001c0e <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1c0e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1c10:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1c12:	2a00      	cmp	r2, #0
    1c14:	d101      	bne.n	1c1a <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1c16:	0018      	movs	r0, r3
    1c18:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1c1a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1c1c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1c1e:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1c20:	2a00      	cmp	r2, #0
    1c22:	d1f8      	bne.n	1c16 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c24:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1c26:	7e10      	ldrb	r0, [r2, #24]
    1c28:	0740      	lsls	r0, r0, #29
    1c2a:	d5f4      	bpl.n	1c16 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1c2c:	8b53      	ldrh	r3, [r2, #26]
    1c2e:	b2db      	uxtb	r3, r3
	if (error_code) {
    1c30:	0698      	lsls	r0, r3, #26
    1c32:	d01d      	beq.n	1c70 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1c34:	0798      	lsls	r0, r3, #30
    1c36:	d503      	bpl.n	1c40 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1c38:	2302      	movs	r3, #2
    1c3a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1c3c:	3318      	adds	r3, #24
    1c3e:	e7ea      	b.n	1c16 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1c40:	0758      	lsls	r0, r3, #29
    1c42:	d503      	bpl.n	1c4c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1c44:	2304      	movs	r3, #4
    1c46:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1c48:	331a      	adds	r3, #26
    1c4a:	e7e4      	b.n	1c16 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1c4c:	07d8      	lsls	r0, r3, #31
    1c4e:	d503      	bpl.n	1c58 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1c50:	2301      	movs	r3, #1
    1c52:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1c54:	3312      	adds	r3, #18
    1c56:	e7de      	b.n	1c16 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1c58:	06d8      	lsls	r0, r3, #27
    1c5a:	d503      	bpl.n	1c64 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1c5c:	2310      	movs	r3, #16
    1c5e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1c60:	3332      	adds	r3, #50	; 0x32
    1c62:	e7d8      	b.n	1c16 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1c64:	069b      	lsls	r3, r3, #26
    1c66:	d503      	bpl.n	1c70 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1c68:	2320      	movs	r3, #32
    1c6a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1c6c:	3321      	adds	r3, #33	; 0x21
    1c6e:	e7d2      	b.n	1c16 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1c70:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1c72:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1c74:	2300      	movs	r3, #0
    1c76:	e7ce      	b.n	1c16 <usart_read_wait+0x8>

00001c78 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1c7a:	0080      	lsls	r0, r0, #2
    1c7c:	4b62      	ldr	r3, [pc, #392]	; (1e08 <_usart_interrupt_handler+0x190>)
    1c7e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1c80:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1c82:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1c84:	2b00      	cmp	r3, #0
    1c86:	d1fc      	bne.n	1c82 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1c88:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1c8a:	7da6      	ldrb	r6, [r4, #22]
    1c8c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1c8e:	2330      	movs	r3, #48	; 0x30
    1c90:	5ceb      	ldrb	r3, [r5, r3]
    1c92:	2231      	movs	r2, #49	; 0x31
    1c94:	5caf      	ldrb	r7, [r5, r2]
    1c96:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1c98:	07f3      	lsls	r3, r6, #31
    1c9a:	d522      	bpl.n	1ce2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1c9c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1c9e:	b29b      	uxth	r3, r3
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d01c      	beq.n	1cde <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1ca4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1ca6:	7813      	ldrb	r3, [r2, #0]
    1ca8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1caa:	1c51      	adds	r1, r2, #1
    1cac:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1cae:	7969      	ldrb	r1, [r5, #5]
    1cb0:	2901      	cmp	r1, #1
    1cb2:	d00e      	beq.n	1cd2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1cb4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1cb6:	05db      	lsls	r3, r3, #23
    1cb8:	0ddb      	lsrs	r3, r3, #23
    1cba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1cbc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1cbe:	3b01      	subs	r3, #1
    1cc0:	b29b      	uxth	r3, r3
    1cc2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d10c      	bne.n	1ce2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1cc8:	3301      	adds	r3, #1
    1cca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1ccc:	3301      	adds	r3, #1
    1cce:	75a3      	strb	r3, [r4, #22]
    1cd0:	e007      	b.n	1ce2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1cd2:	7851      	ldrb	r1, [r2, #1]
    1cd4:	0209      	lsls	r1, r1, #8
    1cd6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1cd8:	3202      	adds	r2, #2
    1cda:	62aa      	str	r2, [r5, #40]	; 0x28
    1cdc:	e7eb      	b.n	1cb6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1cde:	2301      	movs	r3, #1
    1ce0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1ce2:	07b3      	lsls	r3, r6, #30
    1ce4:	d506      	bpl.n	1cf4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1ce6:	2302      	movs	r3, #2
    1ce8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1cea:	2200      	movs	r2, #0
    1cec:	3331      	adds	r3, #49	; 0x31
    1cee:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1cf0:	07fb      	lsls	r3, r7, #31
    1cf2:	d41a      	bmi.n	1d2a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1cf4:	0773      	lsls	r3, r6, #29
    1cf6:	d565      	bpl.n	1dc4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1cf8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1cfa:	b29b      	uxth	r3, r3
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d05f      	beq.n	1dc0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1d00:	8b63      	ldrh	r3, [r4, #26]
    1d02:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1d04:	071a      	lsls	r2, r3, #28
    1d06:	d414      	bmi.n	1d32 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1d08:	223f      	movs	r2, #63	; 0x3f
    1d0a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	d034      	beq.n	1d7a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1d10:	079a      	lsls	r2, r3, #30
    1d12:	d511      	bpl.n	1d38 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1d14:	221a      	movs	r2, #26
    1d16:	2332      	movs	r3, #50	; 0x32
    1d18:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1d1a:	3b30      	subs	r3, #48	; 0x30
    1d1c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1d1e:	077b      	lsls	r3, r7, #29
    1d20:	d550      	bpl.n	1dc4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1d22:	0028      	movs	r0, r5
    1d24:	696b      	ldr	r3, [r5, #20]
    1d26:	4798      	blx	r3
    1d28:	e04c      	b.n	1dc4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1d2a:	0028      	movs	r0, r5
    1d2c:	68eb      	ldr	r3, [r5, #12]
    1d2e:	4798      	blx	r3
    1d30:	e7e0      	b.n	1cf4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1d32:	2237      	movs	r2, #55	; 0x37
    1d34:	4013      	ands	r3, r2
    1d36:	e7e9      	b.n	1d0c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1d38:	075a      	lsls	r2, r3, #29
    1d3a:	d505      	bpl.n	1d48 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1d3c:	221e      	movs	r2, #30
    1d3e:	2332      	movs	r3, #50	; 0x32
    1d40:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1d42:	3b2e      	subs	r3, #46	; 0x2e
    1d44:	8363      	strh	r3, [r4, #26]
    1d46:	e7ea      	b.n	1d1e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1d48:	07da      	lsls	r2, r3, #31
    1d4a:	d505      	bpl.n	1d58 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1d4c:	2213      	movs	r2, #19
    1d4e:	2332      	movs	r3, #50	; 0x32
    1d50:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1d52:	3b31      	subs	r3, #49	; 0x31
    1d54:	8363      	strh	r3, [r4, #26]
    1d56:	e7e2      	b.n	1d1e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1d58:	06da      	lsls	r2, r3, #27
    1d5a:	d505      	bpl.n	1d68 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1d5c:	2242      	movs	r2, #66	; 0x42
    1d5e:	2332      	movs	r3, #50	; 0x32
    1d60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1d62:	3b22      	subs	r3, #34	; 0x22
    1d64:	8363      	strh	r3, [r4, #26]
    1d66:	e7da      	b.n	1d1e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1d68:	2220      	movs	r2, #32
    1d6a:	421a      	tst	r2, r3
    1d6c:	d0d7      	beq.n	1d1e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1d6e:	3221      	adds	r2, #33	; 0x21
    1d70:	2332      	movs	r3, #50	; 0x32
    1d72:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1d74:	3b12      	subs	r3, #18
    1d76:	8363      	strh	r3, [r4, #26]
    1d78:	e7d1      	b.n	1d1e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1d7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1d7c:	05db      	lsls	r3, r3, #23
    1d7e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1d80:	b2da      	uxtb	r2, r3
    1d82:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1d84:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1d86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1d88:	1c51      	adds	r1, r2, #1
    1d8a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1d8c:	7969      	ldrb	r1, [r5, #5]
    1d8e:	2901      	cmp	r1, #1
    1d90:	d010      	beq.n	1db4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1d92:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1d94:	3b01      	subs	r3, #1
    1d96:	b29b      	uxth	r3, r3
    1d98:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d112      	bne.n	1dc4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1d9e:	3304      	adds	r3, #4
    1da0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1da2:	2200      	movs	r2, #0
    1da4:	332e      	adds	r3, #46	; 0x2e
    1da6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1da8:	07bb      	lsls	r3, r7, #30
    1daa:	d50b      	bpl.n	1dc4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1dac:	0028      	movs	r0, r5
    1dae:	692b      	ldr	r3, [r5, #16]
    1db0:	4798      	blx	r3
    1db2:	e007      	b.n	1dc4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1db4:	0a1b      	lsrs	r3, r3, #8
    1db6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1db8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1dba:	3301      	adds	r3, #1
    1dbc:	626b      	str	r3, [r5, #36]	; 0x24
    1dbe:	e7e8      	b.n	1d92 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1dc0:	2304      	movs	r3, #4
    1dc2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1dc4:	06f3      	lsls	r3, r6, #27
    1dc6:	d504      	bpl.n	1dd2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1dc8:	2310      	movs	r3, #16
    1dca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1dcc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1dce:	06fb      	lsls	r3, r7, #27
    1dd0:	d40e      	bmi.n	1df0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1dd2:	06b3      	lsls	r3, r6, #26
    1dd4:	d504      	bpl.n	1de0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1dd6:	2320      	movs	r3, #32
    1dd8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1dda:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1ddc:	073b      	lsls	r3, r7, #28
    1dde:	d40b      	bmi.n	1df8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1de0:	0733      	lsls	r3, r6, #28
    1de2:	d504      	bpl.n	1dee <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1de4:	2308      	movs	r3, #8
    1de6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1de8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1dea:	06bb      	lsls	r3, r7, #26
    1dec:	d408      	bmi.n	1e00 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1df0:	0028      	movs	r0, r5
    1df2:	69eb      	ldr	r3, [r5, #28]
    1df4:	4798      	blx	r3
    1df6:	e7ec      	b.n	1dd2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1df8:	0028      	movs	r0, r5
    1dfa:	69ab      	ldr	r3, [r5, #24]
    1dfc:	4798      	blx	r3
    1dfe:	e7ef      	b.n	1de0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1e00:	6a2b      	ldr	r3, [r5, #32]
    1e02:	0028      	movs	r0, r5
    1e04:	4798      	blx	r3
}
    1e06:	e7f2      	b.n	1dee <_usart_interrupt_handler+0x176>
    1e08:	200001f8 	.word	0x200001f8

00001e0c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1e0c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1e0e:	2808      	cmp	r0, #8
    1e10:	d803      	bhi.n	1e1a <system_clock_source_get_hz+0xe>
    1e12:	0080      	lsls	r0, r0, #2
    1e14:	4b1c      	ldr	r3, [pc, #112]	; (1e88 <system_clock_source_get_hz+0x7c>)
    1e16:	581b      	ldr	r3, [r3, r0]
    1e18:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1e1a:	2000      	movs	r0, #0
    1e1c:	e032      	b.n	1e84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1e1e:	4b1b      	ldr	r3, [pc, #108]	; (1e8c <system_clock_source_get_hz+0x80>)
    1e20:	6918      	ldr	r0, [r3, #16]
    1e22:	e02f      	b.n	1e84 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1e24:	4b1a      	ldr	r3, [pc, #104]	; (1e90 <system_clock_source_get_hz+0x84>)
    1e26:	7d18      	ldrb	r0, [r3, #20]
    1e28:	0700      	lsls	r0, r0, #28
    1e2a:	0f80      	lsrs	r0, r0, #30
    1e2c:	1c43      	adds	r3, r0, #1
    1e2e:	4819      	ldr	r0, [pc, #100]	; (1e94 <system_clock_source_get_hz+0x88>)
    1e30:	4358      	muls	r0, r3
    1e32:	e027      	b.n	1e84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1e34:	4b15      	ldr	r3, [pc, #84]	; (1e8c <system_clock_source_get_hz+0x80>)
    1e36:	6958      	ldr	r0, [r3, #20]
    1e38:	e024      	b.n	1e84 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1e3a:	4b14      	ldr	r3, [pc, #80]	; (1e8c <system_clock_source_get_hz+0x80>)
    1e3c:	681b      	ldr	r3, [r3, #0]
			return 0;
    1e3e:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1e40:	079b      	lsls	r3, r3, #30
    1e42:	d51f      	bpl.n	1e84 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1e44:	4912      	ldr	r1, [pc, #72]	; (1e90 <system_clock_source_get_hz+0x84>)
    1e46:	2280      	movs	r2, #128	; 0x80
    1e48:	0052      	lsls	r2, r2, #1
    1e4a:	68cb      	ldr	r3, [r1, #12]
    1e4c:	4213      	tst	r3, r2
    1e4e:	d0fc      	beq.n	1e4a <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    1e50:	4b0e      	ldr	r3, [pc, #56]	; (1e8c <system_clock_source_get_hz+0x80>)
    1e52:	681b      	ldr	r3, [r3, #0]
    1e54:	075b      	lsls	r3, r3, #29
    1e56:	d401      	bmi.n	1e5c <system_clock_source_get_hz+0x50>
		return 48000000UL;
    1e58:	480f      	ldr	r0, [pc, #60]	; (1e98 <system_clock_source_get_hz+0x8c>)
    1e5a:	e013      	b.n	1e84 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1e5c:	2000      	movs	r0, #0
    1e5e:	4b0f      	ldr	r3, [pc, #60]	; (1e9c <system_clock_source_get_hz+0x90>)
    1e60:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1e62:	4b0a      	ldr	r3, [pc, #40]	; (1e8c <system_clock_source_get_hz+0x80>)
    1e64:	689b      	ldr	r3, [r3, #8]
    1e66:	041b      	lsls	r3, r3, #16
    1e68:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1e6a:	4358      	muls	r0, r3
    1e6c:	e00a      	b.n	1e84 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1e6e:	2328      	movs	r3, #40	; 0x28
    1e70:	4a07      	ldr	r2, [pc, #28]	; (1e90 <system_clock_source_get_hz+0x84>)
    1e72:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1e74:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1e76:	079b      	lsls	r3, r3, #30
    1e78:	d504      	bpl.n	1e84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1e7a:	4b04      	ldr	r3, [pc, #16]	; (1e8c <system_clock_source_get_hz+0x80>)
    1e7c:	68d8      	ldr	r0, [r3, #12]
    1e7e:	e001      	b.n	1e84 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1e80:	2080      	movs	r0, #128	; 0x80
    1e82:	0200      	lsls	r0, r0, #8
	}
}
    1e84:	bd10      	pop	{r4, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	00004a20 	.word	0x00004a20
    1e8c:	200000dc 	.word	0x200000dc
    1e90:	40000c00 	.word	0x40000c00
    1e94:	003d0900 	.word	0x003d0900
    1e98:	02dc6c00 	.word	0x02dc6c00
    1e9c:	000025a1 	.word	0x000025a1

00001ea0 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    1ea0:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    1ea2:	4c0b      	ldr	r4, [pc, #44]	; (1ed0 <system_clock_source_osc16m_set_config+0x30>)
    1ea4:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    1ea6:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ea8:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    1eaa:	7802      	ldrb	r2, [r0, #0]
    1eac:	2103      	movs	r1, #3
    1eae:	4011      	ands	r1, r2
    1eb0:	0089      	lsls	r1, r1, #2
    1eb2:	220c      	movs	r2, #12
    1eb4:	4393      	bics	r3, r2
    1eb6:	430b      	orrs	r3, r1
    1eb8:	3a0b      	subs	r2, #11
    1eba:	4032      	ands	r2, r6
    1ebc:	0192      	lsls	r2, r2, #6
    1ebe:	2140      	movs	r1, #64	; 0x40
    1ec0:	438b      	bics	r3, r1
    1ec2:	4313      	orrs	r3, r2
    1ec4:	01ed      	lsls	r5, r5, #7
    1ec6:	227f      	movs	r2, #127	; 0x7f
    1ec8:	4013      	ands	r3, r2
    1eca:	432b      	orrs	r3, r5
    1ecc:	7523      	strb	r3, [r4, #20]
}
    1ece:	bd70      	pop	{r4, r5, r6, pc}
    1ed0:	40000c00 	.word	0x40000c00

00001ed4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ed6:	46d6      	mov	lr, sl
    1ed8:	464f      	mov	r7, r9
    1eda:	4646      	mov	r6, r8
    1edc:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1ede:	4b20      	ldr	r3, [pc, #128]	; (1f60 <system_clock_source_xosc32k_set_config+0x8c>)
    1ee0:	469a      	mov	sl, r3
    1ee2:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1ee4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1ee6:	7801      	ldrb	r1, [r0, #0]
    1ee8:	424c      	negs	r4, r1
    1eea:	414c      	adcs	r4, r1
    1eec:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    1eee:	7881      	ldrb	r1, [r0, #2]
    1ef0:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1ef2:	78c1      	ldrb	r1, [r0, #3]
    1ef4:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    1ef6:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ef8:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    1efa:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1efc:	6840      	ldr	r0, [r0, #4]
    1efe:	4919      	ldr	r1, [pc, #100]	; (1f64 <system_clock_source_xosc32k_set_config+0x90>)
    1f00:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    1f02:	2101      	movs	r1, #1
    1f04:	4648      	mov	r0, r9
    1f06:	0080      	lsls	r0, r0, #2
    1f08:	2204      	movs	r2, #4
    1f0a:	4393      	bics	r3, r2
    1f0c:	4303      	orrs	r3, r0
    1f0e:	4640      	mov	r0, r8
    1f10:	4008      	ands	r0, r1
    1f12:	00c0      	lsls	r0, r0, #3
    1f14:	3204      	adds	r2, #4
    1f16:	4393      	bics	r3, r2
    1f18:	4303      	orrs	r3, r0
    1f1a:	4660      	mov	r0, ip
    1f1c:	4008      	ands	r0, r1
    1f1e:	0100      	lsls	r0, r0, #4
    1f20:	3208      	adds	r2, #8
    1f22:	4393      	bics	r3, r2
    1f24:	4303      	orrs	r3, r0
    1f26:	400f      	ands	r7, r1
    1f28:	01bf      	lsls	r7, r7, #6
    1f2a:	2040      	movs	r0, #64	; 0x40
    1f2c:	4383      	bics	r3, r0
    1f2e:	433b      	orrs	r3, r7
    1f30:	400e      	ands	r6, r1
    1f32:	01f6      	lsls	r6, r6, #7
    1f34:	3040      	adds	r0, #64	; 0x40
    1f36:	4383      	bics	r3, r0
    1f38:	4333      	orrs	r3, r6
    1f3a:	3879      	subs	r0, #121	; 0x79
    1f3c:	4005      	ands	r5, r0
    1f3e:	022d      	lsls	r5, r5, #8
    1f40:	4809      	ldr	r0, [pc, #36]	; (1f68 <system_clock_source_xosc32k_set_config+0x94>)
    1f42:	4003      	ands	r3, r0
    1f44:	432b      	orrs	r3, r5
    1f46:	4021      	ands	r1, r4
    1f48:	0309      	lsls	r1, r1, #12
    1f4a:	4808      	ldr	r0, [pc, #32]	; (1f6c <system_clock_source_xosc32k_set_config+0x98>)
    1f4c:	4003      	ands	r3, r0
    1f4e:	430b      	orrs	r3, r1
    1f50:	4652      	mov	r2, sl
    1f52:	6153      	str	r3, [r2, #20]
}
    1f54:	bc1c      	pop	{r2, r3, r4}
    1f56:	4690      	mov	r8, r2
    1f58:	4699      	mov	r9, r3
    1f5a:	46a2      	mov	sl, r4
    1f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	40001000 	.word	0x40001000
    1f64:	200000dc 	.word	0x200000dc
    1f68:	fffff8ff 	.word	0xfffff8ff
    1f6c:	ffffefff 	.word	0xffffefff

00001f70 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1f70:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1f72:	7a83      	ldrb	r3, [r0, #10]
    1f74:	069b      	lsls	r3, r3, #26
    1f76:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    1f78:	8982      	ldrh	r2, [r0, #12]
    1f7a:	0592      	lsls	r2, r2, #22
    1f7c:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1f7e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1f80:	491a      	ldr	r1, [pc, #104]	; (1fec <system_clock_source_dfll_set_config+0x7c>)
    1f82:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1f84:	7a03      	ldrb	r3, [r0, #8]
    1f86:	7a42      	ldrb	r2, [r0, #9]
    1f88:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1f8a:	8882      	ldrh	r2, [r0, #4]
    1f8c:	88c4      	ldrh	r4, [r0, #6]
    1f8e:	4322      	orrs	r2, r4
    1f90:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1f92:	7842      	ldrb	r2, [r0, #1]
    1f94:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1f96:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    1f98:	7882      	ldrb	r2, [r0, #2]
    1f9a:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1f9c:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1f9e:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1fa0:	7803      	ldrb	r3, [r0, #0]
    1fa2:	2b04      	cmp	r3, #4
    1fa4:	d011      	beq.n	1fca <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1fa6:	2b20      	cmp	r3, #32
    1fa8:	d10e      	bne.n	1fc8 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1faa:	7b83      	ldrb	r3, [r0, #14]
    1fac:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    1fae:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1fb0:	4313      	orrs	r3, r2
    1fb2:	8a02      	ldrh	r2, [r0, #16]
    1fb4:	0412      	lsls	r2, r2, #16
    1fb6:	490e      	ldr	r1, [pc, #56]	; (1ff0 <system_clock_source_dfll_set_config+0x80>)
    1fb8:	400a      	ands	r2, r1
    1fba:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1fbc:	4a0b      	ldr	r2, [pc, #44]	; (1fec <system_clock_source_dfll_set_config+0x7c>)
    1fbe:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1fc0:	6811      	ldr	r1, [r2, #0]
    1fc2:	4b0c      	ldr	r3, [pc, #48]	; (1ff4 <system_clock_source_dfll_set_config+0x84>)
    1fc4:	430b      	orrs	r3, r1
    1fc6:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    1fc8:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1fca:	7b83      	ldrb	r3, [r0, #14]
    1fcc:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    1fce:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1fd0:	4313      	orrs	r3, r2
    1fd2:	8a02      	ldrh	r2, [r0, #16]
    1fd4:	0412      	lsls	r2, r2, #16
    1fd6:	4906      	ldr	r1, [pc, #24]	; (1ff0 <system_clock_source_dfll_set_config+0x80>)
    1fd8:	400a      	ands	r2, r1
    1fda:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1fdc:	4a03      	ldr	r2, [pc, #12]	; (1fec <system_clock_source_dfll_set_config+0x7c>)
    1fde:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1fe0:	6813      	ldr	r3, [r2, #0]
    1fe2:	2104      	movs	r1, #4
    1fe4:	430b      	orrs	r3, r1
    1fe6:	6013      	str	r3, [r2, #0]
    1fe8:	e7ee      	b.n	1fc8 <system_clock_source_dfll_set_config+0x58>
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	200000dc 	.word	0x200000dc
    1ff0:	03ff0000 	.word	0x03ff0000
    1ff4:	00000424 	.word	0x00000424

00001ff8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1ff8:	2808      	cmp	r0, #8
    1ffa:	d803      	bhi.n	2004 <STACK_SIZE+0x4>
    1ffc:	0080      	lsls	r0, r0, #2
    1ffe:	4b29      	ldr	r3, [pc, #164]	; (20a4 <STACK_SIZE+0xa4>)
    2000:	581b      	ldr	r3, [r3, r0]
    2002:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2004:	2017      	movs	r0, #23
    2006:	e04b      	b.n	20a0 <STACK_SIZE+0xa0>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    2008:	4a27      	ldr	r2, [pc, #156]	; (20a8 <STACK_SIZE+0xa8>)
    200a:	7d13      	ldrb	r3, [r2, #20]
    200c:	2102      	movs	r1, #2
    200e:	430b      	orrs	r3, r1
    2010:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2012:	2000      	movs	r0, #0
    2014:	e044      	b.n	20a0 <STACK_SIZE+0xa0>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    2016:	4a25      	ldr	r2, [pc, #148]	; (20ac <STACK_SIZE+0xac>)
    2018:	6993      	ldr	r3, [r2, #24]
    201a:	2102      	movs	r1, #2
    201c:	430b      	orrs	r3, r1
    201e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2020:	2000      	movs	r0, #0
		break;
    2022:	e03d      	b.n	20a0 <STACK_SIZE+0xa0>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2024:	4a20      	ldr	r2, [pc, #128]	; (20a8 <STACK_SIZE+0xa8>)
    2026:	8a13      	ldrh	r3, [r2, #16]
    2028:	2102      	movs	r1, #2
    202a:	430b      	orrs	r3, r1
    202c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    202e:	2000      	movs	r0, #0
		break;
    2030:	e036      	b.n	20a0 <STACK_SIZE+0xa0>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    2032:	4a1e      	ldr	r2, [pc, #120]	; (20ac <STACK_SIZE+0xac>)
    2034:	6953      	ldr	r3, [r2, #20]
    2036:	2102      	movs	r1, #2
    2038:	430b      	orrs	r3, r1
    203a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    203c:	2000      	movs	r0, #0
		break;
    203e:	e02f      	b.n	20a0 <STACK_SIZE+0xa0>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    2040:	491b      	ldr	r1, [pc, #108]	; (20b0 <STACK_SIZE+0xb0>)
    2042:	680b      	ldr	r3, [r1, #0]
    2044:	2202      	movs	r2, #2
    2046:	4313      	orrs	r3, r2
    2048:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    204a:	4b17      	ldr	r3, [pc, #92]	; (20a8 <STACK_SIZE+0xa8>)
    204c:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    204e:	0019      	movs	r1, r3
    2050:	32fe      	adds	r2, #254	; 0xfe
    2052:	68cb      	ldr	r3, [r1, #12]
    2054:	4213      	tst	r3, r2
    2056:	d0fc      	beq.n	2052 <STACK_SIZE+0x52>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2058:	4a15      	ldr	r2, [pc, #84]	; (20b0 <STACK_SIZE+0xb0>)
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	4b12      	ldr	r3, [pc, #72]	; (20a8 <STACK_SIZE+0xa8>)
    205e:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2060:	6852      	ldr	r2, [r2, #4]
    2062:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    2064:	2200      	movs	r2, #0
    2066:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2068:	0019      	movs	r1, r3
    206a:	3201      	adds	r2, #1
    206c:	32ff      	adds	r2, #255	; 0xff
    206e:	68cb      	ldr	r3, [r1, #12]
    2070:	4213      	tst	r3, r2
    2072:	d0fc      	beq.n	206e <STACK_SIZE+0x6e>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2074:	4b0e      	ldr	r3, [pc, #56]	; (20b0 <STACK_SIZE+0xb0>)
    2076:	681b      	ldr	r3, [r3, #0]
    2078:	b29b      	uxth	r3, r3
    207a:	4a0b      	ldr	r2, [pc, #44]	; (20a8 <STACK_SIZE+0xa8>)
    207c:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    207e:	2000      	movs	r0, #0
    2080:	e00e      	b.n	20a0 <STACK_SIZE+0xa0>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2082:	4909      	ldr	r1, [pc, #36]	; (20a8 <STACK_SIZE+0xa8>)
    2084:	2228      	movs	r2, #40	; 0x28
    2086:	5c8b      	ldrb	r3, [r1, r2]
    2088:	2002      	movs	r0, #2
    208a:	4303      	orrs	r3, r0
    208c:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    208e:	0008      	movs	r0, r1
    2090:	2138      	movs	r1, #56	; 0x38
    2092:	3a26      	subs	r2, #38	; 0x26
    2094:	5c43      	ldrb	r3, [r0, r1]
    2096:	4213      	tst	r3, r2
    2098:	d1fc      	bne.n	2094 <STACK_SIZE+0x94>
	return STATUS_OK;
    209a:	2000      	movs	r0, #0
    209c:	e000      	b.n	20a0 <STACK_SIZE+0xa0>
		return STATUS_OK;
    209e:	2000      	movs	r0, #0
}
    20a0:	4770      	bx	lr
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	00004a44 	.word	0x00004a44
    20a8:	40000c00 	.word	0x40000c00
    20ac:	40001000 	.word	0x40001000
    20b0:	200000dc 	.word	0x200000dc

000020b4 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    20b4:	2808      	cmp	r0, #8
    20b6:	d832      	bhi.n	211e <system_clock_source_disable+0x6a>
    20b8:	0080      	lsls	r0, r0, #2
    20ba:	4b1a      	ldr	r3, [pc, #104]	; (2124 <system_clock_source_disable+0x70>)
    20bc:	581b      	ldr	r3, [r3, r0]
    20be:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    20c0:	4a19      	ldr	r2, [pc, #100]	; (2128 <system_clock_source_disable+0x74>)
    20c2:	7d13      	ldrb	r3, [r2, #20]
    20c4:	2102      	movs	r1, #2
    20c6:	438b      	bics	r3, r1
    20c8:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    20ca:	2000      	movs	r0, #0
}
    20cc:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    20ce:	4a17      	ldr	r2, [pc, #92]	; (212c <system_clock_source_disable+0x78>)
    20d0:	6993      	ldr	r3, [r2, #24]
    20d2:	2102      	movs	r1, #2
    20d4:	438b      	bics	r3, r1
    20d6:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    20d8:	2000      	movs	r0, #0
		break;
    20da:	e7f7      	b.n	20cc <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    20dc:	4a12      	ldr	r2, [pc, #72]	; (2128 <system_clock_source_disable+0x74>)
    20de:	8a13      	ldrh	r3, [r2, #16]
    20e0:	2102      	movs	r1, #2
    20e2:	438b      	bics	r3, r1
    20e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    20e6:	2000      	movs	r0, #0
		break;
    20e8:	e7f0      	b.n	20cc <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    20ea:	4a10      	ldr	r2, [pc, #64]	; (212c <system_clock_source_disable+0x78>)
    20ec:	6953      	ldr	r3, [r2, #20]
    20ee:	2102      	movs	r1, #2
    20f0:	438b      	bics	r3, r1
    20f2:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    20f4:	2000      	movs	r0, #0
		break;
    20f6:	e7e9      	b.n	20cc <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    20f8:	4b0d      	ldr	r3, [pc, #52]	; (2130 <system_clock_source_disable+0x7c>)
    20fa:	681a      	ldr	r2, [r3, #0]
    20fc:	2102      	movs	r1, #2
    20fe:	438a      	bics	r2, r1
    2100:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	b29b      	uxth	r3, r3
    2106:	4a08      	ldr	r2, [pc, #32]	; (2128 <system_clock_source_disable+0x74>)
    2108:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    210a:	2000      	movs	r0, #0
		break;
    210c:	e7de      	b.n	20cc <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    210e:	4906      	ldr	r1, [pc, #24]	; (2128 <system_clock_source_disable+0x74>)
    2110:	2228      	movs	r2, #40	; 0x28
    2112:	5c8b      	ldrb	r3, [r1, r2]
    2114:	2002      	movs	r0, #2
    2116:	4383      	bics	r3, r0
    2118:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    211a:	2000      	movs	r0, #0
		break;
    211c:	e7d6      	b.n	20cc <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    211e:	2017      	movs	r0, #23
    2120:	e7d4      	b.n	20cc <system_clock_source_disable+0x18>
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	00004a68 	.word	0x00004a68
    2128:	40000c00 	.word	0x40000c00
    212c:	40001000 	.word	0x40001000
    2130:	200000dc 	.word	0x200000dc

00002134 <system_clock_source_is_ready>:
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
	uint32_t mask = 0;

	switch (clock_source) {
    2134:	2808      	cmp	r0, #8
    2136:	d803      	bhi.n	2140 <system_clock_source_is_ready+0xc>
    2138:	0080      	lsls	r0, r0, #2
    213a:	4b18      	ldr	r3, [pc, #96]	; (219c <system_clock_source_is_ready+0x68>)
    213c:	581b      	ldr	r3, [r3, r0]
    213e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    2140:	2000      	movs	r0, #0
    2142:	e02a      	b.n	219a <system_clock_source_is_ready+0x66>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2144:	4b16      	ldr	r3, [pc, #88]	; (21a0 <system_clock_source_is_ready+0x6c>)
    2146:	68d8      	ldr	r0, [r3, #12]
    2148:	06c0      	lsls	r0, r0, #27
    214a:	0fc0      	lsrs	r0, r0, #31
    214c:	e025      	b.n	219a <system_clock_source_is_ready+0x66>
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    214e:	4b15      	ldr	r3, [pc, #84]	; (21a4 <system_clock_source_is_ready+0x70>)
    2150:	68d8      	ldr	r0, [r3, #12]
    2152:	0780      	lsls	r0, r0, #30
    2154:	0fc0      	lsrs	r0, r0, #31
    2156:	e020      	b.n	219a <system_clock_source_is_ready+0x66>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2158:	4b11      	ldr	r3, [pc, #68]	; (21a0 <system_clock_source_is_ready+0x6c>)
    215a:	68db      	ldr	r3, [r3, #12]
    215c:	2001      	movs	r0, #1
    215e:	4018      	ands	r0, r3
    2160:	e01b      	b.n	219a <system_clock_source_is_ready+0x66>
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2162:	4b10      	ldr	r3, [pc, #64]	; (21a4 <system_clock_source_is_ready+0x70>)
    2164:	68db      	ldr	r3, [r3, #12]
    2166:	2001      	movs	r0, #1
    2168:	4018      	ands	r0, r3
    216a:	e016      	b.n	219a <system_clock_source_is_ready+0x66>
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    216c:	4b0c      	ldr	r3, [pc, #48]	; (21a0 <system_clock_source_is_ready+0x6c>)
    216e:	68d8      	ldr	r0, [r3, #12]
    2170:	23d0      	movs	r3, #208	; 0xd0
    2172:	011b      	lsls	r3, r3, #4
    2174:	4018      	ands	r0, r3
    2176:	4b0c      	ldr	r3, [pc, #48]	; (21a8 <system_clock_source_is_ready+0x74>)
    2178:	469c      	mov	ip, r3
    217a:	4460      	add	r0, ip
    217c:	4243      	negs	r3, r0
    217e:	4158      	adcs	r0, r3
    2180:	b2c0      	uxtb	r0, r0
    2182:	e00a      	b.n	219a <system_clock_source_is_ready+0x66>
		return ((OSCCTRL->DPLLSTATUS.reg &
    2184:	233c      	movs	r3, #60	; 0x3c
    2186:	4a06      	ldr	r2, [pc, #24]	; (21a0 <system_clock_source_is_ready+0x6c>)
    2188:	5cd0      	ldrb	r0, [r2, r3]
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
    218a:	3b39      	subs	r3, #57	; 0x39
    218c:	4018      	ands	r0, r3
    218e:	3803      	subs	r0, #3
    2190:	4243      	negs	r3, r0
    2192:	4158      	adcs	r0, r3
    2194:	b2c0      	uxtb	r0, r0
    2196:	e000      	b.n	219a <system_clock_source_is_ready+0x66>
		return true;
    2198:	2001      	movs	r0, #1
	}
}
    219a:	4770      	bx	lr
    219c:	00004a8c 	.word	0x00004a8c
    21a0:	40000c00 	.word	0x40000c00
    21a4:	40001000 	.word	0x40001000
    21a8:	fffff300 	.word	0xfffff300

000021ac <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    21ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ae:	46ce      	mov	lr, r9
    21b0:	4647      	mov	r7, r8
    21b2:	b580      	push	{r7, lr}
    21b4:	b089      	sub	sp, #36	; 0x24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    21b6:	2280      	movs	r2, #128	; 0x80
    21b8:	0052      	lsls	r2, r2, #1
    21ba:	4b53      	ldr	r3, [pc, #332]	; (2308 <system_clock_init+0x15c>)
    21bc:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    21be:	3afd      	subs	r2, #253	; 0xfd
    21c0:	4b52      	ldr	r3, [pc, #328]	; (230c <system_clock_init+0x160>)
    21c2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    21c4:	4a52      	ldr	r2, [pc, #328]	; (2310 <system_clock_init+0x164>)
    21c6:	6853      	ldr	r3, [r2, #4]
    21c8:	211e      	movs	r1, #30
    21ca:	438b      	bics	r3, r1
    21cc:	391c      	subs	r1, #28
    21ce:	430b      	orrs	r3, r1
    21d0:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    21d2:	2380      	movs	r3, #128	; 0x80
    21d4:	05db      	lsls	r3, r3, #23
    21d6:	789b      	ldrb	r3, [r3, #2]
    21d8:	2b02      	cmp	r3, #2
    21da:	d00f      	beq.n	21fc <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    21dc:	2380      	movs	r3, #128	; 0x80
    21de:	05db      	lsls	r3, r3, #23
    21e0:	789b      	ldrb	r3, [r3, #2]
    21e2:	b25b      	sxtb	r3, r3
    21e4:	2b00      	cmp	r3, #0
    21e6:	db09      	blt.n	21fc <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    21e8:	2380      	movs	r3, #128	; 0x80
    21ea:	05db      	lsls	r3, r3, #23
    21ec:	2201      	movs	r2, #1
    21ee:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    21f0:	3201      	adds	r2, #1
    21f2:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    21f4:	001a      	movs	r2, r3
    21f6:	7993      	ldrb	r3, [r2, #6]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d0fc      	beq.n	21f6 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    21fc:	a805      	add	r0, sp, #20
    21fe:	2300      	movs	r3, #0
    2200:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2202:	2280      	movs	r2, #128	; 0x80
    2204:	0212      	lsls	r2, r2, #8
    2206:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2208:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    220a:	2201      	movs	r2, #1
    220c:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    220e:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2210:	2104      	movs	r1, #4
    2212:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2214:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    2216:	7202      	strb	r2, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2218:	4b3e      	ldr	r3, [pc, #248]	; (2314 <system_clock_init+0x168>)
    221a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    221c:	2005      	movs	r0, #5
    221e:	4b3e      	ldr	r3, [pc, #248]	; (2318 <system_clock_init+0x16c>)
    2220:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2222:	493e      	ldr	r1, [pc, #248]	; (231c <system_clock_init+0x170>)
    2224:	2201      	movs	r2, #1
    2226:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2228:	421a      	tst	r2, r3
    222a:	d0fc      	beq.n	2226 <system_clock_init+0x7a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    222c:	4a3b      	ldr	r2, [pc, #236]	; (231c <system_clock_init+0x170>)
    222e:	6953      	ldr	r3, [r2, #20]
    2230:	2180      	movs	r1, #128	; 0x80
    2232:	430b      	orrs	r3, r1
    2234:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2236:	a902      	add	r1, sp, #8
    2238:	2501      	movs	r5, #1
    223a:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    223c:	2400      	movs	r4, #0
    223e:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2240:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2242:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    2244:	2303      	movs	r3, #3
    2246:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2248:	2000      	movs	r0, #0
    224a:	4b35      	ldr	r3, [pc, #212]	; (2320 <system_clock_init+0x174>)
    224c:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    224e:	2006      	movs	r0, #6
    2250:	4b34      	ldr	r3, [pc, #208]	; (2324 <system_clock_init+0x178>)
    2252:	4798      	blx	r3
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    2254:	a801      	add	r0, sp, #4
    2256:	2302      	movs	r3, #2
    2258:	7003      	strb	r3, [r0, #0]
	osc16m_conf.on_demand       = 0;
    225a:	7084      	strb	r4, [r0, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    225c:	7045      	strb	r5, [r0, #1]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    225e:	4b32      	ldr	r3, [pc, #200]	; (2328 <system_clock_init+0x17c>)
    2260:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2262:	2006      	movs	r0, #6
    2264:	4b2c      	ldr	r3, [pc, #176]	; (2318 <system_clock_init+0x16c>)
    2266:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2268:	4927      	ldr	r1, [pc, #156]	; (2308 <system_clock_init+0x15c>)
    226a:	2210      	movs	r2, #16
    226c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    226e:	421a      	tst	r2, r3
    2270:	d0fc      	beq.n	226c <system_clock_init+0xc0>
	config->division_factor    = 1;
    2272:	ac02      	add	r4, sp, #8
    2274:	2601      	movs	r6, #1
    2276:	9603      	str	r6, [sp, #12]
	config->high_when_disabled = false;
    2278:	2500      	movs	r5, #0
    227a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    227c:	2306      	movs	r3, #6
    227e:	4699      	mov	r9, r3
    2280:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2282:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2284:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2286:	0021      	movs	r1, r4
    2288:	2000      	movs	r0, #0
    228a:	4b25      	ldr	r3, [pc, #148]	; (2320 <system_clock_init+0x174>)
    228c:	4698      	mov	r8, r3
    228e:	4798      	blx	r3
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    2290:	4a1d      	ldr	r2, [pc, #116]	; (2308 <system_clock_init+0x15c>)
    2292:	7d13      	ldrb	r3, [r2, #20]
    2294:	2180      	movs	r1, #128	; 0x80
    2296:	430b      	orrs	r3, r1
    2298:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    229a:	4b24      	ldr	r3, [pc, #144]	; (232c <system_clock_init+0x180>)
    229c:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    229e:	4f24      	ldr	r7, [pc, #144]	; (2330 <system_clock_init+0x184>)
    22a0:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    22a2:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    22a4:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    22a6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    22a8:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    22aa:	464b      	mov	r3, r9
    22ac:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    22ae:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    22b0:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    22b2:	0021      	movs	r1, r4
    22b4:	2000      	movs	r0, #0
    22b6:	47c0      	blx	r8
    22b8:	2000      	movs	r0, #0
    22ba:	4b1e      	ldr	r3, [pc, #120]	; (2334 <system_clock_init+0x188>)
    22bc:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    22be:	2000      	movs	r0, #0
    22c0:	4b1d      	ldr	r3, [pc, #116]	; (2338 <system_clock_init+0x18c>)
    22c2:	4798      	blx	r3
    22c4:	7939      	ldrb	r1, [r7, #4]
    22c6:	b2c9      	uxtb	r1, r1
    22c8:	4b1c      	ldr	r3, [pc, #112]	; (233c <system_clock_init+0x190>)
    22ca:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    22cc:	4b1c      	ldr	r3, [pc, #112]	; (2340 <system_clock_init+0x194>)
    22ce:	4298      	cmp	r0, r3
    22d0:	d814      	bhi.n	22fc <system_clock_init+0x150>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    22d2:	2380      	movs	r3, #128	; 0x80
    22d4:	05db      	lsls	r3, r3, #23
    22d6:	789b      	ldrb	r3, [r3, #2]
    22d8:	2b00      	cmp	r3, #0
    22da:	d00f      	beq.n	22fc <system_clock_init+0x150>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    22dc:	2380      	movs	r3, #128	; 0x80
    22de:	05db      	lsls	r3, r3, #23
    22e0:	789b      	ldrb	r3, [r3, #2]
    22e2:	b25b      	sxtb	r3, r3
    22e4:	2b00      	cmp	r3, #0
    22e6:	db09      	blt.n	22fc <system_clock_init+0x150>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    22e8:	2380      	movs	r3, #128	; 0x80
    22ea:	05db      	lsls	r3, r3, #23
    22ec:	2201      	movs	r2, #1
    22ee:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    22f0:	2200      	movs	r2, #0
    22f2:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    22f4:	001a      	movs	r2, r3
    22f6:	7993      	ldrb	r3, [r2, #6]
    22f8:	2b00      	cmp	r3, #0
    22fa:	d0fc      	beq.n	22f6 <system_clock_init+0x14a>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    22fc:	b009      	add	sp, #36	; 0x24
    22fe:	bc0c      	pop	{r2, r3}
    2300:	4690      	mov	r8, r2
    2302:	4699      	mov	r9, r3
    2304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	40000c00 	.word	0x40000c00
    230c:	40001400 	.word	0x40001400
    2310:	41004000 	.word	0x41004000
    2314:	00001ed5 	.word	0x00001ed5
    2318:	00001ff9 	.word	0x00001ff9
    231c:	40001000 	.word	0x40001000
    2320:	00002369 	.word	0x00002369
    2324:	000020b5 	.word	0x000020b5
    2328:	00001ea1 	.word	0x00001ea1
    232c:	00002345 	.word	0x00002345
    2330:	40000400 	.word	0x40000400
    2334:	00002415 	.word	0x00002415
    2338:	000024a1 	.word	0x000024a1
    233c:	0000364d 	.word	0x0000364d
    2340:	00b71b00 	.word	0x00b71b00

00002344 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    2344:	4a06      	ldr	r2, [pc, #24]	; (2360 <system_gclk_init+0x1c>)
    2346:	6953      	ldr	r3, [r2, #20]
    2348:	2140      	movs	r1, #64	; 0x40
    234a:	430b      	orrs	r3, r1
    234c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    234e:	2201      	movs	r2, #1
    2350:	4b04      	ldr	r3, [pc, #16]	; (2364 <system_gclk_init+0x20>)
    2352:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2354:	0019      	movs	r1, r3
    2356:	780b      	ldrb	r3, [r1, #0]
    2358:	4213      	tst	r3, r2
    235a:	d1fc      	bne.n	2356 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    235c:	4770      	bx	lr
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	40000400 	.word	0x40000400
    2364:	40001800 	.word	0x40001800

00002368 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2368:	b570      	push	{r4, r5, r6, lr}
    236a:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    236c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    236e:	784b      	ldrb	r3, [r1, #1]
    2370:	2b00      	cmp	r3, #0
    2372:	d002      	beq.n	237a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2374:	2380      	movs	r3, #128	; 0x80
    2376:	00db      	lsls	r3, r3, #3
    2378:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    237a:	7a4b      	ldrb	r3, [r1, #9]
    237c:	2b00      	cmp	r3, #0
    237e:	d002      	beq.n	2386 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2380:	2380      	movs	r3, #128	; 0x80
    2382:	011b      	lsls	r3, r3, #4
    2384:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2386:	6848      	ldr	r0, [r1, #4]
    2388:	2801      	cmp	r0, #1
    238a:	d90f      	bls.n	23ac <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    238c:	1e43      	subs	r3, r0, #1
    238e:	4218      	tst	r0, r3
    2390:	d131      	bne.n	23f6 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2392:	2802      	cmp	r0, #2
    2394:	d92d      	bls.n	23f2 <system_gclk_gen_set_config+0x8a>
    2396:	2302      	movs	r3, #2
    2398:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    239a:	3201      	adds	r2, #1
						mask <<= 1) {
    239c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    239e:	4298      	cmp	r0, r3
    23a0:	d8fb      	bhi.n	239a <system_gclk_gen_set_config+0x32>
    23a2:	2380      	movs	r3, #128	; 0x80
    23a4:	015b      	lsls	r3, r3, #5
    23a6:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    23a8:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    23aa:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    23ac:	7a0b      	ldrb	r3, [r1, #8]
    23ae:	2b00      	cmp	r3, #0
    23b0:	d002      	beq.n	23b8 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    23b2:	2380      	movs	r3, #128	; 0x80
    23b4:	019b      	lsls	r3, r3, #6
    23b6:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    23b8:	2604      	movs	r6, #4
    23ba:	40a6      	lsls	r6, r4
    23bc:	4911      	ldr	r1, [pc, #68]	; (2404 <system_gclk_gen_set_config+0x9c>)
    23be:	4a12      	ldr	r2, [pc, #72]	; (2408 <system_gclk_gen_set_config+0xa0>)
    23c0:	684b      	ldr	r3, [r1, #4]
    23c2:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    23c4:	421e      	tst	r6, r3
    23c6:	d1fb      	bne.n	23c0 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    23c8:	4b10      	ldr	r3, [pc, #64]	; (240c <system_gclk_gen_set_config+0xa4>)
    23ca:	4798      	blx	r3
    23cc:	00a4      	lsls	r4, r4, #2
    23ce:	4b0d      	ldr	r3, [pc, #52]	; (2404 <system_gclk_gen_set_config+0x9c>)
    23d0:	469c      	mov	ip, r3
    23d2:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    23d4:	6a22      	ldr	r2, [r4, #32]
    23d6:	2380      	movs	r3, #128	; 0x80
    23d8:	005b      	lsls	r3, r3, #1
    23da:	401a      	ands	r2, r3
    23dc:	432a      	orrs	r2, r5
    23de:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    23e0:	4661      	mov	r1, ip
    23e2:	4a09      	ldr	r2, [pc, #36]	; (2408 <system_gclk_gen_set_config+0xa0>)
    23e4:	684b      	ldr	r3, [r1, #4]
    23e6:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    23e8:	421e      	tst	r6, r3
    23ea:	d1fb      	bne.n	23e4 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    23ec:	4b08      	ldr	r3, [pc, #32]	; (2410 <system_gclk_gen_set_config+0xa8>)
    23ee:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    23f0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    23f2:	2200      	movs	r2, #0
    23f4:	e7d5      	b.n	23a2 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    23f6:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    23f8:	2380      	movs	r3, #128	; 0x80
    23fa:	009b      	lsls	r3, r3, #2
    23fc:	4318      	orrs	r0, r3
    23fe:	4305      	orrs	r5, r0
    2400:	e7d4      	b.n	23ac <system_gclk_gen_set_config+0x44>
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	40001800 	.word	0x40001800
    2408:	000007fc 	.word	0x000007fc
    240c:	000001ad 	.word	0x000001ad
    2410:	000001ed 	.word	0x000001ed

00002414 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2414:	b510      	push	{r4, lr}
    2416:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2418:	2204      	movs	r2, #4
    241a:	4082      	lsls	r2, r0
    241c:	4809      	ldr	r0, [pc, #36]	; (2444 <system_gclk_gen_enable+0x30>)
    241e:	490a      	ldr	r1, [pc, #40]	; (2448 <system_gclk_gen_enable+0x34>)
    2420:	6843      	ldr	r3, [r0, #4]
    2422:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2424:	421a      	tst	r2, r3
    2426:	d1fb      	bne.n	2420 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    2428:	4b08      	ldr	r3, [pc, #32]	; (244c <system_gclk_gen_enable+0x38>)
    242a:	4798      	blx	r3
    242c:	00a4      	lsls	r4, r4, #2
    242e:	4b05      	ldr	r3, [pc, #20]	; (2444 <system_gclk_gen_enable+0x30>)
    2430:	469c      	mov	ip, r3
    2432:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2434:	6a22      	ldr	r2, [r4, #32]
    2436:	2380      	movs	r3, #128	; 0x80
    2438:	005b      	lsls	r3, r3, #1
    243a:	4313      	orrs	r3, r2
    243c:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    243e:	4b04      	ldr	r3, [pc, #16]	; (2450 <system_gclk_gen_enable+0x3c>)
    2440:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2442:	bd10      	pop	{r4, pc}
    2444:	40001800 	.word	0x40001800
    2448:	000007fc 	.word	0x000007fc
    244c:	000001ad 	.word	0x000001ad
    2450:	000001ed 	.word	0x000001ed

00002454 <system_gclk_gen_disable>:
 *
 * \param[in] generator  Generic Clock Generator index to disable
 */
void system_gclk_gen_disable(
		const uint8_t generator)
{
    2454:	b510      	push	{r4, lr}
    2456:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2458:	2204      	movs	r2, #4
    245a:	4082      	lsls	r2, r0
    245c:	480b      	ldr	r0, [pc, #44]	; (248c <system_gclk_gen_disable+0x38>)
    245e:	490c      	ldr	r1, [pc, #48]	; (2490 <system_gclk_gen_disable+0x3c>)
    2460:	6843      	ldr	r3, [r0, #4]
    2462:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2464:	421a      	tst	r2, r3
    2466:	d1fb      	bne.n	2460 <system_gclk_gen_disable+0xc>
	cpu_irq_enter_critical();
    2468:	4b0a      	ldr	r3, [pc, #40]	; (2494 <system_gclk_gen_disable+0x40>)
    246a:	4798      	blx	r3
    246c:	00a0      	lsls	r0, r4, #2
    246e:	4b07      	ldr	r3, [pc, #28]	; (248c <system_gclk_gen_disable+0x38>)
    2470:	469c      	mov	ip, r3
    2472:	4460      	add	r0, ip
	};

	system_interrupt_enter_critical_section();

	/* Disable generator */
	GCLK->GENCTRL[generator].reg &= ~GCLK_GENCTRL_GENEN;
    2474:	6a03      	ldr	r3, [r0, #32]
    2476:	4a08      	ldr	r2, [pc, #32]	; (2498 <system_gclk_gen_disable+0x44>)
    2478:	4013      	ands	r3, r2
    247a:	6203      	str	r3, [r0, #32]
	while (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN) {
    247c:	2280      	movs	r2, #128	; 0x80
    247e:	0052      	lsls	r2, r2, #1
    2480:	6a03      	ldr	r3, [r0, #32]
    2482:	4213      	tst	r3, r2
    2484:	d1fc      	bne.n	2480 <system_gclk_gen_disable+0x2c>
	cpu_irq_leave_critical();
    2486:	4b05      	ldr	r3, [pc, #20]	; (249c <system_gclk_gen_disable+0x48>)
    2488:	4798      	blx	r3
		/* Wait for clock to become disabled */
	}

	system_interrupt_leave_critical_section();
}
    248a:	bd10      	pop	{r4, pc}
    248c:	40001800 	.word	0x40001800
    2490:	000007fc 	.word	0x000007fc
    2494:	000001ad 	.word	0x000001ad
    2498:	fffffeff 	.word	0xfffffeff
    249c:	000001ed 	.word	0x000001ed

000024a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    24a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24a2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    24a4:	2204      	movs	r2, #4
    24a6:	4082      	lsls	r2, r0
    24a8:	4812      	ldr	r0, [pc, #72]	; (24f4 <system_gclk_gen_get_hz+0x54>)
    24aa:	4913      	ldr	r1, [pc, #76]	; (24f8 <system_gclk_gen_get_hz+0x58>)
    24ac:	6843      	ldr	r3, [r0, #4]
    24ae:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    24b0:	421a      	tst	r2, r3
    24b2:	d1fb      	bne.n	24ac <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    24b4:	4b11      	ldr	r3, [pc, #68]	; (24fc <system_gclk_gen_get_hz+0x5c>)
    24b6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    24b8:	4f0e      	ldr	r7, [pc, #56]	; (24f4 <system_gclk_gen_get_hz+0x54>)
    24ba:	3408      	adds	r4, #8
    24bc:	00a4      	lsls	r4, r4, #2
    24be:	59e0      	ldr	r0, [r4, r7]
    24c0:	0700      	lsls	r0, r0, #28
    24c2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    24c4:	4b0e      	ldr	r3, [pc, #56]	; (2500 <system_gclk_gen_get_hz+0x60>)
    24c6:	4798      	blx	r3
    24c8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    24ca:	59e5      	ldr	r5, [r4, r7]
    24cc:	04ed      	lsls	r5, r5, #19
    24ce:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    24d0:	59e4      	ldr	r4, [r4, r7]
    24d2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    24d4:	4b0b      	ldr	r3, [pc, #44]	; (2504 <system_gclk_gen_get_hz+0x64>)
    24d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    24d8:	2d00      	cmp	r5, #0
    24da:	d107      	bne.n	24ec <system_gclk_gen_get_hz+0x4c>
    24dc:	2c01      	cmp	r4, #1
    24de:	d907      	bls.n	24f0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    24e0:	0021      	movs	r1, r4
    24e2:	0030      	movs	r0, r6
    24e4:	4b08      	ldr	r3, [pc, #32]	; (2508 <system_gclk_gen_get_hz+0x68>)
    24e6:	4798      	blx	r3
    24e8:	0006      	movs	r6, r0
    24ea:	e001      	b.n	24f0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    24ec:	3401      	adds	r4, #1
    24ee:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    24f0:	0030      	movs	r0, r6
    24f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24f4:	40001800 	.word	0x40001800
    24f8:	000007fc 	.word	0x000007fc
    24fc:	000001ad 	.word	0x000001ad
    2500:	00001e0d 	.word	0x00001e0d
    2504:	000001ed 	.word	0x000001ed
    2508:	0000364d 	.word	0x0000364d

0000250c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    250c:	b510      	push	{r4, lr}
    250e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2510:	4b09      	ldr	r3, [pc, #36]	; (2538 <system_gclk_chan_enable+0x2c>)
    2512:	4798      	blx	r3
    2514:	00a0      	lsls	r0, r4, #2
    2516:	4b09      	ldr	r3, [pc, #36]	; (253c <system_gclk_chan_enable+0x30>)
    2518:	469c      	mov	ip, r3
    251a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    251c:	2280      	movs	r2, #128	; 0x80
    251e:	5883      	ldr	r3, [r0, r2]
    2520:	2140      	movs	r1, #64	; 0x40
    2522:	430b      	orrs	r3, r1
    2524:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    2526:	3140      	adds	r1, #64	; 0x40
    2528:	3a40      	subs	r2, #64	; 0x40
    252a:	5843      	ldr	r3, [r0, r1]
    252c:	421a      	tst	r2, r3
    252e:	d0fc      	beq.n	252a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    2530:	4b03      	ldr	r3, [pc, #12]	; (2540 <system_gclk_chan_enable+0x34>)
    2532:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2534:	bd10      	pop	{r4, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	000001ad 	.word	0x000001ad
    253c:	40001800 	.word	0x40001800
    2540:	000001ed 	.word	0x000001ed

00002544 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2544:	b510      	push	{r4, lr}
    2546:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2548:	4b09      	ldr	r3, [pc, #36]	; (2570 <system_gclk_chan_disable+0x2c>)
    254a:	4798      	blx	r3
    254c:	00a0      	lsls	r0, r4, #2
    254e:	4b09      	ldr	r3, [pc, #36]	; (2574 <system_gclk_chan_disable+0x30>)
    2550:	469c      	mov	ip, r3
    2552:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    2554:	2280      	movs	r2, #128	; 0x80
    2556:	5883      	ldr	r3, [r0, r2]
    2558:	2140      	movs	r1, #64	; 0x40
    255a:	438b      	bics	r3, r1
    255c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    255e:	3140      	adds	r1, #64	; 0x40
    2560:	3a40      	subs	r2, #64	; 0x40
    2562:	5843      	ldr	r3, [r0, r1]
    2564:	421a      	tst	r2, r3
    2566:	d1fc      	bne.n	2562 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    2568:	4b03      	ldr	r3, [pc, #12]	; (2578 <system_gclk_chan_disable+0x34>)
    256a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    256c:	bd10      	pop	{r4, pc}
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	000001ad 	.word	0x000001ad
    2574:	40001800 	.word	0x40001800
    2578:	000001ed 	.word	0x000001ed

0000257c <system_gclk_chan_set_config>:
{
    257c:	b570      	push	{r4, r5, r6, lr}
    257e:	0004      	movs	r4, r0
    2580:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    2582:	4b05      	ldr	r3, [pc, #20]	; (2598 <system_gclk_chan_set_config+0x1c>)
    2584:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2586:	782a      	ldrb	r2, [r5, #0]
    2588:	230f      	movs	r3, #15
    258a:	4013      	ands	r3, r2
    258c:	3420      	adds	r4, #32
    258e:	00a4      	lsls	r4, r4, #2
    2590:	4a02      	ldr	r2, [pc, #8]	; (259c <system_gclk_chan_set_config+0x20>)
    2592:	50a3      	str	r3, [r4, r2]
}
    2594:	bd70      	pop	{r4, r5, r6, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	00002545 	.word	0x00002545
    259c:	40001800 	.word	0x40001800

000025a0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    25a0:	b510      	push	{r4, lr}
    25a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    25a4:	4b06      	ldr	r3, [pc, #24]	; (25c0 <system_gclk_chan_get_hz+0x20>)
    25a6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    25a8:	3420      	adds	r4, #32
    25aa:	00a4      	lsls	r4, r4, #2
    25ac:	4b05      	ldr	r3, [pc, #20]	; (25c4 <system_gclk_chan_get_hz+0x24>)
    25ae:	58e4      	ldr	r4, [r4, r3]
    25b0:	0724      	lsls	r4, r4, #28
    25b2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    25b4:	4b04      	ldr	r3, [pc, #16]	; (25c8 <system_gclk_chan_get_hz+0x28>)
    25b6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    25b8:	0020      	movs	r0, r4
    25ba:	4b04      	ldr	r3, [pc, #16]	; (25cc <system_gclk_chan_get_hz+0x2c>)
    25bc:	4798      	blx	r3
}
    25be:	bd10      	pop	{r4, pc}
    25c0:	000001ad 	.word	0x000001ad
    25c4:	40001800 	.word	0x40001800
    25c8:	000001ed 	.word	0x000001ed
    25cc:	000024a1 	.word	0x000024a1

000025d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    25d0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    25d2:	78d3      	ldrb	r3, [r2, #3]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d135      	bne.n	2644 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    25d8:	7813      	ldrb	r3, [r2, #0]
    25da:	2b80      	cmp	r3, #128	; 0x80
    25dc:	d029      	beq.n	2632 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    25de:	061b      	lsls	r3, r3, #24
    25e0:	2480      	movs	r4, #128	; 0x80
    25e2:	0264      	lsls	r4, r4, #9
    25e4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    25e6:	7854      	ldrb	r4, [r2, #1]
    25e8:	2502      	movs	r5, #2
    25ea:	43ac      	bics	r4, r5
    25ec:	d106      	bne.n	25fc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    25ee:	7894      	ldrb	r4, [r2, #2]
    25f0:	2c00      	cmp	r4, #0
    25f2:	d120      	bne.n	2636 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    25f4:	2480      	movs	r4, #128	; 0x80
    25f6:	02a4      	lsls	r4, r4, #10
    25f8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    25fa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    25fc:	7854      	ldrb	r4, [r2, #1]
    25fe:	3c01      	subs	r4, #1
    2600:	2c01      	cmp	r4, #1
    2602:	d91c      	bls.n	263e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2604:	040d      	lsls	r5, r1, #16
    2606:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2608:	24a0      	movs	r4, #160	; 0xa0
    260a:	05e4      	lsls	r4, r4, #23
    260c:	432c      	orrs	r4, r5
    260e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2610:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2612:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2614:	24d0      	movs	r4, #208	; 0xd0
    2616:	0624      	lsls	r4, r4, #24
    2618:	432c      	orrs	r4, r5
    261a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    261c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    261e:	78d4      	ldrb	r4, [r2, #3]
    2620:	2c00      	cmp	r4, #0
    2622:	d122      	bne.n	266a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2624:	035b      	lsls	r3, r3, #13
    2626:	d51c      	bpl.n	2662 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2628:	7893      	ldrb	r3, [r2, #2]
    262a:	2b01      	cmp	r3, #1
    262c:	d01e      	beq.n	266c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    262e:	6141      	str	r1, [r0, #20]
    2630:	e017      	b.n	2662 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2632:	2300      	movs	r3, #0
    2634:	e7d7      	b.n	25e6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2636:	24c0      	movs	r4, #192	; 0xc0
    2638:	02e4      	lsls	r4, r4, #11
    263a:	4323      	orrs	r3, r4
    263c:	e7dd      	b.n	25fa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    263e:	4c0d      	ldr	r4, [pc, #52]	; (2674 <_system_pinmux_config+0xa4>)
    2640:	4023      	ands	r3, r4
    2642:	e7df      	b.n	2604 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2644:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2646:	040c      	lsls	r4, r1, #16
    2648:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    264a:	23a0      	movs	r3, #160	; 0xa0
    264c:	05db      	lsls	r3, r3, #23
    264e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2650:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2652:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2654:	23d0      	movs	r3, #208	; 0xd0
    2656:	061b      	lsls	r3, r3, #24
    2658:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    265a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    265c:	78d3      	ldrb	r3, [r2, #3]
    265e:	2b00      	cmp	r3, #0
    2660:	d103      	bne.n	266a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2662:	7853      	ldrb	r3, [r2, #1]
    2664:	3b01      	subs	r3, #1
    2666:	2b01      	cmp	r3, #1
    2668:	d902      	bls.n	2670 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    266a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    266c:	6181      	str	r1, [r0, #24]
    266e:	e7f8      	b.n	2662 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2670:	6081      	str	r1, [r0, #8]
}
    2672:	e7fa      	b.n	266a <_system_pinmux_config+0x9a>
    2674:	fffbffff 	.word	0xfffbffff

00002678 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2678:	b510      	push	{r4, lr}
    267a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    267c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    267e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2680:	2900      	cmp	r1, #0
    2682:	d104      	bne.n	268e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2684:	0943      	lsrs	r3, r0, #5
    2686:	01db      	lsls	r3, r3, #7
    2688:	4905      	ldr	r1, [pc, #20]	; (26a0 <system_pinmux_pin_set_config+0x28>)
    268a:	468c      	mov	ip, r1
    268c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    268e:	241f      	movs	r4, #31
    2690:	4020      	ands	r0, r4
    2692:	2101      	movs	r1, #1
    2694:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2696:	0018      	movs	r0, r3
    2698:	4b02      	ldr	r3, [pc, #8]	; (26a4 <system_pinmux_pin_set_config+0x2c>)
    269a:	4798      	blx	r3
}
    269c:	bd10      	pop	{r4, pc}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	40002800 	.word	0x40002800
    26a4:	000025d1 	.word	0x000025d1

000026a8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    26a8:	4770      	bx	lr
	...

000026ac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    26ac:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    26ae:	4b05      	ldr	r3, [pc, #20]	; (26c4 <system_init+0x18>)
    26b0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    26b2:	4b05      	ldr	r3, [pc, #20]	; (26c8 <system_init+0x1c>)
    26b4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    26b6:	4b05      	ldr	r3, [pc, #20]	; (26cc <system_init+0x20>)
    26b8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    26ba:	4b05      	ldr	r3, [pc, #20]	; (26d0 <system_init+0x24>)
    26bc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    26be:	4b05      	ldr	r3, [pc, #20]	; (26d4 <system_init+0x28>)
    26c0:	4798      	blx	r3
}
    26c2:	bd10      	pop	{r4, pc}
    26c4:	000021ad 	.word	0x000021ad
    26c8:	0000021d 	.word	0x0000021d
    26cc:	00000b05 	.word	0x00000b05
    26d0:	00000ced 	.word	0x00000ced
    26d4:	000026a9 	.word	0x000026a9

000026d8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    26d8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    26da:	0080      	lsls	r0, r0, #2
    26dc:	4b16      	ldr	r3, [pc, #88]	; (2738 <_tc_interrupt_handler+0x60>)
    26de:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    26e0:	6823      	ldr	r3, [r4, #0]
    26e2:	7a9d      	ldrb	r5, [r3, #10]
    26e4:	7e22      	ldrb	r2, [r4, #24]
    26e6:	7e63      	ldrb	r3, [r4, #25]
    26e8:	4013      	ands	r3, r2
    26ea:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    26ec:	07eb      	lsls	r3, r5, #31
    26ee:	d406      	bmi.n	26fe <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    26f0:	07ab      	lsls	r3, r5, #30
    26f2:	d40b      	bmi.n	270c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    26f4:	06eb      	lsls	r3, r5, #27
    26f6:	d410      	bmi.n	271a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    26f8:	06ab      	lsls	r3, r5, #26
    26fa:	d415      	bmi.n	2728 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    26fc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    26fe:	0020      	movs	r0, r4
    2700:	68a3      	ldr	r3, [r4, #8]
    2702:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2704:	2301      	movs	r3, #1
    2706:	6822      	ldr	r2, [r4, #0]
    2708:	7293      	strb	r3, [r2, #10]
    270a:	e7f1      	b.n	26f0 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    270c:	0020      	movs	r0, r4
    270e:	68e3      	ldr	r3, [r4, #12]
    2710:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2712:	2302      	movs	r3, #2
    2714:	6822      	ldr	r2, [r4, #0]
    2716:	7293      	strb	r3, [r2, #10]
    2718:	e7ec      	b.n	26f4 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    271a:	0020      	movs	r0, r4
    271c:	6923      	ldr	r3, [r4, #16]
    271e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2720:	2310      	movs	r3, #16
    2722:	6822      	ldr	r2, [r4, #0]
    2724:	7293      	strb	r3, [r2, #10]
    2726:	e7e7      	b.n	26f8 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2728:	0020      	movs	r0, r4
    272a:	6963      	ldr	r3, [r4, #20]
    272c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    272e:	6823      	ldr	r3, [r4, #0]
    2730:	2220      	movs	r2, #32
    2732:	729a      	strb	r2, [r3, #10]
}
    2734:	e7e2      	b.n	26fc <_tc_interrupt_handler+0x24>
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	20000210 	.word	0x20000210

0000273c <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    273c:	b510      	push	{r4, lr}
    273e:	2000      	movs	r0, #0
    2740:	4b01      	ldr	r3, [pc, #4]	; (2748 <TC0_Handler+0xc>)
    2742:	4798      	blx	r3
    2744:	bd10      	pop	{r4, pc}
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	000026d9 	.word	0x000026d9

0000274c <TC1_Handler>:
    274c:	b510      	push	{r4, lr}
    274e:	2001      	movs	r0, #1
    2750:	4b01      	ldr	r3, [pc, #4]	; (2758 <TC1_Handler+0xc>)
    2752:	4798      	blx	r3
    2754:	bd10      	pop	{r4, pc}
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	000026d9 	.word	0x000026d9

0000275c <TC2_Handler>:
    275c:	b510      	push	{r4, lr}
    275e:	2002      	movs	r0, #2
    2760:	4b01      	ldr	r3, [pc, #4]	; (2768 <TC2_Handler+0xc>)
    2762:	4798      	blx	r3
    2764:	bd10      	pop	{r4, pc}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	000026d9 	.word	0x000026d9

0000276c <TC3_Handler>:
    276c:	b510      	push	{r4, lr}
    276e:	2003      	movs	r0, #3
    2770:	4b01      	ldr	r3, [pc, #4]	; (2778 <TC3_Handler+0xc>)
    2772:	4798      	blx	r3
    2774:	bd10      	pop	{r4, pc}
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	000026d9 	.word	0x000026d9

0000277c <TC4_Handler>:
    277c:	b510      	push	{r4, lr}
    277e:	2004      	movs	r0, #4
    2780:	4b01      	ldr	r3, [pc, #4]	; (2788 <TC4_Handler+0xc>)
    2782:	4798      	blx	r3
    2784:	bd10      	pop	{r4, pc}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	000026d9 	.word	0x000026d9

0000278c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    278c:	e7fe      	b.n	278c <Dummy_Handler>
	...

00002790 <Reset_Handler>:
{
    2790:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2792:	4a1a      	ldr	r2, [pc, #104]	; (27fc <Reset_Handler+0x6c>)
    2794:	4b1a      	ldr	r3, [pc, #104]	; (2800 <Reset_Handler+0x70>)
    2796:	429a      	cmp	r2, r3
    2798:	d011      	beq.n	27be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    279a:	001a      	movs	r2, r3
    279c:	4b19      	ldr	r3, [pc, #100]	; (2804 <Reset_Handler+0x74>)
    279e:	429a      	cmp	r2, r3
    27a0:	d20d      	bcs.n	27be <Reset_Handler+0x2e>
    27a2:	4a19      	ldr	r2, [pc, #100]	; (2808 <Reset_Handler+0x78>)
    27a4:	3303      	adds	r3, #3
    27a6:	1a9b      	subs	r3, r3, r2
    27a8:	089b      	lsrs	r3, r3, #2
    27aa:	3301      	adds	r3, #1
    27ac:	009b      	lsls	r3, r3, #2
    27ae:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    27b0:	4813      	ldr	r0, [pc, #76]	; (2800 <Reset_Handler+0x70>)
    27b2:	4912      	ldr	r1, [pc, #72]	; (27fc <Reset_Handler+0x6c>)
    27b4:	588c      	ldr	r4, [r1, r2]
    27b6:	5084      	str	r4, [r0, r2]
    27b8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    27ba:	429a      	cmp	r2, r3
    27bc:	d1fa      	bne.n	27b4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    27be:	4a13      	ldr	r2, [pc, #76]	; (280c <Reset_Handler+0x7c>)
    27c0:	4b13      	ldr	r3, [pc, #76]	; (2810 <Reset_Handler+0x80>)
    27c2:	429a      	cmp	r2, r3
    27c4:	d20a      	bcs.n	27dc <Reset_Handler+0x4c>
    27c6:	43d3      	mvns	r3, r2
    27c8:	4911      	ldr	r1, [pc, #68]	; (2810 <Reset_Handler+0x80>)
    27ca:	185b      	adds	r3, r3, r1
    27cc:	2103      	movs	r1, #3
    27ce:	438b      	bics	r3, r1
    27d0:	3304      	adds	r3, #4
    27d2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    27d4:	2100      	movs	r1, #0
    27d6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    27d8:	4293      	cmp	r3, r2
    27da:	d1fc      	bne.n	27d6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    27dc:	4a0d      	ldr	r2, [pc, #52]	; (2814 <Reset_Handler+0x84>)
    27de:	21ff      	movs	r1, #255	; 0xff
    27e0:	4b0d      	ldr	r3, [pc, #52]	; (2818 <Reset_Handler+0x88>)
    27e2:	438b      	bics	r3, r1
    27e4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    27e6:	4a0d      	ldr	r2, [pc, #52]	; (281c <Reset_Handler+0x8c>)
    27e8:	6853      	ldr	r3, [r2, #4]
    27ea:	397f      	subs	r1, #127	; 0x7f
    27ec:	430b      	orrs	r3, r1
    27ee:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    27f0:	4b0b      	ldr	r3, [pc, #44]	; (2820 <Reset_Handler+0x90>)
    27f2:	4798      	blx	r3
        main();
    27f4:	4b0b      	ldr	r3, [pc, #44]	; (2824 <Reset_Handler+0x94>)
    27f6:	4798      	blx	r3
    27f8:	e7fe      	b.n	27f8 <Reset_Handler+0x68>
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	00004e9c 	.word	0x00004e9c
    2800:	20000000 	.word	0x20000000
    2804:	20000090 	.word	0x20000090
    2808:	20000004 	.word	0x20000004
    280c:	20000090 	.word	0x20000090
    2810:	20000254 	.word	0x20000254
    2814:	e000ed00 	.word	0xe000ed00
    2818:	00000000 	.word	0x00000000
    281c:	41004000 	.word	0x41004000
    2820:	000037b9 	.word	0x000037b9
    2824:	00002ff1 	.word	0x00002ff1

00002828 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2828:	b5f0      	push	{r4, r5, r6, r7, lr}
    282a:	46c6      	mov	lr, r8
    282c:	b500      	push	{lr}
    282e:	000c      	movs	r4, r1
    2830:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2832:	2800      	cmp	r0, #0
    2834:	d10f      	bne.n	2856 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2836:	2a00      	cmp	r2, #0
    2838:	dd11      	ble.n	285e <_read+0x36>
    283a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    283c:	4e09      	ldr	r6, [pc, #36]	; (2864 <_read+0x3c>)
    283e:	4d0a      	ldr	r5, [pc, #40]	; (2868 <_read+0x40>)
    2840:	6830      	ldr	r0, [r6, #0]
    2842:	0021      	movs	r1, r4
    2844:	682b      	ldr	r3, [r5, #0]
    2846:	4798      	blx	r3
		ptr++;
    2848:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    284a:	42bc      	cmp	r4, r7
    284c:	d1f8      	bne.n	2840 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    284e:	4640      	mov	r0, r8
    2850:	bc04      	pop	{r2}
    2852:	4690      	mov	r8, r2
    2854:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2856:	2301      	movs	r3, #1
    2858:	425b      	negs	r3, r3
    285a:	4698      	mov	r8, r3
    285c:	e7f7      	b.n	284e <_read+0x26>
	for (; len > 0; --len) {
    285e:	4680      	mov	r8, r0
    2860:	e7f5      	b.n	284e <_read+0x26>
    2862:	46c0      	nop			; (mov r8, r8)
    2864:	2000022c 	.word	0x2000022c
    2868:	20000224 	.word	0x20000224

0000286c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    286c:	b5f0      	push	{r4, r5, r6, r7, lr}
    286e:	46c6      	mov	lr, r8
    2870:	b500      	push	{lr}
    2872:	000e      	movs	r6, r1
    2874:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2876:	3801      	subs	r0, #1
    2878:	2802      	cmp	r0, #2
    287a:	d810      	bhi.n	289e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    287c:	2a00      	cmp	r2, #0
    287e:	d011      	beq.n	28a4 <_write+0x38>
    2880:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2882:	4b0c      	ldr	r3, [pc, #48]	; (28b4 <_write+0x48>)
    2884:	4698      	mov	r8, r3
    2886:	4f0c      	ldr	r7, [pc, #48]	; (28b8 <_write+0x4c>)
    2888:	4643      	mov	r3, r8
    288a:	6818      	ldr	r0, [r3, #0]
    288c:	5d31      	ldrb	r1, [r6, r4]
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	4798      	blx	r3
    2892:	2800      	cmp	r0, #0
    2894:	db08      	blt.n	28a8 <_write+0x3c>
			return -1;
		}
		++nChars;
    2896:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2898:	42a5      	cmp	r5, r4
    289a:	d1f5      	bne.n	2888 <_write+0x1c>
    289c:	e006      	b.n	28ac <_write+0x40>
		return -1;
    289e:	2401      	movs	r4, #1
    28a0:	4264      	negs	r4, r4
    28a2:	e003      	b.n	28ac <_write+0x40>
	for (; len != 0; --len) {
    28a4:	0014      	movs	r4, r2
    28a6:	e001      	b.n	28ac <_write+0x40>
			return -1;
    28a8:	2401      	movs	r4, #1
    28aa:	4264      	negs	r4, r4
	}
	return nChars;
}
    28ac:	0020      	movs	r0, r4
    28ae:	bc04      	pop	{r2}
    28b0:	4690      	mov	r8, r2
    28b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28b4:	2000022c 	.word	0x2000022c
    28b8:	20000228 	.word	0x20000228

000028bc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    28bc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    28be:	4a06      	ldr	r2, [pc, #24]	; (28d8 <_sbrk+0x1c>)
    28c0:	6812      	ldr	r2, [r2, #0]
    28c2:	2a00      	cmp	r2, #0
    28c4:	d004      	beq.n	28d0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    28c6:	4a04      	ldr	r2, [pc, #16]	; (28d8 <_sbrk+0x1c>)
    28c8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    28ca:	18c3      	adds	r3, r0, r3
    28cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    28ce:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    28d0:	4902      	ldr	r1, [pc, #8]	; (28dc <_sbrk+0x20>)
    28d2:	4a01      	ldr	r2, [pc, #4]	; (28d8 <_sbrk+0x1c>)
    28d4:	6011      	str	r1, [r2, #0]
    28d6:	e7f6      	b.n	28c6 <_sbrk+0xa>
    28d8:	200000f4 	.word	0x200000f4
    28dc:	20002258 	.word	0x20002258

000028e0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    28e0:	2001      	movs	r0, #1
    28e2:	4240      	negs	r0, r0
    28e4:	4770      	bx	lr

000028e6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    28e6:	2380      	movs	r3, #128	; 0x80
    28e8:	019b      	lsls	r3, r3, #6
    28ea:	604b      	str	r3, [r1, #4]

	return 0;
}
    28ec:	2000      	movs	r0, #0
    28ee:	4770      	bx	lr

000028f0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28f0:	2001      	movs	r0, #1
    28f2:	4770      	bx	lr

000028f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28f4:	2000      	movs	r0, #0
    28f6:	4770      	bx	lr

000028f8 <HAL_RadioDIO0Callback>:
{
	return port_pin_get_input_level(DIO0_EIC_PIN);
}

static void HAL_RadioDIO0Callback(void)
{
    28f8:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    28fa:	4b03      	ldr	r3, [pc, #12]	; (2908 <HAL_RadioDIO0Callback+0x10>)
    28fc:	681b      	ldr	r3, [r3, #0]
    28fe:	2b00      	cmp	r3, #0
    2900:	d000      	beq.n	2904 <HAL_RadioDIO0Callback+0xc>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
#endif	
    interruptHandlerDio0();
    2902:	4798      	blx	r3
  }    
}
    2904:	bd10      	pop	{r4, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	200000f8 	.word	0x200000f8

0000290c <HAL_RadioDIO1Callback>:
{
	return port_pin_get_input_level(DIO1_EIC_PIN);
}

static void HAL_RadioDIO1Callback(void)
{
    290c:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    290e:	4b03      	ldr	r3, [pc, #12]	; (291c <HAL_RadioDIO1Callback+0x10>)
    2910:	681b      	ldr	r3, [r3, #0]
    2912:	2b00      	cmp	r3, #0
    2914:	d000      	beq.n	2918 <HAL_RadioDIO1Callback+0xc>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
#endif
    interruptHandlerDio1();
    2916:	4798      	blx	r3
  }
}
    2918:	bd10      	pop	{r4, pc}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	200000fc 	.word	0x200000fc

00002920 <HAL_RadioDIO2Callback>:
{
	return port_pin_get_input_level(DIO2_EIC_PIN);
}

static void HAL_RadioDIO2Callback(void)
{
    2920:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    2922:	4b03      	ldr	r3, [pc, #12]	; (2930 <HAL_RadioDIO2Callback+0x10>)
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	2b00      	cmp	r3, #0
    2928:	d000      	beq.n	292c <HAL_RadioDIO2Callback+0xc>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
#endif
    interruptHandlerDio2();
    292a:	4798      	blx	r3
  }
}
    292c:	bd10      	pop	{r4, pc}
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	20000100 	.word	0x20000100

00002934 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    2934:	4b13      	ldr	r3, [pc, #76]	; (2984 <HAL_SPISend+0x50>)
    2936:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    2938:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    293a:	7e1a      	ldrb	r2, [r3, #24]
    293c:	420a      	tst	r2, r1
    293e:	d0fc      	beq.n	293a <HAL_SPISend+0x6>
    2940:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2942:	07d2      	lsls	r2, r2, #31
    2944:	d500      	bpl.n	2948 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2946:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    2948:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    294a:	7e1a      	ldrb	r2, [r3, #24]
    294c:	420a      	tst	r2, r1
    294e:	d0fc      	beq.n	294a <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    2950:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2952:	7e1a      	ldrb	r2, [r3, #24]
    2954:	420a      	tst	r2, r1
    2956:	d0fc      	beq.n	2952 <HAL_SPISend+0x1e>
    2958:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    295a:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    295c:	0752      	lsls	r2, r2, #29
    295e:	d50a      	bpl.n	2976 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2960:	8b5a      	ldrh	r2, [r3, #26]
    2962:	0752      	lsls	r2, r2, #29
    2964:	d501      	bpl.n	296a <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2966:	2204      	movs	r2, #4
    2968:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    296a:	4a06      	ldr	r2, [pc, #24]	; (2984 <HAL_SPISend+0x50>)
    296c:	7992      	ldrb	r2, [r2, #6]
    296e:	2a01      	cmp	r2, #1
    2970:	d003      	beq.n	297a <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2972:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2974:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    2976:	b2c0      	uxtb	r0, r0
}
    2978:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    297a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    297c:	05c0      	lsls	r0, r0, #23
    297e:	0dc0      	lsrs	r0, r0, #23
    2980:	e7f9      	b.n	2976 <HAL_SPISend+0x42>
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	20000104 	.word	0x20000104

00002988 <HAL_ResetPinMakeOutput>:
{
    2988:	b500      	push	{lr}
    298a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    298c:	a901      	add	r1, sp, #4
    298e:	2301      	movs	r3, #1
    2990:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2992:	2200      	movs	r2, #0
    2994:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2996:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    2998:	202f      	movs	r0, #47	; 0x2f
    299a:	4b02      	ldr	r3, [pc, #8]	; (29a4 <HAL_ResetPinMakeOutput+0x1c>)
    299c:	4798      	blx	r3
}
    299e:	b003      	add	sp, #12
    29a0:	bd00      	pop	{pc}
    29a2:	46c0      	nop			; (mov r8, r8)
    29a4:	00000ded 	.word	0x00000ded

000029a8 <HAL_SPICSAssert>:
{
    29a8:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    29aa:	2201      	movs	r2, #1
    29ac:	4902      	ldr	r1, [pc, #8]	; (29b8 <HAL_SPICSAssert+0x10>)
    29ae:	4803      	ldr	r0, [pc, #12]	; (29bc <HAL_SPICSAssert+0x14>)
    29b0:	4b03      	ldr	r3, [pc, #12]	; (29c0 <HAL_SPICSAssert+0x18>)
    29b2:	4798      	blx	r3
}
    29b4:	bd10      	pop	{r4, pc}
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	20000230 	.word	0x20000230
    29bc:	20000104 	.word	0x20000104
    29c0:	00001791 	.word	0x00001791

000029c4 <HAL_SPICSDeassert>:
{
    29c4:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    29c6:	2200      	movs	r2, #0
    29c8:	4902      	ldr	r1, [pc, #8]	; (29d4 <HAL_SPICSDeassert+0x10>)
    29ca:	4803      	ldr	r0, [pc, #12]	; (29d8 <HAL_SPICSDeassert+0x14>)
    29cc:	4b03      	ldr	r3, [pc, #12]	; (29dc <HAL_SPICSDeassert+0x18>)
    29ce:	4798      	blx	r3
}
    29d0:	bd10      	pop	{r4, pc}
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	20000230 	.word	0x20000230
    29d8:	20000104 	.word	0x20000104
    29dc:	00001791 	.word	0x00001791

000029e0 <HAL_RadioInit>:
{
    29e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29e2:	46d6      	mov	lr, sl
    29e4:	464f      	mov	r7, r9
    29e6:	4646      	mov	r6, r8
    29e8:	b5c0      	push	{r6, r7, lr}
    29ea:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    29ec:	ac01      	add	r4, sp, #4
    29ee:	2601      	movs	r6, #1
    29f0:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    29f2:	2500      	movs	r5, #0
    29f4:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    29f6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    29f8:	0021      	movs	r1, r4
    29fa:	2052      	movs	r0, #82	; 0x52
    29fc:	4f52      	ldr	r7, [pc, #328]	; (2b48 <HAL_RadioInit+0x168>)
    29fe:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    2a00:	0021      	movs	r1, r4
    2a02:	203e      	movs	r0, #62	; 0x3e
    2a04:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    2a06:	0021      	movs	r1, r4
    2a08:	203f      	movs	r0, #63	; 0x3f
    2a0a:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    2a0c:	0021      	movs	r1, r4
    2a0e:	202f      	movs	r0, #47	; 0x2f
    2a10:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    2a12:	2280      	movs	r2, #128	; 0x80
    2a14:	02d2      	lsls	r2, r2, #11
    2a16:	4b4d      	ldr	r3, [pc, #308]	; (2b4c <HAL_RadioInit+0x16c>)
    2a18:	619a      	str	r2, [r3, #24]
    2a1a:	4b4d      	ldr	r3, [pc, #308]	; (2b50 <HAL_RadioInit+0x170>)
    2a1c:	2280      	movs	r2, #128	; 0x80
    2a1e:	05d2      	lsls	r2, r2, #23
    2a20:	619a      	str	r2, [r3, #24]
    2a22:	2280      	movs	r2, #128	; 0x80
    2a24:	0612      	lsls	r2, r2, #24
    2a26:	619a      	str	r2, [r3, #24]
    2a28:	2280      	movs	r2, #128	; 0x80
    2a2a:	0212      	lsls	r2, r2, #8
    2a2c:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2a2e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    2a30:	0021      	movs	r1, r4
    2a32:	2053      	movs	r0, #83	; 0x53
    2a34:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    2a36:	ac02      	add	r4, sp, #8
    2a38:	0020      	movs	r0, r4
    2a3a:	4b46      	ldr	r3, [pc, #280]	; (2b54 <HAL_RadioInit+0x174>)
    2a3c:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    2a3e:	2330      	movs	r3, #48	; 0x30
    2a40:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    2a42:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    2a44:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    2a46:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    2a48:	0021      	movs	r1, r4
    2a4a:	2000      	movs	r0, #0
    2a4c:	4b42      	ldr	r3, [pc, #264]	; (2b58 <HAL_RadioInit+0x178>)
    2a4e:	469a      	mov	sl, r3
    2a50:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2a52:	2200      	movs	r2, #0
    2a54:	2100      	movs	r1, #0
    2a56:	4841      	ldr	r0, [pc, #260]	; (2b5c <HAL_RadioInit+0x17c>)
    2a58:	4b41      	ldr	r3, [pc, #260]	; (2b60 <HAL_RadioInit+0x180>)
    2a5a:	4699      	mov	r9, r3
    2a5c:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2a5e:	2100      	movs	r1, #0
    2a60:	2000      	movs	r0, #0
    2a62:	4b40      	ldr	r3, [pc, #256]	; (2b64 <HAL_RadioInit+0x184>)
    2a64:	4698      	mov	r8, r3
    2a66:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    2a68:	230b      	movs	r3, #11
    2a6a:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    2a6c:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    2a6e:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    2a70:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    2a72:	0021      	movs	r1, r4
    2a74:	200b      	movs	r0, #11
    2a76:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2a78:	2200      	movs	r2, #0
    2a7a:	210b      	movs	r1, #11
    2a7c:	483a      	ldr	r0, [pc, #232]	; (2b68 <HAL_RadioInit+0x188>)
    2a7e:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2a80:	2100      	movs	r1, #0
    2a82:	200b      	movs	r0, #11
    2a84:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    2a86:	230c      	movs	r3, #12
    2a88:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    2a8a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    2a8c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    2a8e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    2a90:	0021      	movs	r1, r4
    2a92:	200c      	movs	r0, #12
    2a94:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2a96:	2200      	movs	r2, #0
    2a98:	210c      	movs	r1, #12
    2a9a:	4834      	ldr	r0, [pc, #208]	; (2b6c <HAL_RadioInit+0x18c>)
    2a9c:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2a9e:	2100      	movs	r1, #0
    2aa0:	200c      	movs	r0, #12
    2aa2:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    2aa4:	4b32      	ldr	r3, [pc, #200]	; (2b70 <HAL_RadioInit+0x190>)
    2aa6:	4698      	mov	r8, r3
    2aa8:	233f      	movs	r3, #63	; 0x3f
    2aaa:	4642      	mov	r2, r8
    2aac:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    2aae:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    2ab0:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2ab2:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2ab4:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2ab6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2ab8:	0021      	movs	r1, r4
    2aba:	203f      	movs	r0, #63	; 0x3f
    2abc:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    2abe:	4643      	mov	r3, r8
    2ac0:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    2ac2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2ac4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2ac6:	2900      	cmp	r1, #0
    2ac8:	d104      	bne.n	2ad4 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    2aca:	0953      	lsrs	r3, r2, #5
    2acc:	01db      	lsls	r3, r3, #7
    2ace:	4929      	ldr	r1, [pc, #164]	; (2b74 <HAL_RadioInit+0x194>)
    2ad0:	468c      	mov	ip, r1
    2ad2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2ad4:	211f      	movs	r1, #31
    2ad6:	4011      	ands	r1, r2
    2ad8:	2201      	movs	r2, #1
    2ada:	0010      	movs	r0, r2
    2adc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    2ade:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    2ae0:	ac02      	add	r4, sp, #8
    2ae2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2ae4:	2300      	movs	r3, #0
    2ae6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2ae8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2aea:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2aec:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2aee:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2af0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    2af2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2af4:	3223      	adds	r2, #35	; 0x23
    2af6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2af8:	3a18      	subs	r2, #24
    2afa:	2100      	movs	r1, #0
    2afc:	a808      	add	r0, sp, #32
    2afe:	4b1e      	ldr	r3, [pc, #120]	; (2b78 <HAL_RadioInit+0x198>)
    2b00:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    2b02:	4b1e      	ldr	r3, [pc, #120]	; (2b7c <HAL_RadioInit+0x19c>)
    2b04:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    2b06:	2380      	movs	r3, #128	; 0x80
    2b08:	025b      	lsls	r3, r3, #9
    2b0a:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    2b0c:	4b1c      	ldr	r3, [pc, #112]	; (2b80 <HAL_RadioInit+0x1a0>)
    2b0e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    2b10:	2301      	movs	r3, #1
    2b12:	425b      	negs	r3, r3
    2b14:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    2b16:	4b1b      	ldr	r3, [pc, #108]	; (2b84 <HAL_RadioInit+0x1a4>)
    2b18:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    2b1a:	4b1b      	ldr	r3, [pc, #108]	; (2b88 <HAL_RadioInit+0x1a8>)
    2b1c:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    2b1e:	4d1b      	ldr	r5, [pc, #108]	; (2b8c <HAL_RadioInit+0x1ac>)
    2b20:	0022      	movs	r2, r4
    2b22:	491b      	ldr	r1, [pc, #108]	; (2b90 <HAL_RadioInit+0x1b0>)
    2b24:	0028      	movs	r0, r5
    2b26:	4b1b      	ldr	r3, [pc, #108]	; (2b94 <HAL_RadioInit+0x1b4>)
    2b28:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2b2a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2b2c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d1fc      	bne.n	2b2c <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2b32:	6813      	ldr	r3, [r2, #0]
    2b34:	2102      	movs	r1, #2
    2b36:	430b      	orrs	r3, r1
    2b38:	6013      	str	r3, [r2, #0]
}
    2b3a:	b010      	add	sp, #64	; 0x40
    2b3c:	bc1c      	pop	{r2, r3, r4}
    2b3e:	4690      	mov	r8, r2
    2b40:	4699      	mov	r9, r3
    2b42:	46a2      	mov	sl, r4
    2b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	00000ded 	.word	0x00000ded
    2b4c:	40002900 	.word	0x40002900
    2b50:	40002880 	.word	0x40002880
    2b54:	00000d4d 	.word	0x00000d4d
    2b58:	00000d61 	.word	0x00000d61
    2b5c:	000028f9 	.word	0x000028f9
    2b60:	00000c0d 	.word	0x00000c0d
    2b64:	00000c39 	.word	0x00000c39
    2b68:	0000290d 	.word	0x0000290d
    2b6c:	00002921 	.word	0x00002921
    2b70:	20000230 	.word	0x20000230
    2b74:	40002800 	.word	0x40002800
    2b78:	00003813 	.word	0x00003813
    2b7c:	003d0900 	.word	0x003d0900
    2b80:	00530005 	.word	0x00530005
    2b84:	003e0005 	.word	0x003e0005
    2b88:	00520005 	.word	0x00520005
    2b8c:	20000104 	.word	0x20000104
    2b90:	42001000 	.word	0x42001000
    2b94:	000014b5 	.word	0x000014b5

00002b98 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    2b98:	4b06      	ldr	r3, [pc, #24]	; (2bb4 <HAL_RadioDeInit+0x1c>)
    2b9a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    2b9c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d1fc      	bne.n	2b9c <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2ba2:	338f      	adds	r3, #143	; 0x8f
    2ba4:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2ba6:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2ba8:	6813      	ldr	r3, [r2, #0]
    2baa:	2102      	movs	r1, #2
    2bac:	438b      	bics	r3, r1
    2bae:	6013      	str	r3, [r2, #0]
}
    2bb0:	4770      	bx	lr
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	20000104 	.word	0x20000104

00002bb8 <RADIO_Reset>:
{
    2bb8:	b570      	push	{r4, r5, r6, lr}
    2bba:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    2bbc:	4c0a      	ldr	r4, [pc, #40]	; (2be8 <RADIO_Reset+0x30>)
    2bbe:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    2bc0:	4d0a      	ldr	r5, [pc, #40]	; (2bec <RADIO_Reset+0x34>)
    2bc2:	2680      	movs	r6, #128	; 0x80
    2bc4:	0236      	lsls	r6, r6, #8
    2bc6:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    2bc8:	2001      	movs	r0, #1
    2bca:	4b09      	ldr	r3, [pc, #36]	; (2bf0 <RADIO_Reset+0x38>)
    2bcc:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    2bce:	a901      	add	r1, sp, #4
    2bd0:	2300      	movs	r3, #0
    2bd2:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2bd4:	2201      	movs	r2, #1
    2bd6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2bd8:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    2bda:	202f      	movs	r0, #47	; 0x2f
    2bdc:	4b05      	ldr	r3, [pc, #20]	; (2bf4 <RADIO_Reset+0x3c>)
    2bde:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2be0:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    2be2:	47a0      	blx	r4
}
    2be4:	b002      	add	sp, #8
    2be6:	bd70      	pop	{r4, r5, r6, pc}
    2be8:	00002989 	.word	0x00002989
    2bec:	40002880 	.word	0x40002880
    2bf0:	00002c81 	.word	0x00002c81
    2bf4:	00000ded 	.word	0x00000ded

00002bf8 <RADIO_RegisterWrite>:
{
    2bf8:	b570      	push	{r4, r5, r6, lr}
    2bfa:	0004      	movs	r4, r0
    2bfc:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    2bfe:	4b05      	ldr	r3, [pc, #20]	; (2c14 <RADIO_RegisterWrite+0x1c>)
    2c00:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    2c02:	2080      	movs	r0, #128	; 0x80
    2c04:	4320      	orrs	r0, r4
    2c06:	4c04      	ldr	r4, [pc, #16]	; (2c18 <RADIO_RegisterWrite+0x20>)
    2c08:	47a0      	blx	r4
	HAL_SPISend(value);
    2c0a:	0028      	movs	r0, r5
    2c0c:	47a0      	blx	r4
	HAL_SPICSDeassert();
    2c0e:	4b03      	ldr	r3, [pc, #12]	; (2c1c <RADIO_RegisterWrite+0x24>)
    2c10:	4798      	blx	r3
}
    2c12:	bd70      	pop	{r4, r5, r6, pc}
    2c14:	000029a9 	.word	0x000029a9
    2c18:	00002935 	.word	0x00002935
    2c1c:	000029c5 	.word	0x000029c5

00002c20 <RADIO_RegisterRead>:
{
    2c20:	b510      	push	{r4, lr}
    2c22:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    2c24:	4b06      	ldr	r3, [pc, #24]	; (2c40 <RADIO_RegisterRead+0x20>)
    2c26:	4798      	blx	r3
	HAL_SPISend(reg);
    2c28:	207f      	movs	r0, #127	; 0x7f
    2c2a:	4020      	ands	r0, r4
    2c2c:	4c05      	ldr	r4, [pc, #20]	; (2c44 <RADIO_RegisterRead+0x24>)
    2c2e:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    2c30:	20ff      	movs	r0, #255	; 0xff
    2c32:	47a0      	blx	r4
    2c34:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    2c36:	4b04      	ldr	r3, [pc, #16]	; (2c48 <RADIO_RegisterRead+0x28>)
    2c38:	4798      	blx	r3
}
    2c3a:	0020      	movs	r0, r4
    2c3c:	bd10      	pop	{r4, pc}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	000029a9 	.word	0x000029a9
    2c44:	00002935 	.word	0x00002935
    2c48:	000029c5 	.word	0x000029c5

00002c4c <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    2c4c:	b510      	push	{r4, lr}
    2c4e:	2208      	movs	r2, #8
    2c50:	4b02      	ldr	r3, [pc, #8]	; (2c5c <HAL_TCXOPowerOn+0x10>)
    2c52:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    2c54:	2002      	movs	r0, #2
    2c56:	4b02      	ldr	r3, [pc, #8]	; (2c60 <HAL_TCXOPowerOn+0x14>)
    2c58:	4798      	blx	r3
#endif
}
    2c5a:	bd10      	pop	{r4, pc}
    2c5c:	40002880 	.word	0x40002880
    2c60:	00000181 	.word	0x00000181

00002c64 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    2c64:	2208      	movs	r2, #8
    2c66:	4b01      	ldr	r3, [pc, #4]	; (2c6c <HAL_TCXOPowerOff+0x8>)
    2c68:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    2c6a:	4770      	bx	lr
    2c6c:	40002880 	.word	0x40002880

00002c70 <HAL_RFSWPowerOff>:
    2c70:	2280      	movs	r2, #128	; 0x80
    2c72:	0552      	lsls	r2, r2, #21
    2c74:	4b01      	ldr	r3, [pc, #4]	; (2c7c <HAL_RFSWPowerOff+0xc>)
    2c76:	615a      	str	r2, [r3, #20]
void HAL_RFSWPowerOff(void)
{
	port_pin_set_output_level(RFSW_PWR_PIN, RFSW_PWR_INACTIVE);
}
    2c78:	4770      	bx	lr
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	40002800 	.word	0x40002800

00002c80 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    2c80:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    2c82:	2800      	cmp	r0, #0
    2c84:	d103      	bne.n	2c8e <SystemBlockingWaitMs+0xe>
    2c86:	2001      	movs	r0, #1
    2c88:	4b02      	ldr	r3, [pc, #8]	; (2c94 <SystemBlockingWaitMs+0x14>)
    2c8a:	4798      	blx	r3
#endif
}
    2c8c:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    2c8e:	4b02      	ldr	r3, [pc, #8]	; (2c98 <SystemBlockingWaitMs+0x18>)
    2c90:	4798      	blx	r3
    2c92:	e7fb      	b.n	2c8c <SystemBlockingWaitMs+0xc>
    2c94:	00000155 	.word	0x00000155
    2c98:	00000181 	.word	0x00000181

00002c9c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2c9c:	b570      	push	{r4, r5, r6, lr}
    2c9e:	b082      	sub	sp, #8
    2ca0:	0005      	movs	r5, r0
    2ca2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2ca4:	2200      	movs	r2, #0
    2ca6:	466b      	mov	r3, sp
    2ca8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2caa:	4c06      	ldr	r4, [pc, #24]	; (2cc4 <usart_serial_getchar+0x28>)
    2cac:	466b      	mov	r3, sp
    2cae:	1d99      	adds	r1, r3, #6
    2cb0:	0028      	movs	r0, r5
    2cb2:	47a0      	blx	r4
    2cb4:	2800      	cmp	r0, #0
    2cb6:	d1f9      	bne.n	2cac <usart_serial_getchar+0x10>

	*c = temp;
    2cb8:	466b      	mov	r3, sp
    2cba:	3306      	adds	r3, #6
    2cbc:	881b      	ldrh	r3, [r3, #0]
    2cbe:	7033      	strb	r3, [r6, #0]
}
    2cc0:	b002      	add	sp, #8
    2cc2:	bd70      	pop	{r4, r5, r6, pc}
    2cc4:	00001c0f 	.word	0x00001c0f

00002cc8 <led_toggle_indication>:

/**
 * \brief Toggles LED as an indication.
 */
static void led_toggle_indication(uint32_t count)
{
    2cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cca:	46ce      	mov	lr, r9
    2ccc:	4647      	mov	r7, r8
    2cce:	b580      	push	{r7, lr}
    2cd0:	1e07      	subs	r7, r0, #0
	for (uint32_t i = 0; i < count; i++) {
    2cd2:	d011      	beq.n	2cf8 <led_toggle_indication+0x30>
    2cd4:	2400      	movs	r4, #0
    2cd6:	4e0c      	ldr	r6, [pc, #48]	; (2d08 <led_toggle_indication+0x40>)
    2cd8:	2380      	movs	r3, #128	; 0x80
    2cda:	009b      	lsls	r3, r3, #2
    2cdc:	4698      	mov	r8, r3
    2cde:	4699      	mov	r9, r3
    2ce0:	464b      	mov	r3, r9
    2ce2:	6173      	str	r3, [r6, #20]
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		delay_ms(LED0_TOGGLE_TIME);
    2ce4:	20c8      	movs	r0, #200	; 0xc8
    2ce6:	4d09      	ldr	r5, [pc, #36]	; (2d0c <led_toggle_indication+0x44>)
    2ce8:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    2cea:	4643      	mov	r3, r8
    2cec:	61b3      	str	r3, [r6, #24]
		port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
		delay_ms(LED0_TOGGLE_TIME);
    2cee:	20c8      	movs	r0, #200	; 0xc8
    2cf0:	47a8      	blx	r5
	for (uint32_t i = 0; i < count; i++) {
    2cf2:	3401      	adds	r4, #1
    2cf4:	42a7      	cmp	r7, r4
    2cf6:	d1f3      	bne.n	2ce0 <led_toggle_indication+0x18>
    2cf8:	2280      	movs	r2, #128	; 0x80
    2cfa:	0092      	lsls	r2, r2, #2
    2cfc:	4b02      	ldr	r3, [pc, #8]	; (2d08 <led_toggle_indication+0x40>)
    2cfe:	619a      	str	r2, [r3, #24]
	}
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}
    2d00:	bc0c      	pop	{r2, r3}
    2d02:	4690      	mov	r8, r2
    2d04:	4699      	mov	r9, r3
    2d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d08:	40002800 	.word	0x40002800
    2d0c:	00000181 	.word	0x00000181

00002d10 <dma_callback>:
{
    2d10:	b510      	push	{r4, lr}
	printf("DMA interrupt occurs\r\n");
    2d12:	4802      	ldr	r0, [pc, #8]	; (2d1c <dma_callback+0xc>)
    2d14:	4b02      	ldr	r3, [pc, #8]	; (2d20 <dma_callback+0x10>)
    2d16:	4798      	blx	r3
}
    2d18:	bd10      	pop	{r4, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	00004ac8 	.word	0x00004ac8
    2d20:	00003919 	.word	0x00003919

00002d24 <usart_serial_putchar>:
{
    2d24:	b570      	push	{r4, r5, r6, lr}
    2d26:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2d28:	b28c      	uxth	r4, r1
    2d2a:	4e03      	ldr	r6, [pc, #12]	; (2d38 <usart_serial_putchar+0x14>)
    2d2c:	0021      	movs	r1, r4
    2d2e:	0028      	movs	r0, r5
    2d30:	47b0      	blx	r6
    2d32:	2800      	cmp	r0, #0
    2d34:	d1fa      	bne.n	2d2c <usart_serial_putchar+0x8>
}
    2d36:	bd70      	pop	{r4, r5, r6, pc}
    2d38:	00001be9 	.word	0x00001be9

00002d3c <configure_usart>:
{
    2d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d3e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2d40:	2380      	movs	r3, #128	; 0x80
    2d42:	05db      	lsls	r3, r3, #23
    2d44:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2d46:	2300      	movs	r3, #0
    2d48:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2d4a:	22ff      	movs	r2, #255	; 0xff
    2d4c:	4669      	mov	r1, sp
    2d4e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2d50:	2200      	movs	r2, #0
    2d52:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2d54:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2d56:	2401      	movs	r4, #1
    2d58:	2124      	movs	r1, #36	; 0x24
    2d5a:	4668      	mov	r0, sp
    2d5c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2d5e:	3101      	adds	r1, #1
    2d60:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2d62:	3101      	adds	r1, #1
    2d64:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2d66:	3101      	adds	r1, #1
    2d68:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2d6a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2d6c:	3105      	adds	r1, #5
    2d6e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2d70:	3101      	adds	r1, #1
    2d72:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2d74:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2d76:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2d78:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2d7a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2d7c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2d7e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2d80:	2313      	movs	r3, #19
    2d82:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2d84:	7742      	strb	r2, [r0, #29]
	config_usart.baudrate    = CONF_STDIO_BAUDRATE;
    2d86:	23e1      	movs	r3, #225	; 0xe1
    2d88:	025b      	lsls	r3, r3, #9
    2d8a:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = CONF_STDIO_MUX_SETTING;
    2d8c:	2380      	movs	r3, #128	; 0x80
    2d8e:	035b      	lsls	r3, r3, #13
    2d90:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    2d92:	4b1a      	ldr	r3, [pc, #104]	; (2dfc <configure_usart+0xc0>)
    2d94:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    2d96:	4b1a      	ldr	r3, [pc, #104]	; (2e00 <configure_usart+0xc4>)
    2d98:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    2d9a:	2301      	movs	r3, #1
    2d9c:	425b      	negs	r3, r3
    2d9e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    2da0:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2da2:	4d18      	ldr	r5, [pc, #96]	; (2e04 <configure_usart+0xc8>)
    2da4:	4b18      	ldr	r3, [pc, #96]	; (2e08 <configure_usart+0xcc>)
    2da6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2da8:	4a18      	ldr	r2, [pc, #96]	; (2e0c <configure_usart+0xd0>)
    2daa:	4b19      	ldr	r3, [pc, #100]	; (2e10 <configure_usart+0xd4>)
    2dac:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2dae:	4a19      	ldr	r2, [pc, #100]	; (2e14 <configure_usart+0xd8>)
    2db0:	4b19      	ldr	r3, [pc, #100]	; (2e18 <configure_usart+0xdc>)
    2db2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2db4:	466a      	mov	r2, sp
    2db6:	2184      	movs	r1, #132	; 0x84
    2db8:	05c9      	lsls	r1, r1, #23
    2dba:	0028      	movs	r0, r5
    2dbc:	4b17      	ldr	r3, [pc, #92]	; (2e1c <configure_usart+0xe0>)
    2dbe:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2dc0:	4f17      	ldr	r7, [pc, #92]	; (2e20 <configure_usart+0xe4>)
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	6898      	ldr	r0, [r3, #8]
    2dc6:	2100      	movs	r1, #0
    2dc8:	4e16      	ldr	r6, [pc, #88]	; (2e24 <configure_usart+0xe8>)
    2dca:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2dcc:	683b      	ldr	r3, [r7, #0]
    2dce:	6858      	ldr	r0, [r3, #4]
    2dd0:	2100      	movs	r1, #0
    2dd2:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2dd4:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2dd6:	0030      	movs	r0, r6
    2dd8:	4b13      	ldr	r3, [pc, #76]	; (2e28 <configure_usart+0xec>)
    2dda:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ddc:	231f      	movs	r3, #31
    2dde:	4018      	ands	r0, r3
    2de0:	4084      	lsls	r4, r0
    2de2:	4b12      	ldr	r3, [pc, #72]	; (2e2c <configure_usart+0xf0>)
    2de4:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2de6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2de8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2dea:	2b00      	cmp	r3, #0
    2dec:	d1fc      	bne.n	2de8 <configure_usart+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2dee:	6833      	ldr	r3, [r6, #0]
    2df0:	2202      	movs	r2, #2
    2df2:	4313      	orrs	r3, r2
    2df4:	6033      	str	r3, [r6, #0]
}
    2df6:	b011      	add	sp, #68	; 0x44
    2df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	00040003 	.word	0x00040003
    2e00:	00050003 	.word	0x00050003
    2e04:	20000170 	.word	0x20000170
    2e08:	2000022c 	.word	0x2000022c
    2e0c:	00002d25 	.word	0x00002d25
    2e10:	20000228 	.word	0x20000228
    2e14:	00002c9d 	.word	0x00002c9d
    2e18:	20000224 	.word	0x20000224
    2e1c:	00001885 	.word	0x00001885
    2e20:	2000002c 	.word	0x2000002c
    2e24:	0000392d 	.word	0x0000392d
    2e28:	00001425 	.word	0x00001425
    2e2c:	e000e100 	.word	0xe000e100

00002e30 <test_active_mode>:

/**
 * \brief Active mode test case.
 */
static void test_active_mode(const enum system_performance_level performance_level)
{
    2e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e32:	46c6      	mov	lr, r8
    2e34:	b500      	push	{lr}
    2e36:	b08a      	sub	sp, #40	; 0x28
    2e38:	0004      	movs	r4, r0
 *
 * \return Current performance level.
 */
static inline enum system_performance_level system_get_performance_level(void)
{
	return (enum system_performance_level)PM->PLCFG.reg;
    2e3a:	2380      	movs	r3, #128	; 0x80
    2e3c:	05db      	lsls	r3, r3, #23
    2e3e:	789d      	ldrb	r5, [r3, #2]
    2e40:	b2ed      	uxtb	r5, r5

	enum system_performance_level curr_pl = system_get_performance_level();

	printf("System will switch to PL:%d \r\n",performance_level);
    2e42:	0001      	movs	r1, r0
    2e44:	485b      	ldr	r0, [pc, #364]	; (2fb4 <test_active_mode+0x184>)
    2e46:	4b5c      	ldr	r3, [pc, #368]	; (2fb8 <test_active_mode+0x188>)
    2e48:	4798      	blx	r3
	if (curr_pl == performance_level) {
    2e4a:	42ac      	cmp	r4, r5
    2e4c:	d06c      	beq.n	2f28 <test_active_mode+0xf8>
		return ;
	}

	if (curr_pl < performance_level) {
    2e4e:	d800      	bhi.n	2e52 <test_active_mode+0x22>
    2e50:	e06e      	b.n	2f30 <test_active_mode+0x100>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2e52:	2380      	movs	r3, #128	; 0x80
    2e54:	05db      	lsls	r3, r3, #23
    2e56:	789b      	ldrb	r3, [r3, #2]
    2e58:	b2db      	uxtb	r3, r3
    2e5a:	429c      	cmp	r4, r3
    2e5c:	d00e      	beq.n	2e7c <test_active_mode+0x4c>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2e5e:	2380      	movs	r3, #128	; 0x80
    2e60:	05db      	lsls	r3, r3, #23
    2e62:	789b      	ldrb	r3, [r3, #2]
    2e64:	b25b      	sxtb	r3, r3
    2e66:	2b00      	cmp	r3, #0
    2e68:	db08      	blt.n	2e7c <test_active_mode+0x4c>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2e6a:	2380      	movs	r3, #128	; 0x80
    2e6c:	05db      	lsls	r3, r3, #23
    2e6e:	2201      	movs	r2, #1
    2e70:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    2e72:	709c      	strb	r4, [r3, #2]
	while (!PM->INTFLAG.reg) {
    2e74:	001a      	movs	r2, r3
    2e76:	7993      	ldrb	r3, [r2, #6]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d0fc      	beq.n	2e76 <test_active_mode+0x46>
	config->division_factor    = 1;
    2e7c:	ac02      	add	r4, sp, #8
    2e7e:	2601      	movs	r6, #1
    2e80:	9603      	str	r6, [sp, #12]
	config->high_when_disabled = false;
    2e82:	2500      	movs	r5, #0
    2e84:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    2e86:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2e88:	7265      	strb	r5, [r4, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_XOSC32K;
    2e8a:	2305      	movs	r3, #5
    2e8c:	4698      	mov	r8, r3
    2e8e:	7023      	strb	r3, [r4, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2e90:	0021      	movs	r1, r4
    2e92:	2000      	movs	r0, #0
    2e94:	4f49      	ldr	r7, [pc, #292]	; (2fbc <test_active_mode+0x18c>)
    2e96:	47b8      	blx	r7
	config->division_factor    = 1;
    2e98:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2e9a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    2e9c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2e9e:	7265      	strb	r5, [r4, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_XOSC32K;
    2ea0:	4643      	mov	r3, r8
    2ea2:	7023      	strb	r3, [r4, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_1, &gclk_conf);
    2ea4:	0021      	movs	r1, r4
    2ea6:	2001      	movs	r0, #1
    2ea8:	47b8      	blx	r7
	system_gclk_gen_enable(GCLK_GENERATOR_1);
    2eaa:	2001      	movs	r0, #1
    2eac:	4b44      	ldr	r3, [pc, #272]	; (2fc0 <test_active_mode+0x190>)
    2eae:	4798      	blx	r3
	dfll_gclk_chan_conf.source_generator = GCLK_GENERATOR_1;
    2eb0:	a901      	add	r1, sp, #4
    2eb2:	700e      	strb	r6, [r1, #0]
	system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2eb4:	2000      	movs	r0, #0
    2eb6:	4b43      	ldr	r3, [pc, #268]	; (2fc4 <test_active_mode+0x194>)
    2eb8:	4798      	blx	r3
	system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    2eba:	2000      	movs	r0, #0
    2ebc:	4b42      	ldr	r3, [pc, #264]	; (2fc8 <test_active_mode+0x198>)
    2ebe:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2ec0:	a805      	add	r0, sp, #20
    2ec2:	2300      	movs	r3, #0
    2ec4:	8085      	strh	r5, [r0, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2ec6:	80c5      	strh	r5, [r0, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2ec8:	7203      	strb	r3, [r0, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2eca:	7243      	strb	r3, [r0, #9]
	config->run_in_stanby   = false;
    2ecc:	7083      	strb	r3, [r0, #2]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    2ece:	2207      	movs	r2, #7
    2ed0:	7282      	strb	r2, [r0, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2ed2:	3238      	adds	r2, #56	; 0x38
    2ed4:	8182      	strh	r2, [r0, #12]
	config->coarse_max_step = 1;
    2ed6:	7386      	strb	r6, [r0, #14]
	config->fine_max_step   = 1;
    2ed8:	8206      	strh	r6, [r0, #16]
	dfll_conf.loop_mode      = SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED;
    2eda:	3a3b      	subs	r2, #59	; 0x3b
    2edc:	7002      	strb	r2, [r0, #0]
	dfll_conf.on_demand      = false;
    2ede:	7043      	strb	r3, [r0, #1]
	dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2ee0:	23b7      	movs	r3, #183	; 0xb7
    2ee2:	00db      	lsls	r3, r3, #3
    2ee4:	8243      	strh	r3, [r0, #18]
	system_clock_source_dfll_set_config(&dfll_conf);
    2ee6:	4b39      	ldr	r3, [pc, #228]	; (2fcc <test_active_mode+0x19c>)
    2ee8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2eea:	2007      	movs	r0, #7
    2eec:	4b38      	ldr	r3, [pc, #224]	; (2fd0 <test_active_mode+0x1a0>)
    2eee:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2ef0:	4c38      	ldr	r4, [pc, #224]	; (2fd4 <test_active_mode+0x1a4>)
    2ef2:	2007      	movs	r0, #7
    2ef4:	47a0      	blx	r4
    2ef6:	2800      	cmp	r0, #0
    2ef8:	d0fb      	beq.n	2ef2 <test_active_mode+0xc2>
		OSCCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2efa:	4a37      	ldr	r2, [pc, #220]	; (2fd8 <test_active_mode+0x1a8>)
    2efc:	8b13      	ldrh	r3, [r2, #24]
    2efe:	2180      	movs	r1, #128	; 0x80
    2f00:	430b      	orrs	r3, r1
    2f02:	8313      	strh	r3, [r2, #24]
	config->division_factor    = 1;
    2f04:	a902      	add	r1, sp, #8
    2f06:	2301      	movs	r3, #1
    2f08:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2f0a:	2300      	movs	r3, #0
    2f0c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2f0e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2f10:	724b      	strb	r3, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_DFLL;
    2f12:	3307      	adds	r3, #7
    2f14:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2f16:	2000      	movs	r0, #0
    2f18:	4b28      	ldr	r3, [pc, #160]	; (2fbc <test_active_mode+0x18c>)
    2f1a:	4798      	blx	r3
		system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2f1c:	2006      	movs	r0, #6
    2f1e:	4b2f      	ldr	r3, [pc, #188]	; (2fdc <test_active_mode+0x1ac>)
    2f20:	4798      	blx	r3
		main_clock_select(SYSTEM_CLOCK_SOURCE_OSC16M);
		system_switch_performance_level(performance_level);
	}

	/* Toggles LED0 once clock frequency successfully */
	led_toggle_indication(LED0_TOGGLE_2);
    2f22:	2002      	movs	r0, #2
    2f24:	4b2e      	ldr	r3, [pc, #184]	; (2fe0 <test_active_mode+0x1b0>)
    2f26:	4798      	blx	r3
}
    2f28:	b00a      	add	sp, #40	; 0x28
    2f2a:	bc04      	pop	{r2}
    2f2c:	4690      	mov	r8, r2
    2f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osc16m_conf.fsel = CONF_CLOCK_OSC16M_FREQ_SEL;
    2f30:	a802      	add	r0, sp, #8
    2f32:	2302      	movs	r3, #2
    2f34:	7003      	strb	r3, [r0, #0]
	osc16m_conf.on_demand = 0;
    2f36:	2300      	movs	r3, #0
    2f38:	7083      	strb	r3, [r0, #2]
	osc16m_conf.run_in_standby = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    2f3a:	3301      	adds	r3, #1
    2f3c:	7043      	strb	r3, [r0, #1]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    2f3e:	4b29      	ldr	r3, [pc, #164]	; (2fe4 <test_active_mode+0x1b4>)
    2f40:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2f42:	2006      	movs	r0, #6
    2f44:	4b22      	ldr	r3, [pc, #136]	; (2fd0 <test_active_mode+0x1a0>)
    2f46:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    2f48:	4d22      	ldr	r5, [pc, #136]	; (2fd4 <test_active_mode+0x1a4>)
    2f4a:	2006      	movs	r0, #6
    2f4c:	47a8      	blx	r5
    2f4e:	2800      	cmp	r0, #0
    2f50:	d0fb      	beq.n	2f4a <test_active_mode+0x11a>
	config->division_factor    = 1;
    2f52:	a905      	add	r1, sp, #20
    2f54:	2301      	movs	r3, #1
    2f56:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2f58:	2300      	movs	r3, #0
    2f5a:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2f5c:	2206      	movs	r2, #6
    2f5e:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    2f60:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2f62:	724b      	strb	r3, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2f64:	2000      	movs	r0, #0
    2f66:	4b15      	ldr	r3, [pc, #84]	; (2fbc <test_active_mode+0x18c>)
    2f68:	4798      	blx	r3
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    2f6a:	4a1b      	ldr	r2, [pc, #108]	; (2fd8 <test_active_mode+0x1a8>)
    2f6c:	7d13      	ldrb	r3, [r2, #20]
    2f6e:	2180      	movs	r1, #128	; 0x80
    2f70:	430b      	orrs	r3, r1
    2f72:	7513      	strb	r3, [r2, #20]
		system_clock_source_disable(SYSTEM_CLOCK_SOURCE_DFLL);
    2f74:	2007      	movs	r0, #7
    2f76:	4b19      	ldr	r3, [pc, #100]	; (2fdc <test_active_mode+0x1ac>)
    2f78:	4798      	blx	r3
		system_gclk_chan_disable(OSCCTRL_GCLK_ID_DFLL48);
    2f7a:	2000      	movs	r0, #0
    2f7c:	4b1a      	ldr	r3, [pc, #104]	; (2fe8 <test_active_mode+0x1b8>)
    2f7e:	4798      	blx	r3
		system_gclk_gen_disable(GCLK_GENERATOR_1);
    2f80:	2001      	movs	r0, #1
    2f82:	4b1a      	ldr	r3, [pc, #104]	; (2fec <test_active_mode+0x1bc>)
    2f84:	4798      	blx	r3
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2f86:	2380      	movs	r3, #128	; 0x80
    2f88:	05db      	lsls	r3, r3, #23
    2f8a:	789b      	ldrb	r3, [r3, #2]
    2f8c:	b2db      	uxtb	r3, r3
    2f8e:	429c      	cmp	r4, r3
    2f90:	d0c7      	beq.n	2f22 <test_active_mode+0xf2>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2f92:	2380      	movs	r3, #128	; 0x80
    2f94:	05db      	lsls	r3, r3, #23
    2f96:	789b      	ldrb	r3, [r3, #2]
    2f98:	b25b      	sxtb	r3, r3
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	dbc1      	blt.n	2f22 <test_active_mode+0xf2>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2f9e:	2380      	movs	r3, #128	; 0x80
    2fa0:	05db      	lsls	r3, r3, #23
    2fa2:	2201      	movs	r2, #1
    2fa4:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    2fa6:	709c      	strb	r4, [r3, #2]
	while (!PM->INTFLAG.reg) {
    2fa8:	001a      	movs	r2, r3
    2faa:	7993      	ldrb	r3, [r2, #6]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d0fc      	beq.n	2faa <test_active_mode+0x17a>
    2fb0:	e7b7      	b.n	2f22 <test_active_mode+0xf2>
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	00004dc4 	.word	0x00004dc4
    2fb8:	00003825 	.word	0x00003825
    2fbc:	00002369 	.word	0x00002369
    2fc0:	00002415 	.word	0x00002415
    2fc4:	0000257d 	.word	0x0000257d
    2fc8:	0000250d 	.word	0x0000250d
    2fcc:	00001f71 	.word	0x00001f71
    2fd0:	00001ff9 	.word	0x00001ff9
    2fd4:	00002135 	.word	0x00002135
    2fd8:	40000c00 	.word	0x40000c00
    2fdc:	000020b5 	.word	0x000020b5
    2fe0:	00002cc9 	.word	0x00002cc9
    2fe4:	00001ea1 	.word	0x00001ea1
    2fe8:	00002545 	.word	0x00002545
    2fec:	00002455 	.word	0x00002455

00002ff0 <main>:
	 /* Disable the SPI interface */
	 HAL_RadioDeInit();	
}

int main(void)
{
    2ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ff2:	46de      	mov	lr, fp
    2ff4:	4657      	mov	r7, sl
    2ff6:	464e      	mov	r6, r9
    2ff8:	4645      	mov	r5, r8
    2ffa:	b5e0      	push	{r5, r6, r7, lr}
    2ffc:	b091      	sub	sp, #68	; 0x44

	uint16_t key = 0;
    2ffe:	2200      	movs	r2, #0
    3000:	233e      	movs	r3, #62	; 0x3e
    3002:	446b      	add	r3, sp
    3004:	801a      	strh	r2, [r3, #0]

	/* Initialize clock system */
	system_init();
    3006:	4bdc      	ldr	r3, [pc, #880]	; (3378 <main+0x388>)
    3008:	4798      	blx	r3

	/* BOD33 disabled */
	SUPC->BOD33.reg &= ~SUPC_BOD33_ENABLE;
    300a:	4adc      	ldr	r2, [pc, #880]	; (337c <main+0x38c>)
    300c:	6913      	ldr	r3, [r2, #16]
    300e:	2102      	movs	r1, #2
    3010:	438b      	bics	r3, r1
    3012:	6113      	str	r3, [r2, #16]
#if !(SAMR34 || SAMR35)
	/* VDDCORE is supplied BUCK converter */
	SUPC->VREG.bit.SEL = SUPC_VREG_SEL_BUCK_Val;
#endif
    
	delay_init();
    3014:	4bda      	ldr	r3, [pc, #872]	; (3380 <main+0x390>)
    3016:	4798      	blx	r3
	HAL_RadioInit();
    3018:	4bda      	ldr	r3, [pc, #872]	; (3384 <main+0x394>)
    301a:	4798      	blx	r3
	HAL_TCXOPowerOn();
    301c:	4bda      	ldr	r3, [pc, #872]	; (3388 <main+0x398>)
    301e:	4798      	blx	r3
	RADIO_Reset();
    3020:	4bda      	ldr	r3, [pc, #872]	; (338c <main+0x39c>)
    3022:	4798      	blx	r3
	op_mode = RADIO_RegisterRead(OPMODE_REG);
    3024:	2001      	movs	r0, #1
    3026:	4bda      	ldr	r3, [pc, #872]	; (3390 <main+0x3a0>)
    3028:	4798      	blx	r3
	if (new_mode != current_mode)
    302a:	0743      	lsls	r3, r0, #29
    302c:	d00b      	beq.n	3046 <main+0x56>
		op_mode &= ~0x07;                // Clear old mode bits
    302e:	24f8      	movs	r4, #248	; 0xf8
    3030:	4004      	ands	r4, r0
		while (op_mode != RADIO_RegisterRead(OPMODE_REG))
    3032:	4dd7      	ldr	r5, [pc, #860]	; (3390 <main+0x3a0>)
    3034:	e003      	b.n	303e <main+0x4e>
			RADIO_RegisterWrite(OPMODE_REG, op_mode);
    3036:	0021      	movs	r1, r4
    3038:	2001      	movs	r0, #1
    303a:	4bd6      	ldr	r3, [pc, #856]	; (3394 <main+0x3a4>)
    303c:	4798      	blx	r3
		while (op_mode != RADIO_RegisterRead(OPMODE_REG))
    303e:	2001      	movs	r0, #1
    3040:	47a8      	blx	r5
    3042:	4284      	cmp	r4, r0
    3044:	d1f7      	bne.n	3036 <main+0x46>
	 HAL_TCXOPowerOff();
    3046:	4bd4      	ldr	r3, [pc, #848]	; (3398 <main+0x3a8>)
    3048:	4798      	blx	r3
	 HAL_RFSWPowerOff();
    304a:	4bd4      	ldr	r3, [pc, #848]	; (339c <main+0x3ac>)
    304c:	4798      	blx	r3
	 HAL_RadioDeInit();	
    304e:	4bd4      	ldr	r3, [pc, #848]	; (33a0 <main+0x3b0>)
    3050:	4798      	blx	r3
	
	/* Make SX1276 radio to sleep */
	put_radio_to_sleep();
		
    /* Configure Serial communication */
	configure_usart();
    3052:	4bd4      	ldr	r3, [pc, #848]	; (33a4 <main+0x3b4>)
    3054:	4798      	blx	r3
    3056:	2280      	movs	r2, #128	; 0x80
    3058:	0092      	lsls	r2, r2, #2
    305a:	4bd3      	ldr	r3, [pc, #844]	; (33a8 <main+0x3b8>)
    305c:	619a      	str	r2, [r3, #24]
	printf("\n\r");
    305e:	4bd3      	ldr	r3, [pc, #844]	; (33ac <main+0x3bc>)
    3060:	4698      	mov	r8, r3
    3062:	4dd3      	ldr	r5, [pc, #844]	; (33b0 <main+0x3c0>)
	/* Turn LED0 ON */
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	while (true) {
		display_menu();
		while (usart_read_wait(&usart_instance, &key)) {
    3064:	243e      	movs	r4, #62	; 0x3e
    3066:	446c      	add	r4, sp
    3068:	e023      	b.n	30b2 <main+0xc2>
		}
		printf("\r\nYou input :%c\r\n",key);
		switch (key) {
		case 'a':
			test_active_mode(SYSTEM_PERFORMANCE_LEVEL_0);
    306a:	2000      	movs	r0, #0
    306c:	4bd1      	ldr	r3, [pc, #836]	; (33b4 <main+0x3c4>)
    306e:	4798      	blx	r3
			test_off_mode();
			break;
		default:
			break;
		}
		if (key == 'q') {
    3070:	8823      	ldrh	r3, [r4, #0]
    3072:	2b71      	cmp	r3, #113	; 0x71
    3074:	d100      	bne.n	3078 <main+0x88>
    3076:	e0bc      	b.n	31f2 <main+0x202>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3078:	4fcf      	ldr	r7, [pc, #828]	; (33b8 <main+0x3c8>)
    307a:	683e      	ldr	r6, [r7, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    307c:	0030      	movs	r0, r6
    307e:	4bcf      	ldr	r3, [pc, #828]	; (33bc <main+0x3cc>)
    3080:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3082:	231f      	movs	r3, #31
    3084:	4018      	ands	r0, r3
    3086:	3b1e      	subs	r3, #30
    3088:	4083      	lsls	r3, r0
    308a:	2280      	movs	r2, #128	; 0x80
    308c:	49cc      	ldr	r1, [pc, #816]	; (33c0 <main+0x3d0>)
    308e:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3090:	683a      	ldr	r2, [r7, #0]
	return (usart_hw->SYNCBUSY.reg);
    3092:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3094:	2b00      	cmp	r3, #0
    3096:	d1fc      	bne.n	3092 <main+0xa2>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3098:	6833      	ldr	r3, [r6, #0]
    309a:	2202      	movs	r2, #2
    309c:	4393      	bics	r3, r2
    309e:	6033      	str	r3, [r6, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    30a0:	4bc5      	ldr	r3, [pc, #788]	; (33b8 <main+0x3c8>)
    30a2:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    30a4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    30a6:	2b00      	cmp	r3, #0
    30a8:	d1fc      	bne.n	30a4 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    30aa:	3301      	adds	r3, #1
    30ac:	6033      	str	r3, [r6, #0]
			break;
		}
		usart_reset(&usart_instance);
		configure_usart();
    30ae:	4bbd      	ldr	r3, [pc, #756]	; (33a4 <main+0x3b4>)
    30b0:	4798      	blx	r3
	printf("\n\r");
    30b2:	4640      	mov	r0, r8
    30b4:	47a8      	blx	r5
	printf("===============================================\n\r");
    30b6:	4ec3      	ldr	r6, [pc, #780]	; (33c4 <main+0x3d4>)
    30b8:	0030      	movs	r0, r6
    30ba:	47a8      	blx	r5
	printf("Menu: press a key to continue.\n\r");
    30bc:	48c2      	ldr	r0, [pc, #776]	; (33c8 <main+0x3d8>)
    30be:	47a8      	blx	r5
	printf("===============================================\n\r");
    30c0:	0030      	movs	r0, r6
    30c2:	47a8      	blx	r5
	printf("  a : ACTIVE mode: Performance Level 0 at 12MHz\n\r");
    30c4:	48c1      	ldr	r0, [pc, #772]	; (33cc <main+0x3dc>)
    30c6:	47a8      	blx	r5
	printf("  b : ACTIVE mode: Performance Level 2 at 48MHz\n\r");
    30c8:	48c1      	ldr	r0, [pc, #772]	; (33d0 <main+0x3e0>)
    30ca:	47a8      	blx	r5
	printf("  c : IDLE mode: Performance Level 0 at 12MHz\n\r");
    30cc:	48c1      	ldr	r0, [pc, #772]	; (33d4 <main+0x3e4>)
    30ce:	47a8      	blx	r5
	printf("  d : STANDBY mode:PD0,PD1 and PD2 in retention state\n\r");
    30d0:	48c1      	ldr	r0, [pc, #772]	; (33d8 <main+0x3e8>)
    30d2:	47a8      	blx	r5
	printf("  e : BACKUP mode\n\r");
    30d4:	48c1      	ldr	r0, [pc, #772]	; (33dc <main+0x3ec>)
    30d6:	47a8      	blx	r5
	printf("  f : OFF mode\n\r");
    30d8:	48c1      	ldr	r0, [pc, #772]	; (33e0 <main+0x3f0>)
    30da:	47a8      	blx	r5
	printf("  q : Enter dynamic power gating example\n\r");
    30dc:	48c1      	ldr	r0, [pc, #772]	; (33e4 <main+0x3f4>)
    30de:	47a8      	blx	r5
	printf("-----------------------------------------------\n\r");
    30e0:	48c1      	ldr	r0, [pc, #772]	; (33e8 <main+0x3f8>)
    30e2:	47a8      	blx	r5
	printf(">>");
    30e4:	48c1      	ldr	r0, [pc, #772]	; (33ec <main+0x3fc>)
    30e6:	47a8      	blx	r5
		while (usart_read_wait(&usart_instance, &key)) {
    30e8:	4eb3      	ldr	r6, [pc, #716]	; (33b8 <main+0x3c8>)
    30ea:	4fc1      	ldr	r7, [pc, #772]	; (33f0 <main+0x400>)
    30ec:	0021      	movs	r1, r4
    30ee:	0030      	movs	r0, r6
    30f0:	47b8      	blx	r7
    30f2:	2800      	cmp	r0, #0
    30f4:	d1fa      	bne.n	30ec <main+0xfc>
		printf("\r\nYou input :%c\r\n",key);
    30f6:	8821      	ldrh	r1, [r4, #0]
    30f8:	48be      	ldr	r0, [pc, #760]	; (33f4 <main+0x404>)
    30fa:	4bad      	ldr	r3, [pc, #692]	; (33b0 <main+0x3c0>)
    30fc:	4798      	blx	r3
		switch (key) {
    30fe:	8823      	ldrh	r3, [r4, #0]
    3100:	3b61      	subs	r3, #97	; 0x61
    3102:	b29a      	uxth	r2, r3
    3104:	2a05      	cmp	r2, #5
    3106:	d8b3      	bhi.n	3070 <main+0x80>
    3108:	0093      	lsls	r3, r2, #2
    310a:	4abb      	ldr	r2, [pc, #748]	; (33f8 <main+0x408>)
    310c:	58d3      	ldr	r3, [r2, r3]
    310e:	469f      	mov	pc, r3
			test_active_mode(SYSTEM_PERFORMANCE_LEVEL_2);
    3110:	2002      	movs	r0, #2
    3112:	4ba8      	ldr	r3, [pc, #672]	; (33b4 <main+0x3c4>)
    3114:	4798      	blx	r3
			break;
    3116:	e7ab      	b.n	3070 <main+0x80>
	printf("Warning:System will enter IDLE mode,please wait until LED0 becomes OFF \r\n");
    3118:	48b8      	ldr	r0, [pc, #736]	; (33fc <main+0x40c>)
    311a:	4bb9      	ldr	r3, [pc, #740]	; (3400 <main+0x410>)
    311c:	4798      	blx	r3
	test_active_mode(SYSTEM_PERFORMANCE_LEVEL_0);
    311e:	2000      	movs	r0, #0
    3120:	4ba4      	ldr	r3, [pc, #656]	; (33b4 <main+0x3c4>)
    3122:	4798      	blx	r3
    3124:	2280      	movs	r2, #128	; 0x80
    3126:	0092      	lsls	r2, r2, #2
    3128:	4b9f      	ldr	r3, [pc, #636]	; (33a8 <main+0x3b8>)
    312a:	619a      	str	r2, [r3, #24]
	PM->SLEEPCFG.reg = sleep_mode;
    312c:	3aff      	subs	r2, #255	; 0xff
    312e:	3aff      	subs	r2, #255	; 0xff
    3130:	2380      	movs	r3, #128	; 0x80
    3132:	05db      	lsls	r3, r3, #23
    3134:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    3136:	785a      	ldrb	r2, [r3, #1]
    3138:	2a02      	cmp	r2, #2
    313a:	d1fc      	bne.n	3136 <main+0x146>
  __ASM volatile ("dsb 0xF":::"memory");
    313c:	f3bf 8f4f 	dsb	sy
	__WFI();
    3140:	bf30      	wfi
	led_toggle_indication(LED0_TOGGLE_4);
    3142:	2004      	movs	r0, #4
    3144:	4baf      	ldr	r3, [pc, #700]	; (3404 <main+0x414>)
    3146:	4798      	blx	r3
    3148:	e792      	b.n	3070 <main+0x80>
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
	return DSU->DID.reg;
    314a:	4baf      	ldr	r3, [pc, #700]	; (3408 <main+0x418>)
    314c:	699e      	ldr	r6, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    314e:	0536      	lsls	r6, r6, #20
    3150:	0f36      	lsrs	r6, r6, #28
	printf("System will enter STANDBY mode:static power sleepwalking.\r\n");
    3152:	48ae      	ldr	r0, [pc, #696]	; (340c <main+0x41c>)
    3154:	4baa      	ldr	r3, [pc, #680]	; (3400 <main+0x410>)
    3156:	4798      	blx	r3
	if (rev < _SYSTEM_MCU_REVISION_B) {
    3158:	2e00      	cmp	r6, #0
    315a:	d000      	beq.n	315e <main+0x16e>
    315c:	e1a5      	b.n	34aa <main+0x4ba>
		test_active_mode(SYSTEM_PERFORMANCE_LEVEL_0);
    315e:	2000      	movs	r0, #0
    3160:	4b94      	ldr	r3, [pc, #592]	; (33b4 <main+0x3c4>)
    3162:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3164:	2005      	movs	r0, #5
    3166:	4baa      	ldr	r3, [pc, #680]	; (3410 <main+0x420>)
    3168:	4798      	blx	r3
		SUPC->VREG.bit.SEL = SUPC_VREG_SEL_LDO_Val;
    316a:	4a84      	ldr	r2, [pc, #528]	; (337c <main+0x38c>)
    316c:	6993      	ldr	r3, [r2, #24]
    316e:	210c      	movs	r1, #12
    3170:	438b      	bics	r3, r1
    3172:	6193      	str	r3, [r2, #24]
static inline void system_standby_set_config(
		struct system_standby_config *const config)
{
	Assert(config);
#if SAML21 || SAMR30 || (SAMR34) || (SAMR35)
	PM->STDBYCFG.reg = PM_STDBYCFG_PDCFG(config->power_domain)
    3174:	2380      	movs	r3, #128	; 0x80
    3176:	05db      	lsls	r3, r3, #23
    3178:	22a0      	movs	r2, #160	; 0xa0
    317a:	0192      	lsls	r2, r2, #6
    317c:	811a      	strh	r2, [r3, #8]
	return (enum system_performance_level)PM->PLCFG.reg;
    317e:	789b      	ldrb	r3, [r3, #2]
		if (system_get_performance_level() == SYSTEM_PERFORMANCE_LEVEL_0) {
    3180:	2b00      	cmp	r3, #0
    3182:	d000      	beq.n	3186 <main+0x196>
    3184:	e199      	b.n	34ba <main+0x4ca>
			*tmp |= (1 << 8);
    3186:	4aa3      	ldr	r2, [pc, #652]	; (3414 <main+0x424>)
    3188:	3301      	adds	r3, #1
    318a:	33ff      	adds	r3, #255	; 0xff
    318c:	6811      	ldr	r1, [r2, #0]
    318e:	430b      	orrs	r3, r1
    3190:	6013      	str	r3, [r2, #0]
    3192:	e192      	b.n	34ba <main+0x4ca>
			MCLK->APBCMASK.reg &= ~mask;
    3194:	4aa0      	ldr	r2, [pc, #640]	; (3418 <main+0x428>)
    3196:	69d3      	ldr	r3, [r2, #28]
    3198:	2701      	movs	r7, #1
    319a:	43bb      	bics	r3, r7
    319c:	61d3      	str	r3, [r2, #28]
	system_gclk_chan_disable(SERCOM0_GCLK_ID_CORE);
    319e:	2012      	movs	r0, #18
    31a0:	4b9e      	ldr	r3, [pc, #632]	; (341c <main+0x42c>)
    31a2:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    31a4:	ae04      	add	r6, sp, #16
    31a6:	7077      	strb	r7, [r6, #1]
	config->powersave  = false;
    31a8:	2300      	movs	r3, #0
    31aa:	70b3      	strb	r3, [r6, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    31ac:	7037      	strb	r7, [r6, #0]
	port_pin_set_config(CONF_STDIO_PAD0_PIN, &pin_conf);
    31ae:	0031      	movs	r1, r6
    31b0:	2004      	movs	r0, #4
    31b2:	4f9b      	ldr	r7, [pc, #620]	; (3420 <main+0x430>)
    31b4:	47b8      	blx	r7
	port_pin_set_config(CONF_STDIO_PAD1_PIN, &pin_conf);
    31b6:	0031      	movs	r1, r6
    31b8:	2005      	movs	r0, #5
    31ba:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    31bc:	2280      	movs	r2, #128	; 0x80
    31be:	0092      	lsls	r2, r2, #2
    31c0:	4b79      	ldr	r3, [pc, #484]	; (33a8 <main+0x3b8>)
    31c2:	619a      	str	r2, [r3, #24]
	PM->SLEEPCFG.reg = sleep_mode;
    31c4:	3afc      	subs	r2, #252	; 0xfc
    31c6:	3aff      	subs	r2, #255	; 0xff
    31c8:	2380      	movs	r3, #128	; 0x80
    31ca:	05db      	lsls	r3, r3, #23
    31cc:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    31ce:	785a      	ldrb	r2, [r3, #1]
    31d0:	2a05      	cmp	r2, #5
    31d2:	d1fc      	bne.n	31ce <main+0x1de>
    31d4:	f3bf 8f4f 	dsb	sy
	__WFI();
    31d8:	bf30      	wfi
    31da:	e749      	b.n	3070 <main+0x80>
	PM->SLEEPCFG.reg = sleep_mode;
    31dc:	2206      	movs	r2, #6
    31de:	2380      	movs	r3, #128	; 0x80
    31e0:	05db      	lsls	r3, r3, #23
    31e2:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    31e4:	785a      	ldrb	r2, [r3, #1]
    31e6:	2a06      	cmp	r2, #6
    31e8:	d1fc      	bne.n	31e4 <main+0x1f4>
    31ea:	f3bf 8f4f 	dsb	sy
	__WFI();
    31ee:	bf30      	wfi
    31f0:	e73e      	b.n	3070 <main+0x80>
    31f2:	4b85      	ldr	r3, [pc, #532]	; (3408 <main+0x418>)
    31f4:	699b      	ldr	r3, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    31f6:	051b      	lsls	r3, r3, #20
    31f8:	0f1b      	lsrs	r3, r3, #28
    31fa:	4698      	mov	r8, r3
	printf("System will enter STANDBY mode:Dynamic Power SleepWalking\r\n");
    31fc:	4889      	ldr	r0, [pc, #548]	; (3424 <main+0x434>)
    31fe:	4b80      	ldr	r3, [pc, #512]	; (3400 <main+0x410>)
    3200:	4798      	blx	r3
	if (rev < _SYSTEM_MCU_REVISION_B) {
    3202:	4643      	mov	r3, r8
    3204:	2b00      	cmp	r3, #0
    3206:	d100      	bne.n	320a <main+0x21a>
    3208:	e0a4      	b.n	3354 <main+0x364>
	memset(adc_rslt, 0, sizeof(adc_rslt));
    320a:	2214      	movs	r2, #20
    320c:	2100      	movs	r1, #0
    320e:	4886      	ldr	r0, [pc, #536]	; (3428 <main+0x438>)
    3210:	4b86      	ldr	r3, [pc, #536]	; (342c <main+0x43c>)
    3212:	4798      	blx	r3
			MCLK->APBDMASK.reg |= mask;
    3214:	4a80      	ldr	r2, [pc, #512]	; (3418 <main+0x428>)
    3216:	6a13      	ldr	r3, [r2, #32]
    3218:	2501      	movs	r5, #1
    321a:	432b      	orrs	r3, r5
    321c:	6213      	str	r3, [r2, #32]
	events_get_config_defaults(&config);
    321e:	ac04      	add	r4, sp, #16
    3220:	0020      	movs	r0, r4
    3222:	4b83      	ldr	r3, [pc, #524]	; (3430 <main+0x440>)
    3224:	4798      	blx	r3
	config.generator    = EVSYS_ID_GEN_RTC_CMP_0;
    3226:	70a5      	strb	r5, [r4, #2]
	config.path         = EVENTS_PATH_ASYNCHRONOUS;
    3228:	2602      	movs	r6, #2
    322a:	7066      	strb	r6, [r4, #1]
    config.run_in_standby = true;
    322c:	7125      	strb	r5, [r4, #4]
    config.on_demand      = true;
    322e:	7165      	strb	r5, [r4, #5]
	config.clock_source = GCLK_GENERATOR_0;
    3230:	2700      	movs	r7, #0
    3232:	70e7      	strb	r7, [r4, #3]
	events_allocate(&event, &config);
    3234:	0021      	movs	r1, r4
    3236:	487f      	ldr	r0, [pc, #508]	; (3434 <main+0x444>)
    3238:	4b7f      	ldr	r3, [pc, #508]	; (3438 <main+0x448>)
    323a:	4798      	blx	r3
	events_attach_user(&event, EVSYS_ID_USER_ADC_START);
    323c:	211f      	movs	r1, #31
    323e:	487d      	ldr	r0, [pc, #500]	; (3434 <main+0x444>)
    3240:	4b7e      	ldr	r3, [pc, #504]	; (343c <main+0x44c>)
    3242:	4798      	blx	r3
	adc_get_config_defaults(&config);
    3244:	0020      	movs	r0, r4
    3246:	4b7e      	ldr	r3, [pc, #504]	; (3440 <main+0x450>)
    3248:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_0;
    324a:	7027      	strb	r7, [r4, #0]
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    324c:	70a5      	strb	r5, [r4, #2]
	config.reference = ADC_REFERENCE_INTREF;
    324e:	7067      	strb	r7, [r4, #1]
	config.event_action = ADC_EVENT_ACTION_START_CONV;
    3250:	232a      	movs	r3, #42	; 0x2a
    3252:	54e6      	strb	r6, [r4, r3]
	config.run_in_standby = true;
    3254:	7365      	strb	r5, [r4, #13]
	config.on_demand = true;
    3256:	73a5      	strb	r5, [r4, #14]
	config.resolution = ADC_RESOLUTION_12BIT;
    3258:	70e7      	strb	r7, [r4, #3]
	adc_init(&adc_instance, ADC, &config);
    325a:	4d7a      	ldr	r5, [pc, #488]	; (3444 <main+0x454>)
    325c:	0022      	movs	r2, r4
    325e:	497a      	ldr	r1, [pc, #488]	; (3448 <main+0x458>)
    3260:	0028      	movs	r0, r5
    3262:	4b7a      	ldr	r3, [pc, #488]	; (344c <main+0x45c>)
    3264:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3266:	682b      	ldr	r3, [r5, #0]
    3268:	8c1a      	ldrh	r2, [r3, #32]
    326a:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    326c:	2a00      	cmp	r2, #0
    326e:	d1fb      	bne.n	3268 <main+0x278>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3270:	2180      	movs	r1, #128	; 0x80
    3272:	03c9      	lsls	r1, r1, #15
    3274:	4a52      	ldr	r2, [pc, #328]	; (33c0 <main+0x3d0>)
    3276:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3278:	2207      	movs	r2, #7
    327a:	711a      	strb	r2, [r3, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    327c:	719a      	strb	r2, [r3, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    327e:	781a      	ldrb	r2, [r3, #0]
    3280:	2102      	movs	r1, #2
    3282:	430a      	orrs	r2, r1
    3284:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    3286:	4b6f      	ldr	r3, [pc, #444]	; (3444 <main+0x454>)
    3288:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    328a:	8c13      	ldrh	r3, [r2, #32]
    328c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    328e:	2b00      	cmp	r3, #0
    3290:	d1fb      	bne.n	328a <main+0x29a>
	dma_get_config_defaults(&config);
    3292:	af01      	add	r7, sp, #4
    3294:	0038      	movs	r0, r7
    3296:	4b6e      	ldr	r3, [pc, #440]	; (3450 <main+0x460>)
    3298:	4798      	blx	r3
	config.peripheral_trigger = ADC_DMAC_ID_RESRDY;
    329a:	2325      	movs	r3, #37	; 0x25
    329c:	707b      	strb	r3, [r7, #1]
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    329e:	2302      	movs	r3, #2
    32a0:	469a      	mov	sl, r3
    32a2:	2302      	movs	r3, #2
    32a4:	70bb      	strb	r3, [r7, #2]
	config.run_in_standby = true;
    32a6:	2601      	movs	r6, #1
    32a8:	70fe      	strb	r6, [r7, #3]
	dma_allocate(&example_resource, &config);
    32aa:	4b6a      	ldr	r3, [pc, #424]	; (3454 <main+0x464>)
    32ac:	4699      	mov	r9, r3
    32ae:	0039      	movs	r1, r7
    32b0:	0018      	movs	r0, r3
    32b2:	4b69      	ldr	r3, [pc, #420]	; (3458 <main+0x468>)
    32b4:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    32b6:	ac04      	add	r4, sp, #16
    32b8:	7026      	strb	r6, [r4, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    32ba:	2500      	movs	r5, #0
    32bc:	7065      	strb	r5, [r4, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    32be:	70a5      	strb	r5, [r4, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
	/* Enable source increment */
	config->src_increment_enable = true;
	/* Enable destination increment */
	config->dst_increment_enable = true;
    32c0:	7166      	strb	r6, [r4, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    32c2:	71a5      	strb	r5, [r4, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    32c4:	71e5      	strb	r5, [r4, #7]
	descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
    32c6:	70e6      	strb	r6, [r4, #3]
	descriptor_config.src_increment_enable = false;
    32c8:	7125      	strb	r5, [r4, #4]
	descriptor_config.block_transfer_count = BUFFER_LEN;
    32ca:	230a      	movs	r3, #10
    32cc:	8123      	strh	r3, [r4, #8]
	descriptor_config.source_address = (uint32_t)(&adc_instance.hw->RESULT.reg);
    32ce:	4b5d      	ldr	r3, [pc, #372]	; (3444 <main+0x454>)
    32d0:	681b      	ldr	r3, [r3, #0]
    32d2:	3324      	adds	r3, #36	; 0x24
    32d4:	60e3      	str	r3, [r4, #12]
	descriptor_config.destination_address = (uint32_t)adc_rslt + 2*BUFFER_LEN;
    32d6:	4b54      	ldr	r3, [pc, #336]	; (3428 <main+0x438>)
    32d8:	3314      	adds	r3, #20
    32da:	6123      	str	r3, [r4, #16]
	descriptor_config.next_descriptor_address = ( uint32_t )&example_descriptor;
    32dc:	4b52      	ldr	r3, [pc, #328]	; (3428 <main+0x438>)
    32de:	2220      	movs	r2, #32
    32e0:	4694      	mov	ip, r2
    32e2:	4463      	add	r3, ip
    32e4:	469b      	mov	fp, r3
    32e6:	6163      	str	r3, [r4, #20]
	dma_descriptor_create(&example_descriptor, &descriptor_config);
    32e8:	0021      	movs	r1, r4
    32ea:	0018      	movs	r0, r3
    32ec:	4b5b      	ldr	r3, [pc, #364]	; (345c <main+0x46c>)
    32ee:	4798      	blx	r3
	dma_add_descriptor(&example_resource, &example_descriptor);
    32f0:	4659      	mov	r1, fp
    32f2:	4648      	mov	r0, r9
    32f4:	4b5a      	ldr	r3, [pc, #360]	; (3460 <main+0x470>)
    32f6:	4798      	blx	r3
	resource->callback[type] = callback;
    32f8:	4b5a      	ldr	r3, [pc, #360]	; (3464 <main+0x474>)
    32fa:	464a      	mov	r2, r9
    32fc:	6093      	str	r3, [r2, #8]
	resource->callback_enable |= 1 << type;
    32fe:	7c13      	ldrb	r3, [r2, #16]
    3300:	4652      	mov	r2, sl
    3302:	4313      	orrs	r3, r2
    3304:	464a      	mov	r2, r9
    3306:	7413      	strb	r3, [r2, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    3308:	7812      	ldrb	r2, [r2, #0]
    330a:	4957      	ldr	r1, [pc, #348]	; (3468 <main+0x478>)
    330c:	5c8b      	ldrb	r3, [r1, r2]
    330e:	4650      	mov	r0, sl
    3310:	4303      	orrs	r3, r0
    3312:	548b      	strb	r3, [r1, r2]
	dma_start_transfer_job(&example_resource);
    3314:	4648      	mov	r0, r9
    3316:	4b55      	ldr	r3, [pc, #340]	; (346c <main+0x47c>)
    3318:	4798      	blx	r3
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    331a:	70a6      	strb	r6, [r4, #2]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    331c:	7126      	strb	r6, [r4, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    331e:	60e5      	str	r5, [r4, #12]
	conf.prescaler         = RTC_COUNT_PRESCALER_DIV_64;
    3320:	23e0      	movs	r3, #224	; 0xe0
    3322:	00db      	lsls	r3, r3, #3
    3324:	8023      	strh	r3, [r4, #0]
	conf.clear_on_match    = true;
    3326:	70e6      	strb	r6, [r4, #3]
	conf.compare_values[0] = 1000;
    3328:	23fa      	movs	r3, #250	; 0xfa
    332a:	009b      	lsls	r3, r3, #2
    332c:	60a3      	str	r3, [r4, #8]
	evconfig.generate_event_on_compare[0] = true;
    332e:	707e      	strb	r6, [r7, #1]
	rtc_count_init(&rtc_instance, RTC, &conf);
    3330:	4e4f      	ldr	r6, [pc, #316]	; (3470 <main+0x480>)
    3332:	0022      	movs	r2, r4
    3334:	494f      	ldr	r1, [pc, #316]	; (3474 <main+0x484>)
    3336:	0030      	movs	r0, r6
    3338:	4b4f      	ldr	r3, [pc, #316]	; (3478 <main+0x488>)
    333a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    333c:	6830      	ldr	r0, [r6, #0]

	uint32_t event_mask = 0;

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    333e:	783b      	ldrb	r3, [r7, #0]
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
    3340:	1e5a      	subs	r2, r3, #1
    3342:	4193      	sbcs	r3, r2
    3344:	03da      	lsls	r2, r3, #15
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		if (events->generate_event_on_compare[i]) {
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
    3346:	2380      	movs	r3, #128	; 0x80
    3348:	005b      	lsls	r3, r3, #1
    334a:	4313      	orrs	r3, r2
    334c:	2200      	movs	r2, #0
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
    334e:	2601      	movs	r6, #1
    3350:	24ff      	movs	r4, #255	; 0xff
    3352:	e007      	b.n	3364 <main+0x374>
		test_active_mode(SYSTEM_PERFORMANCE_LEVEL_0);
    3354:	2000      	movs	r0, #0
    3356:	4b17      	ldr	r3, [pc, #92]	; (33b4 <main+0x3c4>)
    3358:	4798      	blx	r3
    335a:	e756      	b.n	320a <main+0x21a>
    335c:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < 8; i++) {
    335e:	2a08      	cmp	r2, #8
    3360:	d100      	bne.n	3364 <main+0x374>
    3362:	e08b      	b.n	347c <main+0x48c>
		if (events->generate_event_on_periodic[i]) {
    3364:	a901      	add	r1, sp, #4
    3366:	1889      	adds	r1, r1, r2
    3368:	78c9      	ldrb	r1, [r1, #3]
    336a:	2900      	cmp	r1, #0
    336c:	d0f6      	beq.n	335c <main+0x36c>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
    336e:	0031      	movs	r1, r6
    3370:	4091      	lsls	r1, r2
    3372:	4021      	ands	r1, r4
    3374:	430b      	orrs	r3, r1
    3376:	e7f1      	b.n	335c <main+0x36c>
    3378:	000026ad 	.word	0x000026ad
    337c:	40001400 	.word	0x40001400
    3380:	00000115 	.word	0x00000115
    3384:	000029e1 	.word	0x000029e1
    3388:	00002c4d 	.word	0x00002c4d
    338c:	00002bb9 	.word	0x00002bb9
    3390:	00002c21 	.word	0x00002c21
    3394:	00002bf9 	.word	0x00002bf9
    3398:	00002c65 	.word	0x00002c65
    339c:	00002c71 	.word	0x00002c71
    33a0:	00002b99 	.word	0x00002b99
    33a4:	00002d3d 	.word	0x00002d3d
    33a8:	40002800 	.word	0x40002800
    33ac:	00004c58 	.word	0x00004c58
    33b0:	00003825 	.word	0x00003825
    33b4:	00002e31 	.word	0x00002e31
    33b8:	20000170 	.word	0x20000170
    33bc:	00001425 	.word	0x00001425
    33c0:	e000e100 	.word	0xe000e100
    33c4:	00004ae0 	.word	0x00004ae0
    33c8:	00004b14 	.word	0x00004b14
    33cc:	00004b38 	.word	0x00004b38
    33d0:	00004b6c 	.word	0x00004b6c
    33d4:	00004ba0 	.word	0x00004ba0
    33d8:	00004bd0 	.word	0x00004bd0
    33dc:	00004c08 	.word	0x00004c08
    33e0:	00004c1c 	.word	0x00004c1c
    33e4:	00004c30 	.word	0x00004c30
    33e8:	00004c5c 	.word	0x00004c5c
    33ec:	00004c90 	.word	0x00004c90
    33f0:	00001c0f 	.word	0x00001c0f
    33f4:	00004c94 	.word	0x00004c94
    33f8:	00004ab0 	.word	0x00004ab0
    33fc:	00004ca8 	.word	0x00004ca8
    3400:	00003919 	.word	0x00003919
    3404:	00002cc9 	.word	0x00002cc9
    3408:	41002000 	.word	0x41002000
    340c:	00004cf4 	.word	0x00004cf4
    3410:	000020b5 	.word	0x000020b5
    3414:	4000141c 	.word	0x4000141c
    3418:	40000400 	.word	0x40000400
    341c:	00002545 	.word	0x00002545
    3420:	00000ded 	.word	0x00000ded
    3424:	00004d54 	.word	0x00004d54
    3428:	30000040 	.word	0x30000040
    342c:	00003813 	.word	0x00003813
    3430:	00000b25 	.word	0x00000b25
    3434:	20000130 	.word	0x20000130
    3438:	00000b39 	.word	0x00000b39
    343c:	00000bed 	.word	0x00000bed
    3440:	00000289 	.word	0x00000289
    3444:	20000110 	.word	0x20000110
    3448:	43000c00 	.word	0x43000c00
    344c:	000002cd 	.word	0x000002cd
    3450:	00000825 	.word	0x00000825
    3454:	20000234 	.word	0x20000234
    3458:	00000839 	.word	0x00000839
    345c:	000009f5 	.word	0x000009f5
    3460:	00000a9d 	.word	0x00000a9d
    3464:	00002d11 	.word	0x00002d11
    3468:	200000bc 	.word	0x200000bc
    346c:	00000969 	.word	0x00000969
    3470:	20000138 	.word	0x20000138
    3474:	40002000 	.word	0x40002000
    3478:	00000f2d 	.word	0x00000f2d
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
    347c:	6842      	ldr	r2, [r0, #4]
    347e:	4313      	orrs	r3, r2
    3480:	6043      	str	r3, [r0, #4]
	rtc_count_enable(&rtc_instance);
    3482:	485c      	ldr	r0, [pc, #368]	; (35f4 <main+0x604>)
    3484:	4b5c      	ldr	r3, [pc, #368]	; (35f8 <main+0x608>)
    3486:	4798      	blx	r3
	if (rev < _SYSTEM_MCU_REVISION_B) {
    3488:	4643      	mov	r3, r8
    348a:	2b00      	cmp	r3, #0
    348c:	d160      	bne.n	3550 <main+0x560>
	PM->STDBYCFG.reg = PM_STDBYCFG_PDCFG(config->power_domain)
    348e:	2380      	movs	r3, #128	; 0x80
    3490:	05db      	lsls	r3, r3, #23
    3492:	2232      	movs	r2, #50	; 0x32
    3494:	811a      	strh	r2, [r3, #8]
	return (enum system_performance_level)PM->PLCFG.reg;
    3496:	789b      	ldrb	r3, [r3, #2]
		if (system_get_performance_level() == SYSTEM_PERFORMANCE_LEVEL_0) {
    3498:	2b00      	cmp	r3, #0
    349a:	d15d      	bne.n	3558 <main+0x568>
			*tmp |= (1 << 8);
    349c:	4a57      	ldr	r2, [pc, #348]	; (35fc <main+0x60c>)
    349e:	3301      	adds	r3, #1
    34a0:	33ff      	adds	r3, #255	; 0xff
    34a2:	6811      	ldr	r1, [r2, #0]
    34a4:	430b      	orrs	r3, r1
    34a6:	6013      	str	r3, [r2, #0]
    34a8:	e056      	b.n	3558 <main+0x568>
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    34aa:	2005      	movs	r0, #5
    34ac:	4b54      	ldr	r3, [pc, #336]	; (3600 <main+0x610>)
    34ae:	4798      	blx	r3
	PM->STDBYCFG.reg = PM_STDBYCFG_PDCFG(config->power_domain)
    34b0:	22a0      	movs	r2, #160	; 0xa0
    34b2:	0192      	lsls	r2, r2, #6
    34b4:	2380      	movs	r3, #128	; 0x80
    34b6:	05db      	lsls	r3, r3, #23
    34b8:	811a      	strh	r2, [r3, #8]
    34ba:	2280      	movs	r2, #128	; 0x80
    34bc:	0092      	lsls	r2, r2, #2
    34be:	4b51      	ldr	r3, [pc, #324]	; (3604 <main+0x614>)
    34c0:	619a      	str	r2, [r3, #24]
	PM->SLEEPCFG.reg = sleep_mode;
    34c2:	3afd      	subs	r2, #253	; 0xfd
    34c4:	3aff      	subs	r2, #255	; 0xff
    34c6:	2380      	movs	r3, #128	; 0x80
    34c8:	05db      	lsls	r3, r3, #23
    34ca:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    34cc:	785a      	ldrb	r2, [r3, #1]
    34ce:	2a04      	cmp	r2, #4
    34d0:	d1fc      	bne.n	34cc <main+0x4dc>
    34d2:	f3bf 8f4f 	dsb	sy
	__WFI();
    34d6:	bf30      	wfi
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    34d8:	2005      	movs	r0, #5
    34da:	4b4b      	ldr	r3, [pc, #300]	; (3608 <main+0x618>)
    34dc:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    34de:	4b4b      	ldr	r3, [pc, #300]	; (360c <main+0x61c>)
    34e0:	4699      	mov	r9, r3
    34e2:	681f      	ldr	r7, [r3, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    34e4:	0038      	movs	r0, r7
    34e6:	4b4a      	ldr	r3, [pc, #296]	; (3610 <main+0x620>)
    34e8:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34ea:	231f      	movs	r3, #31
    34ec:	4018      	ands	r0, r3
    34ee:	3b1e      	subs	r3, #30
    34f0:	4083      	lsls	r3, r0
    34f2:	2280      	movs	r2, #128	; 0x80
    34f4:	4947      	ldr	r1, [pc, #284]	; (3614 <main+0x624>)
    34f6:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    34f8:	464b      	mov	r3, r9
    34fa:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    34fc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    34fe:	2a00      	cmp	r2, #0
    3500:	d1fc      	bne.n	34fc <main+0x50c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3502:	683b      	ldr	r3, [r7, #0]
    3504:	3202      	adds	r2, #2
    3506:	4393      	bics	r3, r2
    3508:	603b      	str	r3, [r7, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    350a:	4b40      	ldr	r3, [pc, #256]	; (360c <main+0x61c>)
    350c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    350e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3510:	2a00      	cmp	r2, #0
    3512:	d1fc      	bne.n	350e <main+0x51e>
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    3514:	2301      	movs	r3, #1
    3516:	603b      	str	r3, [r7, #0]
	configure_usart();
    3518:	4b3f      	ldr	r3, [pc, #252]	; (3618 <main+0x628>)
    351a:	4798      	blx	r3
	printf("System wake up from stanby mode\r\n");
    351c:	483f      	ldr	r0, [pc, #252]	; (361c <main+0x62c>)
    351e:	4b40      	ldr	r3, [pc, #256]	; (3620 <main+0x630>)
    3520:	4798      	blx	r3
	led_toggle_indication(LED0_TOGGLE_6);
    3522:	2006      	movs	r0, #6
    3524:	4b3f      	ldr	r3, [pc, #252]	; (3624 <main+0x634>)
    3526:	4798      	blx	r3
	if (rev < _SYSTEM_MCU_REVISION_B) {
    3528:	2e00      	cmp	r6, #0
    352a:	d109      	bne.n	3540 <main+0x550>
	return (enum system_performance_level)PM->PLCFG.reg;
    352c:	2380      	movs	r3, #128	; 0x80
    352e:	05db      	lsls	r3, r3, #23
    3530:	789b      	ldrb	r3, [r3, #2]
		if (system_get_performance_level() == SYSTEM_PERFORMANCE_LEVEL_0) {
    3532:	2b00      	cmp	r3, #0
    3534:	d104      	bne.n	3540 <main+0x550>
			*tmp &= ~(1 << 8);
    3536:	4a31      	ldr	r2, [pc, #196]	; (35fc <main+0x60c>)
    3538:	4b3b      	ldr	r3, [pc, #236]	; (3628 <main+0x638>)
    353a:	6811      	ldr	r1, [r2, #0]
    353c:	400b      	ands	r3, r1
    353e:	6013      	str	r3, [r2, #0]
	SUPC->VREG.bit.SEL = SUPC_VREG_SEL_BUCK_Val;
    3540:	4a3a      	ldr	r2, [pc, #232]	; (362c <main+0x63c>)
    3542:	6993      	ldr	r3, [r2, #24]
    3544:	210c      	movs	r1, #12
    3546:	438b      	bics	r3, r1
    3548:	3908      	subs	r1, #8
    354a:	430b      	orrs	r3, r1
    354c:	6193      	str	r3, [r2, #24]
    354e:	e58f      	b.n	3070 <main+0x80>
	PM->STDBYCFG.reg = PM_STDBYCFG_PDCFG(config->power_domain)
    3550:	2230      	movs	r2, #48	; 0x30
    3552:	2380      	movs	r3, #128	; 0x80
    3554:	05db      	lsls	r3, r3, #23
    3556:	811a      	strh	r2, [r3, #8]
	dma_start_transfer_job(&example_resource);
    3558:	4835      	ldr	r0, [pc, #212]	; (3630 <main+0x640>)
    355a:	4b36      	ldr	r3, [pc, #216]	; (3634 <main+0x644>)
    355c:	4798      	blx	r3
    355e:	2280      	movs	r2, #128	; 0x80
    3560:	0092      	lsls	r2, r2, #2
    3562:	4b28      	ldr	r3, [pc, #160]	; (3604 <main+0x614>)
    3564:	619a      	str	r2, [r3, #24]
	PM->SLEEPCFG.reg = sleep_mode;
    3566:	3afd      	subs	r2, #253	; 0xfd
    3568:	3aff      	subs	r2, #255	; 0xff
    356a:	2380      	movs	r3, #128	; 0x80
    356c:	05db      	lsls	r3, r3, #23
    356e:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    3570:	785a      	ldrb	r2, [r3, #1]
    3572:	2a04      	cmp	r2, #4
    3574:	d1fc      	bne.n	3570 <main+0x580>
    3576:	f3bf 8f4f 	dsb	sy
	__WFI();
    357a:	bf30      	wfi
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    357c:	2005      	movs	r0, #5
    357e:	4b22      	ldr	r3, [pc, #136]	; (3608 <main+0x618>)
    3580:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    3582:	4e22      	ldr	r6, [pc, #136]	; (360c <main+0x61c>)
    3584:	6834      	ldr	r4, [r6, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3586:	0020      	movs	r0, r4
    3588:	4b21      	ldr	r3, [pc, #132]	; (3610 <main+0x620>)
    358a:	4798      	blx	r3
    358c:	231f      	movs	r3, #31
    358e:	4018      	ands	r0, r3
    3590:	3b1e      	subs	r3, #30
    3592:	4083      	lsls	r3, r0
    3594:	2280      	movs	r2, #128	; 0x80
    3596:	491f      	ldr	r1, [pc, #124]	; (3614 <main+0x624>)
    3598:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    359a:	6833      	ldr	r3, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    359c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    359e:	2a00      	cmp	r2, #0
    35a0:	d1fc      	bne.n	359c <main+0x5ac>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    35a2:	6823      	ldr	r3, [r4, #0]
    35a4:	3202      	adds	r2, #2
    35a6:	4393      	bics	r3, r2
    35a8:	6023      	str	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    35aa:	4b18      	ldr	r3, [pc, #96]	; (360c <main+0x61c>)
    35ac:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    35ae:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    35b0:	2a00      	cmp	r2, #0
    35b2:	d1fc      	bne.n	35ae <main+0x5be>
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    35b4:	2301      	movs	r3, #1
    35b6:	6023      	str	r3, [r4, #0]
	configure_usart();
    35b8:	4b17      	ldr	r3, [pc, #92]	; (3618 <main+0x628>)
    35ba:	4798      	blx	r3
	printf("System wake up from stanby mode, ADC result\r\n");
    35bc:	481e      	ldr	r0, [pc, #120]	; (3638 <main+0x648>)
    35be:	4b18      	ldr	r3, [pc, #96]	; (3620 <main+0x630>)
    35c0:	4798      	blx	r3
    35c2:	4c1e      	ldr	r4, [pc, #120]	; (363c <main+0x64c>)
    35c4:	3414      	adds	r4, #20
    35c6:	4d1d      	ldr	r5, [pc, #116]	; (363c <main+0x64c>)
		printf("%d ",adc_rslt[i]);
    35c8:	4f1d      	ldr	r7, [pc, #116]	; (3640 <main+0x650>)
    35ca:	4e1e      	ldr	r6, [pc, #120]	; (3644 <main+0x654>)
    35cc:	8829      	ldrh	r1, [r5, #0]
    35ce:	0038      	movs	r0, r7
    35d0:	47b0      	blx	r6
    35d2:	3502      	adds	r5, #2
	for (int i = 0; i < BUFFER_LEN; i ++) {
    35d4:	42a5      	cmp	r5, r4
    35d6:	d1f9      	bne.n	35cc <main+0x5dc>
	printf("\r\n");
    35d8:	481b      	ldr	r0, [pc, #108]	; (3648 <main+0x658>)
    35da:	4b11      	ldr	r3, [pc, #68]	; (3620 <main+0x630>)
    35dc:	4798      	blx	r3
	led_toggle_indication(LED0_TOGGLE_6);
    35de:	2006      	movs	r0, #6
    35e0:	4b10      	ldr	r3, [pc, #64]	; (3624 <main+0x634>)
    35e2:	4798      	blx	r3
	if (rev < _SYSTEM_MCU_REVISION_B) {
    35e4:	4643      	mov	r3, r8
    35e6:	2b00      	cmp	r3, #0
    35e8:	d102      	bne.n	35f0 <main+0x600>
	return (enum system_performance_level)PM->PLCFG.reg;
    35ea:	2380      	movs	r3, #128	; 0x80
    35ec:	05db      	lsls	r3, r3, #23
    35ee:	789b      	ldrb	r3, [r3, #2]
    35f0:	e7fe      	b.n	35f0 <main+0x600>
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	20000138 	.word	0x20000138
    35f8:	00000e1d 	.word	0x00000e1d
    35fc:	4000141c 	.word	0x4000141c
    3600:	000020b5 	.word	0x000020b5
    3604:	40002800 	.word	0x40002800
    3608:	00001ff9 	.word	0x00001ff9
    360c:	20000170 	.word	0x20000170
    3610:	00001425 	.word	0x00001425
    3614:	e000e100 	.word	0xe000e100
    3618:	00002d3d 	.word	0x00002d3d
    361c:	00004d30 	.word	0x00004d30
    3620:	00003919 	.word	0x00003919
    3624:	00002cc9 	.word	0x00002cc9
    3628:	fffffeff 	.word	0xfffffeff
    362c:	40001400 	.word	0x40001400
    3630:	20000234 	.word	0x20000234
    3634:	00000969 	.word	0x00000969
    3638:	00004d90 	.word	0x00004d90
    363c:	30000040 	.word	0x30000040
    3640:	00004dc0 	.word	0x00004dc0
    3644:	00003825 	.word	0x00003825
    3648:	00004c8c 	.word	0x00004c8c

0000364c <__udivsi3>:
    364c:	2200      	movs	r2, #0
    364e:	0843      	lsrs	r3, r0, #1
    3650:	428b      	cmp	r3, r1
    3652:	d374      	bcc.n	373e <__udivsi3+0xf2>
    3654:	0903      	lsrs	r3, r0, #4
    3656:	428b      	cmp	r3, r1
    3658:	d35f      	bcc.n	371a <__udivsi3+0xce>
    365a:	0a03      	lsrs	r3, r0, #8
    365c:	428b      	cmp	r3, r1
    365e:	d344      	bcc.n	36ea <__udivsi3+0x9e>
    3660:	0b03      	lsrs	r3, r0, #12
    3662:	428b      	cmp	r3, r1
    3664:	d328      	bcc.n	36b8 <__udivsi3+0x6c>
    3666:	0c03      	lsrs	r3, r0, #16
    3668:	428b      	cmp	r3, r1
    366a:	d30d      	bcc.n	3688 <__udivsi3+0x3c>
    366c:	22ff      	movs	r2, #255	; 0xff
    366e:	0209      	lsls	r1, r1, #8
    3670:	ba12      	rev	r2, r2
    3672:	0c03      	lsrs	r3, r0, #16
    3674:	428b      	cmp	r3, r1
    3676:	d302      	bcc.n	367e <__udivsi3+0x32>
    3678:	1212      	asrs	r2, r2, #8
    367a:	0209      	lsls	r1, r1, #8
    367c:	d065      	beq.n	374a <__udivsi3+0xfe>
    367e:	0b03      	lsrs	r3, r0, #12
    3680:	428b      	cmp	r3, r1
    3682:	d319      	bcc.n	36b8 <__udivsi3+0x6c>
    3684:	e000      	b.n	3688 <__udivsi3+0x3c>
    3686:	0a09      	lsrs	r1, r1, #8
    3688:	0bc3      	lsrs	r3, r0, #15
    368a:	428b      	cmp	r3, r1
    368c:	d301      	bcc.n	3692 <__udivsi3+0x46>
    368e:	03cb      	lsls	r3, r1, #15
    3690:	1ac0      	subs	r0, r0, r3
    3692:	4152      	adcs	r2, r2
    3694:	0b83      	lsrs	r3, r0, #14
    3696:	428b      	cmp	r3, r1
    3698:	d301      	bcc.n	369e <__udivsi3+0x52>
    369a:	038b      	lsls	r3, r1, #14
    369c:	1ac0      	subs	r0, r0, r3
    369e:	4152      	adcs	r2, r2
    36a0:	0b43      	lsrs	r3, r0, #13
    36a2:	428b      	cmp	r3, r1
    36a4:	d301      	bcc.n	36aa <__udivsi3+0x5e>
    36a6:	034b      	lsls	r3, r1, #13
    36a8:	1ac0      	subs	r0, r0, r3
    36aa:	4152      	adcs	r2, r2
    36ac:	0b03      	lsrs	r3, r0, #12
    36ae:	428b      	cmp	r3, r1
    36b0:	d301      	bcc.n	36b6 <__udivsi3+0x6a>
    36b2:	030b      	lsls	r3, r1, #12
    36b4:	1ac0      	subs	r0, r0, r3
    36b6:	4152      	adcs	r2, r2
    36b8:	0ac3      	lsrs	r3, r0, #11
    36ba:	428b      	cmp	r3, r1
    36bc:	d301      	bcc.n	36c2 <__udivsi3+0x76>
    36be:	02cb      	lsls	r3, r1, #11
    36c0:	1ac0      	subs	r0, r0, r3
    36c2:	4152      	adcs	r2, r2
    36c4:	0a83      	lsrs	r3, r0, #10
    36c6:	428b      	cmp	r3, r1
    36c8:	d301      	bcc.n	36ce <__udivsi3+0x82>
    36ca:	028b      	lsls	r3, r1, #10
    36cc:	1ac0      	subs	r0, r0, r3
    36ce:	4152      	adcs	r2, r2
    36d0:	0a43      	lsrs	r3, r0, #9
    36d2:	428b      	cmp	r3, r1
    36d4:	d301      	bcc.n	36da <__udivsi3+0x8e>
    36d6:	024b      	lsls	r3, r1, #9
    36d8:	1ac0      	subs	r0, r0, r3
    36da:	4152      	adcs	r2, r2
    36dc:	0a03      	lsrs	r3, r0, #8
    36de:	428b      	cmp	r3, r1
    36e0:	d301      	bcc.n	36e6 <__udivsi3+0x9a>
    36e2:	020b      	lsls	r3, r1, #8
    36e4:	1ac0      	subs	r0, r0, r3
    36e6:	4152      	adcs	r2, r2
    36e8:	d2cd      	bcs.n	3686 <__udivsi3+0x3a>
    36ea:	09c3      	lsrs	r3, r0, #7
    36ec:	428b      	cmp	r3, r1
    36ee:	d301      	bcc.n	36f4 <__udivsi3+0xa8>
    36f0:	01cb      	lsls	r3, r1, #7
    36f2:	1ac0      	subs	r0, r0, r3
    36f4:	4152      	adcs	r2, r2
    36f6:	0983      	lsrs	r3, r0, #6
    36f8:	428b      	cmp	r3, r1
    36fa:	d301      	bcc.n	3700 <__udivsi3+0xb4>
    36fc:	018b      	lsls	r3, r1, #6
    36fe:	1ac0      	subs	r0, r0, r3
    3700:	4152      	adcs	r2, r2
    3702:	0943      	lsrs	r3, r0, #5
    3704:	428b      	cmp	r3, r1
    3706:	d301      	bcc.n	370c <__udivsi3+0xc0>
    3708:	014b      	lsls	r3, r1, #5
    370a:	1ac0      	subs	r0, r0, r3
    370c:	4152      	adcs	r2, r2
    370e:	0903      	lsrs	r3, r0, #4
    3710:	428b      	cmp	r3, r1
    3712:	d301      	bcc.n	3718 <__udivsi3+0xcc>
    3714:	010b      	lsls	r3, r1, #4
    3716:	1ac0      	subs	r0, r0, r3
    3718:	4152      	adcs	r2, r2
    371a:	08c3      	lsrs	r3, r0, #3
    371c:	428b      	cmp	r3, r1
    371e:	d301      	bcc.n	3724 <__udivsi3+0xd8>
    3720:	00cb      	lsls	r3, r1, #3
    3722:	1ac0      	subs	r0, r0, r3
    3724:	4152      	adcs	r2, r2
    3726:	0883      	lsrs	r3, r0, #2
    3728:	428b      	cmp	r3, r1
    372a:	d301      	bcc.n	3730 <__udivsi3+0xe4>
    372c:	008b      	lsls	r3, r1, #2
    372e:	1ac0      	subs	r0, r0, r3
    3730:	4152      	adcs	r2, r2
    3732:	0843      	lsrs	r3, r0, #1
    3734:	428b      	cmp	r3, r1
    3736:	d301      	bcc.n	373c <__udivsi3+0xf0>
    3738:	004b      	lsls	r3, r1, #1
    373a:	1ac0      	subs	r0, r0, r3
    373c:	4152      	adcs	r2, r2
    373e:	1a41      	subs	r1, r0, r1
    3740:	d200      	bcs.n	3744 <__udivsi3+0xf8>
    3742:	4601      	mov	r1, r0
    3744:	4152      	adcs	r2, r2
    3746:	4610      	mov	r0, r2
    3748:	4770      	bx	lr
    374a:	e7ff      	b.n	374c <__udivsi3+0x100>
    374c:	b501      	push	{r0, lr}
    374e:	2000      	movs	r0, #0
    3750:	f000 f806 	bl	3760 <__aeabi_idiv0>
    3754:	bd02      	pop	{r1, pc}
    3756:	46c0      	nop			; (mov r8, r8)

00003758 <__aeabi_uidivmod>:
    3758:	2900      	cmp	r1, #0
    375a:	d0f7      	beq.n	374c <__udivsi3+0x100>
    375c:	e776      	b.n	364c <__udivsi3>
    375e:	4770      	bx	lr

00003760 <__aeabi_idiv0>:
    3760:	4770      	bx	lr
    3762:	46c0      	nop			; (mov r8, r8)

00003764 <__aeabi_lmul>:
    3764:	b5f0      	push	{r4, r5, r6, r7, lr}
    3766:	46ce      	mov	lr, r9
    3768:	4647      	mov	r7, r8
    376a:	0415      	lsls	r5, r2, #16
    376c:	0c2d      	lsrs	r5, r5, #16
    376e:	002e      	movs	r6, r5
    3770:	b580      	push	{r7, lr}
    3772:	0407      	lsls	r7, r0, #16
    3774:	0c14      	lsrs	r4, r2, #16
    3776:	0c3f      	lsrs	r7, r7, #16
    3778:	4699      	mov	r9, r3
    377a:	0c03      	lsrs	r3, r0, #16
    377c:	437e      	muls	r6, r7
    377e:	435d      	muls	r5, r3
    3780:	4367      	muls	r7, r4
    3782:	4363      	muls	r3, r4
    3784:	197f      	adds	r7, r7, r5
    3786:	0c34      	lsrs	r4, r6, #16
    3788:	19e4      	adds	r4, r4, r7
    378a:	469c      	mov	ip, r3
    378c:	42a5      	cmp	r5, r4
    378e:	d903      	bls.n	3798 <__aeabi_lmul+0x34>
    3790:	2380      	movs	r3, #128	; 0x80
    3792:	025b      	lsls	r3, r3, #9
    3794:	4698      	mov	r8, r3
    3796:	44c4      	add	ip, r8
    3798:	464b      	mov	r3, r9
    379a:	4351      	muls	r1, r2
    379c:	4343      	muls	r3, r0
    379e:	0436      	lsls	r6, r6, #16
    37a0:	0c36      	lsrs	r6, r6, #16
    37a2:	0c25      	lsrs	r5, r4, #16
    37a4:	0424      	lsls	r4, r4, #16
    37a6:	4465      	add	r5, ip
    37a8:	19a4      	adds	r4, r4, r6
    37aa:	1859      	adds	r1, r3, r1
    37ac:	1949      	adds	r1, r1, r5
    37ae:	0020      	movs	r0, r4
    37b0:	bc0c      	pop	{r2, r3}
    37b2:	4690      	mov	r8, r2
    37b4:	4699      	mov	r9, r3
    37b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000037b8 <__libc_init_array>:
    37b8:	b570      	push	{r4, r5, r6, lr}
    37ba:	2600      	movs	r6, #0
    37bc:	4d0c      	ldr	r5, [pc, #48]	; (37f0 <__libc_init_array+0x38>)
    37be:	4c0d      	ldr	r4, [pc, #52]	; (37f4 <__libc_init_array+0x3c>)
    37c0:	1b64      	subs	r4, r4, r5
    37c2:	10a4      	asrs	r4, r4, #2
    37c4:	42a6      	cmp	r6, r4
    37c6:	d109      	bne.n	37dc <__libc_init_array+0x24>
    37c8:	2600      	movs	r6, #0
    37ca:	f001 fb57 	bl	4e7c <_init>
    37ce:	4d0a      	ldr	r5, [pc, #40]	; (37f8 <__libc_init_array+0x40>)
    37d0:	4c0a      	ldr	r4, [pc, #40]	; (37fc <__libc_init_array+0x44>)
    37d2:	1b64      	subs	r4, r4, r5
    37d4:	10a4      	asrs	r4, r4, #2
    37d6:	42a6      	cmp	r6, r4
    37d8:	d105      	bne.n	37e6 <__libc_init_array+0x2e>
    37da:	bd70      	pop	{r4, r5, r6, pc}
    37dc:	00b3      	lsls	r3, r6, #2
    37de:	58eb      	ldr	r3, [r5, r3]
    37e0:	4798      	blx	r3
    37e2:	3601      	adds	r6, #1
    37e4:	e7ee      	b.n	37c4 <__libc_init_array+0xc>
    37e6:	00b3      	lsls	r3, r6, #2
    37e8:	58eb      	ldr	r3, [r5, r3]
    37ea:	4798      	blx	r3
    37ec:	3601      	adds	r6, #1
    37ee:	e7f2      	b.n	37d6 <__libc_init_array+0x1e>
    37f0:	00004e88 	.word	0x00004e88
    37f4:	00004e88 	.word	0x00004e88
    37f8:	00004e88 	.word	0x00004e88
    37fc:	00004e8c 	.word	0x00004e8c

00003800 <memcpy>:
    3800:	2300      	movs	r3, #0
    3802:	b510      	push	{r4, lr}
    3804:	429a      	cmp	r2, r3
    3806:	d100      	bne.n	380a <memcpy+0xa>
    3808:	bd10      	pop	{r4, pc}
    380a:	5ccc      	ldrb	r4, [r1, r3]
    380c:	54c4      	strb	r4, [r0, r3]
    380e:	3301      	adds	r3, #1
    3810:	e7f8      	b.n	3804 <memcpy+0x4>

00003812 <memset>:
    3812:	0003      	movs	r3, r0
    3814:	1882      	adds	r2, r0, r2
    3816:	4293      	cmp	r3, r2
    3818:	d100      	bne.n	381c <memset+0xa>
    381a:	4770      	bx	lr
    381c:	7019      	strb	r1, [r3, #0]
    381e:	3301      	adds	r3, #1
    3820:	e7f9      	b.n	3816 <memset+0x4>
	...

00003824 <iprintf>:
    3824:	b40f      	push	{r0, r1, r2, r3}
    3826:	4b0b      	ldr	r3, [pc, #44]	; (3854 <iprintf+0x30>)
    3828:	b513      	push	{r0, r1, r4, lr}
    382a:	681c      	ldr	r4, [r3, #0]
    382c:	2c00      	cmp	r4, #0
    382e:	d005      	beq.n	383c <iprintf+0x18>
    3830:	69a3      	ldr	r3, [r4, #24]
    3832:	2b00      	cmp	r3, #0
    3834:	d102      	bne.n	383c <iprintf+0x18>
    3836:	0020      	movs	r0, r4
    3838:	f000 faf2 	bl	3e20 <__sinit>
    383c:	ab05      	add	r3, sp, #20
    383e:	9a04      	ldr	r2, [sp, #16]
    3840:	68a1      	ldr	r1, [r4, #8]
    3842:	0020      	movs	r0, r4
    3844:	9301      	str	r3, [sp, #4]
    3846:	f000 fcc7 	bl	41d8 <_vfiprintf_r>
    384a:	bc16      	pop	{r1, r2, r4}
    384c:	bc08      	pop	{r3}
    384e:	b004      	add	sp, #16
    3850:	4718      	bx	r3
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	2000002c 	.word	0x2000002c

00003858 <_puts_r>:
    3858:	b570      	push	{r4, r5, r6, lr}
    385a:	0005      	movs	r5, r0
    385c:	000e      	movs	r6, r1
    385e:	2800      	cmp	r0, #0
    3860:	d004      	beq.n	386c <_puts_r+0x14>
    3862:	6983      	ldr	r3, [r0, #24]
    3864:	2b00      	cmp	r3, #0
    3866:	d101      	bne.n	386c <_puts_r+0x14>
    3868:	f000 fada 	bl	3e20 <__sinit>
    386c:	69ab      	ldr	r3, [r5, #24]
    386e:	68ac      	ldr	r4, [r5, #8]
    3870:	2b00      	cmp	r3, #0
    3872:	d102      	bne.n	387a <_puts_r+0x22>
    3874:	0028      	movs	r0, r5
    3876:	f000 fad3 	bl	3e20 <__sinit>
    387a:	4b24      	ldr	r3, [pc, #144]	; (390c <_puts_r+0xb4>)
    387c:	429c      	cmp	r4, r3
    387e:	d10f      	bne.n	38a0 <_puts_r+0x48>
    3880:	686c      	ldr	r4, [r5, #4]
    3882:	89a3      	ldrh	r3, [r4, #12]
    3884:	071b      	lsls	r3, r3, #28
    3886:	d502      	bpl.n	388e <_puts_r+0x36>
    3888:	6923      	ldr	r3, [r4, #16]
    388a:	2b00      	cmp	r3, #0
    388c:	d120      	bne.n	38d0 <_puts_r+0x78>
    388e:	0021      	movs	r1, r4
    3890:	0028      	movs	r0, r5
    3892:	f000 f957 	bl	3b44 <__swsetup_r>
    3896:	2800      	cmp	r0, #0
    3898:	d01a      	beq.n	38d0 <_puts_r+0x78>
    389a:	2001      	movs	r0, #1
    389c:	4240      	negs	r0, r0
    389e:	bd70      	pop	{r4, r5, r6, pc}
    38a0:	4b1b      	ldr	r3, [pc, #108]	; (3910 <_puts_r+0xb8>)
    38a2:	429c      	cmp	r4, r3
    38a4:	d101      	bne.n	38aa <_puts_r+0x52>
    38a6:	68ac      	ldr	r4, [r5, #8]
    38a8:	e7eb      	b.n	3882 <_puts_r+0x2a>
    38aa:	4b1a      	ldr	r3, [pc, #104]	; (3914 <_puts_r+0xbc>)
    38ac:	429c      	cmp	r4, r3
    38ae:	d1e8      	bne.n	3882 <_puts_r+0x2a>
    38b0:	68ec      	ldr	r4, [r5, #12]
    38b2:	e7e6      	b.n	3882 <_puts_r+0x2a>
    38b4:	3b01      	subs	r3, #1
    38b6:	3601      	adds	r6, #1
    38b8:	60a3      	str	r3, [r4, #8]
    38ba:	2b00      	cmp	r3, #0
    38bc:	da04      	bge.n	38c8 <_puts_r+0x70>
    38be:	69a2      	ldr	r2, [r4, #24]
    38c0:	4293      	cmp	r3, r2
    38c2:	db16      	blt.n	38f2 <_puts_r+0x9a>
    38c4:	290a      	cmp	r1, #10
    38c6:	d014      	beq.n	38f2 <_puts_r+0x9a>
    38c8:	6823      	ldr	r3, [r4, #0]
    38ca:	1c5a      	adds	r2, r3, #1
    38cc:	6022      	str	r2, [r4, #0]
    38ce:	7019      	strb	r1, [r3, #0]
    38d0:	7831      	ldrb	r1, [r6, #0]
    38d2:	68a3      	ldr	r3, [r4, #8]
    38d4:	2900      	cmp	r1, #0
    38d6:	d1ed      	bne.n	38b4 <_puts_r+0x5c>
    38d8:	3b01      	subs	r3, #1
    38da:	60a3      	str	r3, [r4, #8]
    38dc:	2b00      	cmp	r3, #0
    38de:	da0f      	bge.n	3900 <_puts_r+0xa8>
    38e0:	0022      	movs	r2, r4
    38e2:	310a      	adds	r1, #10
    38e4:	0028      	movs	r0, r5
    38e6:	f000 f8d7 	bl	3a98 <__swbuf_r>
    38ea:	1c43      	adds	r3, r0, #1
    38ec:	d0d5      	beq.n	389a <_puts_r+0x42>
    38ee:	200a      	movs	r0, #10
    38f0:	e7d5      	b.n	389e <_puts_r+0x46>
    38f2:	0022      	movs	r2, r4
    38f4:	0028      	movs	r0, r5
    38f6:	f000 f8cf 	bl	3a98 <__swbuf_r>
    38fa:	1c43      	adds	r3, r0, #1
    38fc:	d1e8      	bne.n	38d0 <_puts_r+0x78>
    38fe:	e7cc      	b.n	389a <_puts_r+0x42>
    3900:	200a      	movs	r0, #10
    3902:	6823      	ldr	r3, [r4, #0]
    3904:	1c5a      	adds	r2, r3, #1
    3906:	6022      	str	r2, [r4, #0]
    3908:	7018      	strb	r0, [r3, #0]
    390a:	e7c8      	b.n	389e <_puts_r+0x46>
    390c:	00004e08 	.word	0x00004e08
    3910:	00004e28 	.word	0x00004e28
    3914:	00004de8 	.word	0x00004de8

00003918 <puts>:
    3918:	b510      	push	{r4, lr}
    391a:	4b03      	ldr	r3, [pc, #12]	; (3928 <puts+0x10>)
    391c:	0001      	movs	r1, r0
    391e:	6818      	ldr	r0, [r3, #0]
    3920:	f7ff ff9a 	bl	3858 <_puts_r>
    3924:	bd10      	pop	{r4, pc}
    3926:	46c0      	nop			; (mov r8, r8)
    3928:	2000002c 	.word	0x2000002c

0000392c <setbuf>:
    392c:	424a      	negs	r2, r1
    392e:	414a      	adcs	r2, r1
    3930:	2380      	movs	r3, #128	; 0x80
    3932:	b510      	push	{r4, lr}
    3934:	0052      	lsls	r2, r2, #1
    3936:	00db      	lsls	r3, r3, #3
    3938:	f000 f802 	bl	3940 <setvbuf>
    393c:	bd10      	pop	{r4, pc}
	...

00003940 <setvbuf>:
    3940:	b5f0      	push	{r4, r5, r6, r7, lr}
    3942:	001d      	movs	r5, r3
    3944:	4b4f      	ldr	r3, [pc, #316]	; (3a84 <setvbuf+0x144>)
    3946:	b085      	sub	sp, #20
    3948:	681e      	ldr	r6, [r3, #0]
    394a:	0004      	movs	r4, r0
    394c:	000f      	movs	r7, r1
    394e:	9200      	str	r2, [sp, #0]
    3950:	2e00      	cmp	r6, #0
    3952:	d005      	beq.n	3960 <setvbuf+0x20>
    3954:	69b3      	ldr	r3, [r6, #24]
    3956:	2b00      	cmp	r3, #0
    3958:	d102      	bne.n	3960 <setvbuf+0x20>
    395a:	0030      	movs	r0, r6
    395c:	f000 fa60 	bl	3e20 <__sinit>
    3960:	4b49      	ldr	r3, [pc, #292]	; (3a88 <setvbuf+0x148>)
    3962:	429c      	cmp	r4, r3
    3964:	d150      	bne.n	3a08 <setvbuf+0xc8>
    3966:	6874      	ldr	r4, [r6, #4]
    3968:	9b00      	ldr	r3, [sp, #0]
    396a:	2b02      	cmp	r3, #2
    396c:	d005      	beq.n	397a <setvbuf+0x3a>
    396e:	2b01      	cmp	r3, #1
    3970:	d900      	bls.n	3974 <setvbuf+0x34>
    3972:	e084      	b.n	3a7e <setvbuf+0x13e>
    3974:	2d00      	cmp	r5, #0
    3976:	da00      	bge.n	397a <setvbuf+0x3a>
    3978:	e081      	b.n	3a7e <setvbuf+0x13e>
    397a:	0021      	movs	r1, r4
    397c:	0030      	movs	r0, r6
    397e:	f000 f9e1 	bl	3d44 <_fflush_r>
    3982:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3984:	2900      	cmp	r1, #0
    3986:	d008      	beq.n	399a <setvbuf+0x5a>
    3988:	0023      	movs	r3, r4
    398a:	3344      	adds	r3, #68	; 0x44
    398c:	4299      	cmp	r1, r3
    398e:	d002      	beq.n	3996 <setvbuf+0x56>
    3990:	0030      	movs	r0, r6
    3992:	f000 fb51 	bl	4038 <_free_r>
    3996:	2300      	movs	r3, #0
    3998:	6363      	str	r3, [r4, #52]	; 0x34
    399a:	2300      	movs	r3, #0
    399c:	61a3      	str	r3, [r4, #24]
    399e:	6063      	str	r3, [r4, #4]
    39a0:	89a3      	ldrh	r3, [r4, #12]
    39a2:	061b      	lsls	r3, r3, #24
    39a4:	d503      	bpl.n	39ae <setvbuf+0x6e>
    39a6:	6921      	ldr	r1, [r4, #16]
    39a8:	0030      	movs	r0, r6
    39aa:	f000 fb45 	bl	4038 <_free_r>
    39ae:	89a3      	ldrh	r3, [r4, #12]
    39b0:	4a36      	ldr	r2, [pc, #216]	; (3a8c <setvbuf+0x14c>)
    39b2:	4013      	ands	r3, r2
    39b4:	81a3      	strh	r3, [r4, #12]
    39b6:	9b00      	ldr	r3, [sp, #0]
    39b8:	2b02      	cmp	r3, #2
    39ba:	d05a      	beq.n	3a72 <setvbuf+0x132>
    39bc:	ab03      	add	r3, sp, #12
    39be:	aa02      	add	r2, sp, #8
    39c0:	0021      	movs	r1, r4
    39c2:	0030      	movs	r0, r6
    39c4:	f000 fac2 	bl	3f4c <__swhatbuf_r>
    39c8:	89a3      	ldrh	r3, [r4, #12]
    39ca:	4318      	orrs	r0, r3
    39cc:	81a0      	strh	r0, [r4, #12]
    39ce:	2d00      	cmp	r5, #0
    39d0:	d124      	bne.n	3a1c <setvbuf+0xdc>
    39d2:	9d02      	ldr	r5, [sp, #8]
    39d4:	0028      	movs	r0, r5
    39d6:	f000 fb25 	bl	4024 <malloc>
    39da:	9501      	str	r5, [sp, #4]
    39dc:	1e07      	subs	r7, r0, #0
    39de:	d142      	bne.n	3a66 <setvbuf+0x126>
    39e0:	9b02      	ldr	r3, [sp, #8]
    39e2:	9301      	str	r3, [sp, #4]
    39e4:	42ab      	cmp	r3, r5
    39e6:	d139      	bne.n	3a5c <setvbuf+0x11c>
    39e8:	2001      	movs	r0, #1
    39ea:	4240      	negs	r0, r0
    39ec:	2302      	movs	r3, #2
    39ee:	89a2      	ldrh	r2, [r4, #12]
    39f0:	4313      	orrs	r3, r2
    39f2:	81a3      	strh	r3, [r4, #12]
    39f4:	2300      	movs	r3, #0
    39f6:	60a3      	str	r3, [r4, #8]
    39f8:	0023      	movs	r3, r4
    39fa:	3347      	adds	r3, #71	; 0x47
    39fc:	6023      	str	r3, [r4, #0]
    39fe:	6123      	str	r3, [r4, #16]
    3a00:	2301      	movs	r3, #1
    3a02:	6163      	str	r3, [r4, #20]
    3a04:	b005      	add	sp, #20
    3a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a08:	4b21      	ldr	r3, [pc, #132]	; (3a90 <setvbuf+0x150>)
    3a0a:	429c      	cmp	r4, r3
    3a0c:	d101      	bne.n	3a12 <setvbuf+0xd2>
    3a0e:	68b4      	ldr	r4, [r6, #8]
    3a10:	e7aa      	b.n	3968 <setvbuf+0x28>
    3a12:	4b20      	ldr	r3, [pc, #128]	; (3a94 <setvbuf+0x154>)
    3a14:	429c      	cmp	r4, r3
    3a16:	d1a7      	bne.n	3968 <setvbuf+0x28>
    3a18:	68f4      	ldr	r4, [r6, #12]
    3a1a:	e7a5      	b.n	3968 <setvbuf+0x28>
    3a1c:	2f00      	cmp	r7, #0
    3a1e:	d0d9      	beq.n	39d4 <setvbuf+0x94>
    3a20:	69b3      	ldr	r3, [r6, #24]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d102      	bne.n	3a2c <setvbuf+0xec>
    3a26:	0030      	movs	r0, r6
    3a28:	f000 f9fa 	bl	3e20 <__sinit>
    3a2c:	9b00      	ldr	r3, [sp, #0]
    3a2e:	2b01      	cmp	r3, #1
    3a30:	d103      	bne.n	3a3a <setvbuf+0xfa>
    3a32:	89a3      	ldrh	r3, [r4, #12]
    3a34:	9a00      	ldr	r2, [sp, #0]
    3a36:	431a      	orrs	r2, r3
    3a38:	81a2      	strh	r2, [r4, #12]
    3a3a:	2008      	movs	r0, #8
    3a3c:	89a3      	ldrh	r3, [r4, #12]
    3a3e:	6027      	str	r7, [r4, #0]
    3a40:	6127      	str	r7, [r4, #16]
    3a42:	6165      	str	r5, [r4, #20]
    3a44:	4018      	ands	r0, r3
    3a46:	d018      	beq.n	3a7a <setvbuf+0x13a>
    3a48:	2001      	movs	r0, #1
    3a4a:	4018      	ands	r0, r3
    3a4c:	2300      	movs	r3, #0
    3a4e:	4298      	cmp	r0, r3
    3a50:	d011      	beq.n	3a76 <setvbuf+0x136>
    3a52:	426d      	negs	r5, r5
    3a54:	60a3      	str	r3, [r4, #8]
    3a56:	61a5      	str	r5, [r4, #24]
    3a58:	0018      	movs	r0, r3
    3a5a:	e7d3      	b.n	3a04 <setvbuf+0xc4>
    3a5c:	9801      	ldr	r0, [sp, #4]
    3a5e:	f000 fae1 	bl	4024 <malloc>
    3a62:	1e07      	subs	r7, r0, #0
    3a64:	d0c0      	beq.n	39e8 <setvbuf+0xa8>
    3a66:	2380      	movs	r3, #128	; 0x80
    3a68:	89a2      	ldrh	r2, [r4, #12]
    3a6a:	9d01      	ldr	r5, [sp, #4]
    3a6c:	4313      	orrs	r3, r2
    3a6e:	81a3      	strh	r3, [r4, #12]
    3a70:	e7d6      	b.n	3a20 <setvbuf+0xe0>
    3a72:	2000      	movs	r0, #0
    3a74:	e7ba      	b.n	39ec <setvbuf+0xac>
    3a76:	60a5      	str	r5, [r4, #8]
    3a78:	e7c4      	b.n	3a04 <setvbuf+0xc4>
    3a7a:	60a0      	str	r0, [r4, #8]
    3a7c:	e7c2      	b.n	3a04 <setvbuf+0xc4>
    3a7e:	2001      	movs	r0, #1
    3a80:	4240      	negs	r0, r0
    3a82:	e7bf      	b.n	3a04 <setvbuf+0xc4>
    3a84:	2000002c 	.word	0x2000002c
    3a88:	00004e08 	.word	0x00004e08
    3a8c:	fffff35c 	.word	0xfffff35c
    3a90:	00004e28 	.word	0x00004e28
    3a94:	00004de8 	.word	0x00004de8

00003a98 <__swbuf_r>:
    3a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a9a:	0005      	movs	r5, r0
    3a9c:	000e      	movs	r6, r1
    3a9e:	0014      	movs	r4, r2
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d004      	beq.n	3aae <__swbuf_r+0x16>
    3aa4:	6983      	ldr	r3, [r0, #24]
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d101      	bne.n	3aae <__swbuf_r+0x16>
    3aaa:	f000 f9b9 	bl	3e20 <__sinit>
    3aae:	4b22      	ldr	r3, [pc, #136]	; (3b38 <__swbuf_r+0xa0>)
    3ab0:	429c      	cmp	r4, r3
    3ab2:	d12d      	bne.n	3b10 <__swbuf_r+0x78>
    3ab4:	686c      	ldr	r4, [r5, #4]
    3ab6:	69a3      	ldr	r3, [r4, #24]
    3ab8:	60a3      	str	r3, [r4, #8]
    3aba:	89a3      	ldrh	r3, [r4, #12]
    3abc:	071b      	lsls	r3, r3, #28
    3abe:	d531      	bpl.n	3b24 <__swbuf_r+0x8c>
    3ac0:	6923      	ldr	r3, [r4, #16]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d02e      	beq.n	3b24 <__swbuf_r+0x8c>
    3ac6:	6823      	ldr	r3, [r4, #0]
    3ac8:	6922      	ldr	r2, [r4, #16]
    3aca:	b2f7      	uxtb	r7, r6
    3acc:	1a98      	subs	r0, r3, r2
    3ace:	6963      	ldr	r3, [r4, #20]
    3ad0:	b2f6      	uxtb	r6, r6
    3ad2:	4298      	cmp	r0, r3
    3ad4:	db05      	blt.n	3ae2 <__swbuf_r+0x4a>
    3ad6:	0021      	movs	r1, r4
    3ad8:	0028      	movs	r0, r5
    3ada:	f000 f933 	bl	3d44 <_fflush_r>
    3ade:	2800      	cmp	r0, #0
    3ae0:	d126      	bne.n	3b30 <__swbuf_r+0x98>
    3ae2:	68a3      	ldr	r3, [r4, #8]
    3ae4:	3001      	adds	r0, #1
    3ae6:	3b01      	subs	r3, #1
    3ae8:	60a3      	str	r3, [r4, #8]
    3aea:	6823      	ldr	r3, [r4, #0]
    3aec:	1c5a      	adds	r2, r3, #1
    3aee:	6022      	str	r2, [r4, #0]
    3af0:	701f      	strb	r7, [r3, #0]
    3af2:	6963      	ldr	r3, [r4, #20]
    3af4:	4298      	cmp	r0, r3
    3af6:	d004      	beq.n	3b02 <__swbuf_r+0x6a>
    3af8:	89a3      	ldrh	r3, [r4, #12]
    3afa:	07db      	lsls	r3, r3, #31
    3afc:	d51a      	bpl.n	3b34 <__swbuf_r+0x9c>
    3afe:	2e0a      	cmp	r6, #10
    3b00:	d118      	bne.n	3b34 <__swbuf_r+0x9c>
    3b02:	0021      	movs	r1, r4
    3b04:	0028      	movs	r0, r5
    3b06:	f000 f91d 	bl	3d44 <_fflush_r>
    3b0a:	2800      	cmp	r0, #0
    3b0c:	d012      	beq.n	3b34 <__swbuf_r+0x9c>
    3b0e:	e00f      	b.n	3b30 <__swbuf_r+0x98>
    3b10:	4b0a      	ldr	r3, [pc, #40]	; (3b3c <__swbuf_r+0xa4>)
    3b12:	429c      	cmp	r4, r3
    3b14:	d101      	bne.n	3b1a <__swbuf_r+0x82>
    3b16:	68ac      	ldr	r4, [r5, #8]
    3b18:	e7cd      	b.n	3ab6 <__swbuf_r+0x1e>
    3b1a:	4b09      	ldr	r3, [pc, #36]	; (3b40 <__swbuf_r+0xa8>)
    3b1c:	429c      	cmp	r4, r3
    3b1e:	d1ca      	bne.n	3ab6 <__swbuf_r+0x1e>
    3b20:	68ec      	ldr	r4, [r5, #12]
    3b22:	e7c8      	b.n	3ab6 <__swbuf_r+0x1e>
    3b24:	0021      	movs	r1, r4
    3b26:	0028      	movs	r0, r5
    3b28:	f000 f80c 	bl	3b44 <__swsetup_r>
    3b2c:	2800      	cmp	r0, #0
    3b2e:	d0ca      	beq.n	3ac6 <__swbuf_r+0x2e>
    3b30:	2601      	movs	r6, #1
    3b32:	4276      	negs	r6, r6
    3b34:	0030      	movs	r0, r6
    3b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b38:	00004e08 	.word	0x00004e08
    3b3c:	00004e28 	.word	0x00004e28
    3b40:	00004de8 	.word	0x00004de8

00003b44 <__swsetup_r>:
    3b44:	4b36      	ldr	r3, [pc, #216]	; (3c20 <__swsetup_r+0xdc>)
    3b46:	b570      	push	{r4, r5, r6, lr}
    3b48:	681d      	ldr	r5, [r3, #0]
    3b4a:	0006      	movs	r6, r0
    3b4c:	000c      	movs	r4, r1
    3b4e:	2d00      	cmp	r5, #0
    3b50:	d005      	beq.n	3b5e <__swsetup_r+0x1a>
    3b52:	69ab      	ldr	r3, [r5, #24]
    3b54:	2b00      	cmp	r3, #0
    3b56:	d102      	bne.n	3b5e <__swsetup_r+0x1a>
    3b58:	0028      	movs	r0, r5
    3b5a:	f000 f961 	bl	3e20 <__sinit>
    3b5e:	4b31      	ldr	r3, [pc, #196]	; (3c24 <__swsetup_r+0xe0>)
    3b60:	429c      	cmp	r4, r3
    3b62:	d10f      	bne.n	3b84 <__swsetup_r+0x40>
    3b64:	686c      	ldr	r4, [r5, #4]
    3b66:	230c      	movs	r3, #12
    3b68:	5ee2      	ldrsh	r2, [r4, r3]
    3b6a:	b293      	uxth	r3, r2
    3b6c:	0719      	lsls	r1, r3, #28
    3b6e:	d42d      	bmi.n	3bcc <__swsetup_r+0x88>
    3b70:	06d9      	lsls	r1, r3, #27
    3b72:	d411      	bmi.n	3b98 <__swsetup_r+0x54>
    3b74:	2309      	movs	r3, #9
    3b76:	2001      	movs	r0, #1
    3b78:	6033      	str	r3, [r6, #0]
    3b7a:	3337      	adds	r3, #55	; 0x37
    3b7c:	4313      	orrs	r3, r2
    3b7e:	81a3      	strh	r3, [r4, #12]
    3b80:	4240      	negs	r0, r0
    3b82:	bd70      	pop	{r4, r5, r6, pc}
    3b84:	4b28      	ldr	r3, [pc, #160]	; (3c28 <__swsetup_r+0xe4>)
    3b86:	429c      	cmp	r4, r3
    3b88:	d101      	bne.n	3b8e <__swsetup_r+0x4a>
    3b8a:	68ac      	ldr	r4, [r5, #8]
    3b8c:	e7eb      	b.n	3b66 <__swsetup_r+0x22>
    3b8e:	4b27      	ldr	r3, [pc, #156]	; (3c2c <__swsetup_r+0xe8>)
    3b90:	429c      	cmp	r4, r3
    3b92:	d1e8      	bne.n	3b66 <__swsetup_r+0x22>
    3b94:	68ec      	ldr	r4, [r5, #12]
    3b96:	e7e6      	b.n	3b66 <__swsetup_r+0x22>
    3b98:	075b      	lsls	r3, r3, #29
    3b9a:	d513      	bpl.n	3bc4 <__swsetup_r+0x80>
    3b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3b9e:	2900      	cmp	r1, #0
    3ba0:	d008      	beq.n	3bb4 <__swsetup_r+0x70>
    3ba2:	0023      	movs	r3, r4
    3ba4:	3344      	adds	r3, #68	; 0x44
    3ba6:	4299      	cmp	r1, r3
    3ba8:	d002      	beq.n	3bb0 <__swsetup_r+0x6c>
    3baa:	0030      	movs	r0, r6
    3bac:	f000 fa44 	bl	4038 <_free_r>
    3bb0:	2300      	movs	r3, #0
    3bb2:	6363      	str	r3, [r4, #52]	; 0x34
    3bb4:	2224      	movs	r2, #36	; 0x24
    3bb6:	89a3      	ldrh	r3, [r4, #12]
    3bb8:	4393      	bics	r3, r2
    3bba:	81a3      	strh	r3, [r4, #12]
    3bbc:	2300      	movs	r3, #0
    3bbe:	6063      	str	r3, [r4, #4]
    3bc0:	6923      	ldr	r3, [r4, #16]
    3bc2:	6023      	str	r3, [r4, #0]
    3bc4:	2308      	movs	r3, #8
    3bc6:	89a2      	ldrh	r2, [r4, #12]
    3bc8:	4313      	orrs	r3, r2
    3bca:	81a3      	strh	r3, [r4, #12]
    3bcc:	6923      	ldr	r3, [r4, #16]
    3bce:	2b00      	cmp	r3, #0
    3bd0:	d10b      	bne.n	3bea <__swsetup_r+0xa6>
    3bd2:	21a0      	movs	r1, #160	; 0xa0
    3bd4:	2280      	movs	r2, #128	; 0x80
    3bd6:	89a3      	ldrh	r3, [r4, #12]
    3bd8:	0089      	lsls	r1, r1, #2
    3bda:	0092      	lsls	r2, r2, #2
    3bdc:	400b      	ands	r3, r1
    3bde:	4293      	cmp	r3, r2
    3be0:	d003      	beq.n	3bea <__swsetup_r+0xa6>
    3be2:	0021      	movs	r1, r4
    3be4:	0030      	movs	r0, r6
    3be6:	f000 f9d9 	bl	3f9c <__smakebuf_r>
    3bea:	2301      	movs	r3, #1
    3bec:	89a2      	ldrh	r2, [r4, #12]
    3bee:	4013      	ands	r3, r2
    3bf0:	d011      	beq.n	3c16 <__swsetup_r+0xd2>
    3bf2:	2300      	movs	r3, #0
    3bf4:	60a3      	str	r3, [r4, #8]
    3bf6:	6963      	ldr	r3, [r4, #20]
    3bf8:	425b      	negs	r3, r3
    3bfa:	61a3      	str	r3, [r4, #24]
    3bfc:	2000      	movs	r0, #0
    3bfe:	6923      	ldr	r3, [r4, #16]
    3c00:	4283      	cmp	r3, r0
    3c02:	d1be      	bne.n	3b82 <__swsetup_r+0x3e>
    3c04:	230c      	movs	r3, #12
    3c06:	5ee2      	ldrsh	r2, [r4, r3]
    3c08:	0613      	lsls	r3, r2, #24
    3c0a:	d5ba      	bpl.n	3b82 <__swsetup_r+0x3e>
    3c0c:	2340      	movs	r3, #64	; 0x40
    3c0e:	4313      	orrs	r3, r2
    3c10:	81a3      	strh	r3, [r4, #12]
    3c12:	3801      	subs	r0, #1
    3c14:	e7b5      	b.n	3b82 <__swsetup_r+0x3e>
    3c16:	0792      	lsls	r2, r2, #30
    3c18:	d400      	bmi.n	3c1c <__swsetup_r+0xd8>
    3c1a:	6963      	ldr	r3, [r4, #20]
    3c1c:	60a3      	str	r3, [r4, #8]
    3c1e:	e7ed      	b.n	3bfc <__swsetup_r+0xb8>
    3c20:	2000002c 	.word	0x2000002c
    3c24:	00004e08 	.word	0x00004e08
    3c28:	00004e28 	.word	0x00004e28
    3c2c:	00004de8 	.word	0x00004de8

00003c30 <__sflush_r>:
    3c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c32:	898a      	ldrh	r2, [r1, #12]
    3c34:	0005      	movs	r5, r0
    3c36:	000c      	movs	r4, r1
    3c38:	0713      	lsls	r3, r2, #28
    3c3a:	d460      	bmi.n	3cfe <__sflush_r+0xce>
    3c3c:	684b      	ldr	r3, [r1, #4]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	dc04      	bgt.n	3c4c <__sflush_r+0x1c>
    3c42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3c44:	2b00      	cmp	r3, #0
    3c46:	dc01      	bgt.n	3c4c <__sflush_r+0x1c>
    3c48:	2000      	movs	r0, #0
    3c4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3c4e:	2f00      	cmp	r7, #0
    3c50:	d0fa      	beq.n	3c48 <__sflush_r+0x18>
    3c52:	2300      	movs	r3, #0
    3c54:	682e      	ldr	r6, [r5, #0]
    3c56:	602b      	str	r3, [r5, #0]
    3c58:	2380      	movs	r3, #128	; 0x80
    3c5a:	015b      	lsls	r3, r3, #5
    3c5c:	401a      	ands	r2, r3
    3c5e:	d034      	beq.n	3cca <__sflush_r+0x9a>
    3c60:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3c62:	89a3      	ldrh	r3, [r4, #12]
    3c64:	075b      	lsls	r3, r3, #29
    3c66:	d506      	bpl.n	3c76 <__sflush_r+0x46>
    3c68:	6863      	ldr	r3, [r4, #4]
    3c6a:	1ac0      	subs	r0, r0, r3
    3c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d001      	beq.n	3c76 <__sflush_r+0x46>
    3c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3c74:	1ac0      	subs	r0, r0, r3
    3c76:	0002      	movs	r2, r0
    3c78:	6a21      	ldr	r1, [r4, #32]
    3c7a:	2300      	movs	r3, #0
    3c7c:	0028      	movs	r0, r5
    3c7e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3c80:	47b8      	blx	r7
    3c82:	89a1      	ldrh	r1, [r4, #12]
    3c84:	1c43      	adds	r3, r0, #1
    3c86:	d106      	bne.n	3c96 <__sflush_r+0x66>
    3c88:	682b      	ldr	r3, [r5, #0]
    3c8a:	2b1d      	cmp	r3, #29
    3c8c:	d831      	bhi.n	3cf2 <__sflush_r+0xc2>
    3c8e:	4a2c      	ldr	r2, [pc, #176]	; (3d40 <__sflush_r+0x110>)
    3c90:	40da      	lsrs	r2, r3
    3c92:	07d3      	lsls	r3, r2, #31
    3c94:	d52d      	bpl.n	3cf2 <__sflush_r+0xc2>
    3c96:	2300      	movs	r3, #0
    3c98:	6063      	str	r3, [r4, #4]
    3c9a:	6923      	ldr	r3, [r4, #16]
    3c9c:	6023      	str	r3, [r4, #0]
    3c9e:	04cb      	lsls	r3, r1, #19
    3ca0:	d505      	bpl.n	3cae <__sflush_r+0x7e>
    3ca2:	1c43      	adds	r3, r0, #1
    3ca4:	d102      	bne.n	3cac <__sflush_r+0x7c>
    3ca6:	682b      	ldr	r3, [r5, #0]
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d100      	bne.n	3cae <__sflush_r+0x7e>
    3cac:	6560      	str	r0, [r4, #84]	; 0x54
    3cae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3cb0:	602e      	str	r6, [r5, #0]
    3cb2:	2900      	cmp	r1, #0
    3cb4:	d0c8      	beq.n	3c48 <__sflush_r+0x18>
    3cb6:	0023      	movs	r3, r4
    3cb8:	3344      	adds	r3, #68	; 0x44
    3cba:	4299      	cmp	r1, r3
    3cbc:	d002      	beq.n	3cc4 <__sflush_r+0x94>
    3cbe:	0028      	movs	r0, r5
    3cc0:	f000 f9ba 	bl	4038 <_free_r>
    3cc4:	2000      	movs	r0, #0
    3cc6:	6360      	str	r0, [r4, #52]	; 0x34
    3cc8:	e7bf      	b.n	3c4a <__sflush_r+0x1a>
    3cca:	2301      	movs	r3, #1
    3ccc:	6a21      	ldr	r1, [r4, #32]
    3cce:	0028      	movs	r0, r5
    3cd0:	47b8      	blx	r7
    3cd2:	1c43      	adds	r3, r0, #1
    3cd4:	d1c5      	bne.n	3c62 <__sflush_r+0x32>
    3cd6:	682b      	ldr	r3, [r5, #0]
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d0c2      	beq.n	3c62 <__sflush_r+0x32>
    3cdc:	2b1d      	cmp	r3, #29
    3cde:	d001      	beq.n	3ce4 <__sflush_r+0xb4>
    3ce0:	2b16      	cmp	r3, #22
    3ce2:	d101      	bne.n	3ce8 <__sflush_r+0xb8>
    3ce4:	602e      	str	r6, [r5, #0]
    3ce6:	e7af      	b.n	3c48 <__sflush_r+0x18>
    3ce8:	2340      	movs	r3, #64	; 0x40
    3cea:	89a2      	ldrh	r2, [r4, #12]
    3cec:	4313      	orrs	r3, r2
    3cee:	81a3      	strh	r3, [r4, #12]
    3cf0:	e7ab      	b.n	3c4a <__sflush_r+0x1a>
    3cf2:	2340      	movs	r3, #64	; 0x40
    3cf4:	430b      	orrs	r3, r1
    3cf6:	2001      	movs	r0, #1
    3cf8:	81a3      	strh	r3, [r4, #12]
    3cfa:	4240      	negs	r0, r0
    3cfc:	e7a5      	b.n	3c4a <__sflush_r+0x1a>
    3cfe:	690f      	ldr	r7, [r1, #16]
    3d00:	2f00      	cmp	r7, #0
    3d02:	d0a1      	beq.n	3c48 <__sflush_r+0x18>
    3d04:	680b      	ldr	r3, [r1, #0]
    3d06:	600f      	str	r7, [r1, #0]
    3d08:	1bdb      	subs	r3, r3, r7
    3d0a:	9301      	str	r3, [sp, #4]
    3d0c:	2300      	movs	r3, #0
    3d0e:	0792      	lsls	r2, r2, #30
    3d10:	d100      	bne.n	3d14 <__sflush_r+0xe4>
    3d12:	694b      	ldr	r3, [r1, #20]
    3d14:	60a3      	str	r3, [r4, #8]
    3d16:	9b01      	ldr	r3, [sp, #4]
    3d18:	2b00      	cmp	r3, #0
    3d1a:	dc00      	bgt.n	3d1e <__sflush_r+0xee>
    3d1c:	e794      	b.n	3c48 <__sflush_r+0x18>
    3d1e:	9b01      	ldr	r3, [sp, #4]
    3d20:	003a      	movs	r2, r7
    3d22:	6a21      	ldr	r1, [r4, #32]
    3d24:	0028      	movs	r0, r5
    3d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3d28:	47b0      	blx	r6
    3d2a:	2800      	cmp	r0, #0
    3d2c:	dc03      	bgt.n	3d36 <__sflush_r+0x106>
    3d2e:	2340      	movs	r3, #64	; 0x40
    3d30:	89a2      	ldrh	r2, [r4, #12]
    3d32:	4313      	orrs	r3, r2
    3d34:	e7df      	b.n	3cf6 <__sflush_r+0xc6>
    3d36:	9b01      	ldr	r3, [sp, #4]
    3d38:	183f      	adds	r7, r7, r0
    3d3a:	1a1b      	subs	r3, r3, r0
    3d3c:	9301      	str	r3, [sp, #4]
    3d3e:	e7ea      	b.n	3d16 <__sflush_r+0xe6>
    3d40:	20400001 	.word	0x20400001

00003d44 <_fflush_r>:
    3d44:	690b      	ldr	r3, [r1, #16]
    3d46:	b570      	push	{r4, r5, r6, lr}
    3d48:	0005      	movs	r5, r0
    3d4a:	000c      	movs	r4, r1
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d101      	bne.n	3d54 <_fflush_r+0x10>
    3d50:	2000      	movs	r0, #0
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	2800      	cmp	r0, #0
    3d56:	d004      	beq.n	3d62 <_fflush_r+0x1e>
    3d58:	6983      	ldr	r3, [r0, #24]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d101      	bne.n	3d62 <_fflush_r+0x1e>
    3d5e:	f000 f85f 	bl	3e20 <__sinit>
    3d62:	4b0b      	ldr	r3, [pc, #44]	; (3d90 <_fflush_r+0x4c>)
    3d64:	429c      	cmp	r4, r3
    3d66:	d109      	bne.n	3d7c <_fflush_r+0x38>
    3d68:	686c      	ldr	r4, [r5, #4]
    3d6a:	220c      	movs	r2, #12
    3d6c:	5ea3      	ldrsh	r3, [r4, r2]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d0ee      	beq.n	3d50 <_fflush_r+0xc>
    3d72:	0021      	movs	r1, r4
    3d74:	0028      	movs	r0, r5
    3d76:	f7ff ff5b 	bl	3c30 <__sflush_r>
    3d7a:	e7ea      	b.n	3d52 <_fflush_r+0xe>
    3d7c:	4b05      	ldr	r3, [pc, #20]	; (3d94 <_fflush_r+0x50>)
    3d7e:	429c      	cmp	r4, r3
    3d80:	d101      	bne.n	3d86 <_fflush_r+0x42>
    3d82:	68ac      	ldr	r4, [r5, #8]
    3d84:	e7f1      	b.n	3d6a <_fflush_r+0x26>
    3d86:	4b04      	ldr	r3, [pc, #16]	; (3d98 <_fflush_r+0x54>)
    3d88:	429c      	cmp	r4, r3
    3d8a:	d1ee      	bne.n	3d6a <_fflush_r+0x26>
    3d8c:	68ec      	ldr	r4, [r5, #12]
    3d8e:	e7ec      	b.n	3d6a <_fflush_r+0x26>
    3d90:	00004e08 	.word	0x00004e08
    3d94:	00004e28 	.word	0x00004e28
    3d98:	00004de8 	.word	0x00004de8

00003d9c <_cleanup_r>:
    3d9c:	b510      	push	{r4, lr}
    3d9e:	4902      	ldr	r1, [pc, #8]	; (3da8 <_cleanup_r+0xc>)
    3da0:	f000 f8b2 	bl	3f08 <_fwalk_reent>
    3da4:	bd10      	pop	{r4, pc}
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	00003d45 	.word	0x00003d45

00003dac <std.isra.0>:
    3dac:	2300      	movs	r3, #0
    3dae:	b510      	push	{r4, lr}
    3db0:	0004      	movs	r4, r0
    3db2:	6003      	str	r3, [r0, #0]
    3db4:	6043      	str	r3, [r0, #4]
    3db6:	6083      	str	r3, [r0, #8]
    3db8:	8181      	strh	r1, [r0, #12]
    3dba:	6643      	str	r3, [r0, #100]	; 0x64
    3dbc:	81c2      	strh	r2, [r0, #14]
    3dbe:	6103      	str	r3, [r0, #16]
    3dc0:	6143      	str	r3, [r0, #20]
    3dc2:	6183      	str	r3, [r0, #24]
    3dc4:	0019      	movs	r1, r3
    3dc6:	2208      	movs	r2, #8
    3dc8:	305c      	adds	r0, #92	; 0x5c
    3dca:	f7ff fd22 	bl	3812 <memset>
    3dce:	4b05      	ldr	r3, [pc, #20]	; (3de4 <std.isra.0+0x38>)
    3dd0:	6224      	str	r4, [r4, #32]
    3dd2:	6263      	str	r3, [r4, #36]	; 0x24
    3dd4:	4b04      	ldr	r3, [pc, #16]	; (3de8 <std.isra.0+0x3c>)
    3dd6:	62a3      	str	r3, [r4, #40]	; 0x28
    3dd8:	4b04      	ldr	r3, [pc, #16]	; (3dec <std.isra.0+0x40>)
    3dda:	62e3      	str	r3, [r4, #44]	; 0x2c
    3ddc:	4b04      	ldr	r3, [pc, #16]	; (3df0 <std.isra.0+0x44>)
    3dde:	6323      	str	r3, [r4, #48]	; 0x30
    3de0:	bd10      	pop	{r4, pc}
    3de2:	46c0      	nop			; (mov r8, r8)
    3de4:	00004745 	.word	0x00004745
    3de8:	0000476d 	.word	0x0000476d
    3dec:	000047a5 	.word	0x000047a5
    3df0:	000047d1 	.word	0x000047d1

00003df4 <__sfmoreglue>:
    3df4:	b570      	push	{r4, r5, r6, lr}
    3df6:	2568      	movs	r5, #104	; 0x68
    3df8:	1e4a      	subs	r2, r1, #1
    3dfa:	4355      	muls	r5, r2
    3dfc:	000e      	movs	r6, r1
    3dfe:	0029      	movs	r1, r5
    3e00:	3174      	adds	r1, #116	; 0x74
    3e02:	f000 f963 	bl	40cc <_malloc_r>
    3e06:	1e04      	subs	r4, r0, #0
    3e08:	d008      	beq.n	3e1c <__sfmoreglue+0x28>
    3e0a:	2100      	movs	r1, #0
    3e0c:	002a      	movs	r2, r5
    3e0e:	6001      	str	r1, [r0, #0]
    3e10:	6046      	str	r6, [r0, #4]
    3e12:	300c      	adds	r0, #12
    3e14:	60a0      	str	r0, [r4, #8]
    3e16:	3268      	adds	r2, #104	; 0x68
    3e18:	f7ff fcfb 	bl	3812 <memset>
    3e1c:	0020      	movs	r0, r4
    3e1e:	bd70      	pop	{r4, r5, r6, pc}

00003e20 <__sinit>:
    3e20:	6983      	ldr	r3, [r0, #24]
    3e22:	b513      	push	{r0, r1, r4, lr}
    3e24:	0004      	movs	r4, r0
    3e26:	2b00      	cmp	r3, #0
    3e28:	d128      	bne.n	3e7c <__sinit+0x5c>
    3e2a:	6483      	str	r3, [r0, #72]	; 0x48
    3e2c:	64c3      	str	r3, [r0, #76]	; 0x4c
    3e2e:	6503      	str	r3, [r0, #80]	; 0x50
    3e30:	4b13      	ldr	r3, [pc, #76]	; (3e80 <__sinit+0x60>)
    3e32:	4a14      	ldr	r2, [pc, #80]	; (3e84 <__sinit+0x64>)
    3e34:	681b      	ldr	r3, [r3, #0]
    3e36:	6282      	str	r2, [r0, #40]	; 0x28
    3e38:	9301      	str	r3, [sp, #4]
    3e3a:	4298      	cmp	r0, r3
    3e3c:	d101      	bne.n	3e42 <__sinit+0x22>
    3e3e:	2301      	movs	r3, #1
    3e40:	6183      	str	r3, [r0, #24]
    3e42:	0020      	movs	r0, r4
    3e44:	f000 f820 	bl	3e88 <__sfp>
    3e48:	6060      	str	r0, [r4, #4]
    3e4a:	0020      	movs	r0, r4
    3e4c:	f000 f81c 	bl	3e88 <__sfp>
    3e50:	60a0      	str	r0, [r4, #8]
    3e52:	0020      	movs	r0, r4
    3e54:	f000 f818 	bl	3e88 <__sfp>
    3e58:	2200      	movs	r2, #0
    3e5a:	60e0      	str	r0, [r4, #12]
    3e5c:	2104      	movs	r1, #4
    3e5e:	6860      	ldr	r0, [r4, #4]
    3e60:	f7ff ffa4 	bl	3dac <std.isra.0>
    3e64:	2201      	movs	r2, #1
    3e66:	2109      	movs	r1, #9
    3e68:	68a0      	ldr	r0, [r4, #8]
    3e6a:	f7ff ff9f 	bl	3dac <std.isra.0>
    3e6e:	2202      	movs	r2, #2
    3e70:	2112      	movs	r1, #18
    3e72:	68e0      	ldr	r0, [r4, #12]
    3e74:	f7ff ff9a 	bl	3dac <std.isra.0>
    3e78:	2301      	movs	r3, #1
    3e7a:	61a3      	str	r3, [r4, #24]
    3e7c:	bd13      	pop	{r0, r1, r4, pc}
    3e7e:	46c0      	nop			; (mov r8, r8)
    3e80:	00004de4 	.word	0x00004de4
    3e84:	00003d9d 	.word	0x00003d9d

00003e88 <__sfp>:
    3e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e8a:	4b1e      	ldr	r3, [pc, #120]	; (3f04 <__sfp+0x7c>)
    3e8c:	0007      	movs	r7, r0
    3e8e:	681e      	ldr	r6, [r3, #0]
    3e90:	69b3      	ldr	r3, [r6, #24]
    3e92:	2b00      	cmp	r3, #0
    3e94:	d102      	bne.n	3e9c <__sfp+0x14>
    3e96:	0030      	movs	r0, r6
    3e98:	f7ff ffc2 	bl	3e20 <__sinit>
    3e9c:	3648      	adds	r6, #72	; 0x48
    3e9e:	68b4      	ldr	r4, [r6, #8]
    3ea0:	6873      	ldr	r3, [r6, #4]
    3ea2:	3b01      	subs	r3, #1
    3ea4:	d504      	bpl.n	3eb0 <__sfp+0x28>
    3ea6:	6833      	ldr	r3, [r6, #0]
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d007      	beq.n	3ebc <__sfp+0x34>
    3eac:	6836      	ldr	r6, [r6, #0]
    3eae:	e7f6      	b.n	3e9e <__sfp+0x16>
    3eb0:	220c      	movs	r2, #12
    3eb2:	5ea5      	ldrsh	r5, [r4, r2]
    3eb4:	2d00      	cmp	r5, #0
    3eb6:	d00d      	beq.n	3ed4 <__sfp+0x4c>
    3eb8:	3468      	adds	r4, #104	; 0x68
    3eba:	e7f2      	b.n	3ea2 <__sfp+0x1a>
    3ebc:	2104      	movs	r1, #4
    3ebe:	0038      	movs	r0, r7
    3ec0:	f7ff ff98 	bl	3df4 <__sfmoreglue>
    3ec4:	6030      	str	r0, [r6, #0]
    3ec6:	2800      	cmp	r0, #0
    3ec8:	d1f0      	bne.n	3eac <__sfp+0x24>
    3eca:	230c      	movs	r3, #12
    3ecc:	0004      	movs	r4, r0
    3ece:	603b      	str	r3, [r7, #0]
    3ed0:	0020      	movs	r0, r4
    3ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ed4:	2301      	movs	r3, #1
    3ed6:	0020      	movs	r0, r4
    3ed8:	425b      	negs	r3, r3
    3eda:	81e3      	strh	r3, [r4, #14]
    3edc:	3302      	adds	r3, #2
    3ede:	81a3      	strh	r3, [r4, #12]
    3ee0:	6665      	str	r5, [r4, #100]	; 0x64
    3ee2:	6025      	str	r5, [r4, #0]
    3ee4:	60a5      	str	r5, [r4, #8]
    3ee6:	6065      	str	r5, [r4, #4]
    3ee8:	6125      	str	r5, [r4, #16]
    3eea:	6165      	str	r5, [r4, #20]
    3eec:	61a5      	str	r5, [r4, #24]
    3eee:	2208      	movs	r2, #8
    3ef0:	0029      	movs	r1, r5
    3ef2:	305c      	adds	r0, #92	; 0x5c
    3ef4:	f7ff fc8d 	bl	3812 <memset>
    3ef8:	6365      	str	r5, [r4, #52]	; 0x34
    3efa:	63a5      	str	r5, [r4, #56]	; 0x38
    3efc:	64a5      	str	r5, [r4, #72]	; 0x48
    3efe:	64e5      	str	r5, [r4, #76]	; 0x4c
    3f00:	e7e6      	b.n	3ed0 <__sfp+0x48>
    3f02:	46c0      	nop			; (mov r8, r8)
    3f04:	00004de4 	.word	0x00004de4

00003f08 <_fwalk_reent>:
    3f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f0a:	0004      	movs	r4, r0
    3f0c:	0007      	movs	r7, r0
    3f0e:	2600      	movs	r6, #0
    3f10:	9101      	str	r1, [sp, #4]
    3f12:	3448      	adds	r4, #72	; 0x48
    3f14:	2c00      	cmp	r4, #0
    3f16:	d101      	bne.n	3f1c <_fwalk_reent+0x14>
    3f18:	0030      	movs	r0, r6
    3f1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3f1c:	6863      	ldr	r3, [r4, #4]
    3f1e:	68a5      	ldr	r5, [r4, #8]
    3f20:	9300      	str	r3, [sp, #0]
    3f22:	9b00      	ldr	r3, [sp, #0]
    3f24:	3b01      	subs	r3, #1
    3f26:	9300      	str	r3, [sp, #0]
    3f28:	d501      	bpl.n	3f2e <_fwalk_reent+0x26>
    3f2a:	6824      	ldr	r4, [r4, #0]
    3f2c:	e7f2      	b.n	3f14 <_fwalk_reent+0xc>
    3f2e:	89ab      	ldrh	r3, [r5, #12]
    3f30:	2b01      	cmp	r3, #1
    3f32:	d908      	bls.n	3f46 <_fwalk_reent+0x3e>
    3f34:	220e      	movs	r2, #14
    3f36:	5eab      	ldrsh	r3, [r5, r2]
    3f38:	3301      	adds	r3, #1
    3f3a:	d004      	beq.n	3f46 <_fwalk_reent+0x3e>
    3f3c:	0029      	movs	r1, r5
    3f3e:	0038      	movs	r0, r7
    3f40:	9b01      	ldr	r3, [sp, #4]
    3f42:	4798      	blx	r3
    3f44:	4306      	orrs	r6, r0
    3f46:	3568      	adds	r5, #104	; 0x68
    3f48:	e7eb      	b.n	3f22 <_fwalk_reent+0x1a>
	...

00003f4c <__swhatbuf_r>:
    3f4c:	b570      	push	{r4, r5, r6, lr}
    3f4e:	000e      	movs	r6, r1
    3f50:	001d      	movs	r5, r3
    3f52:	230e      	movs	r3, #14
    3f54:	5ec9      	ldrsh	r1, [r1, r3]
    3f56:	b090      	sub	sp, #64	; 0x40
    3f58:	0014      	movs	r4, r2
    3f5a:	2900      	cmp	r1, #0
    3f5c:	da07      	bge.n	3f6e <__swhatbuf_r+0x22>
    3f5e:	2300      	movs	r3, #0
    3f60:	602b      	str	r3, [r5, #0]
    3f62:	89b3      	ldrh	r3, [r6, #12]
    3f64:	061b      	lsls	r3, r3, #24
    3f66:	d411      	bmi.n	3f8c <__swhatbuf_r+0x40>
    3f68:	2380      	movs	r3, #128	; 0x80
    3f6a:	00db      	lsls	r3, r3, #3
    3f6c:	e00f      	b.n	3f8e <__swhatbuf_r+0x42>
    3f6e:	aa01      	add	r2, sp, #4
    3f70:	f000 fc5a 	bl	4828 <_fstat_r>
    3f74:	2800      	cmp	r0, #0
    3f76:	dbf2      	blt.n	3f5e <__swhatbuf_r+0x12>
    3f78:	22f0      	movs	r2, #240	; 0xf0
    3f7a:	9b02      	ldr	r3, [sp, #8]
    3f7c:	0212      	lsls	r2, r2, #8
    3f7e:	4013      	ands	r3, r2
    3f80:	4a05      	ldr	r2, [pc, #20]	; (3f98 <__swhatbuf_r+0x4c>)
    3f82:	189b      	adds	r3, r3, r2
    3f84:	425a      	negs	r2, r3
    3f86:	4153      	adcs	r3, r2
    3f88:	602b      	str	r3, [r5, #0]
    3f8a:	e7ed      	b.n	3f68 <__swhatbuf_r+0x1c>
    3f8c:	2340      	movs	r3, #64	; 0x40
    3f8e:	2000      	movs	r0, #0
    3f90:	6023      	str	r3, [r4, #0]
    3f92:	b010      	add	sp, #64	; 0x40
    3f94:	bd70      	pop	{r4, r5, r6, pc}
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	ffffe000 	.word	0xffffe000

00003f9c <__smakebuf_r>:
    3f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f9e:	2602      	movs	r6, #2
    3fa0:	898b      	ldrh	r3, [r1, #12]
    3fa2:	0005      	movs	r5, r0
    3fa4:	000c      	movs	r4, r1
    3fa6:	4233      	tst	r3, r6
    3fa8:	d006      	beq.n	3fb8 <__smakebuf_r+0x1c>
    3faa:	0023      	movs	r3, r4
    3fac:	3347      	adds	r3, #71	; 0x47
    3fae:	6023      	str	r3, [r4, #0]
    3fb0:	6123      	str	r3, [r4, #16]
    3fb2:	2301      	movs	r3, #1
    3fb4:	6163      	str	r3, [r4, #20]
    3fb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3fb8:	ab01      	add	r3, sp, #4
    3fba:	466a      	mov	r2, sp
    3fbc:	f7ff ffc6 	bl	3f4c <__swhatbuf_r>
    3fc0:	9900      	ldr	r1, [sp, #0]
    3fc2:	0007      	movs	r7, r0
    3fc4:	0028      	movs	r0, r5
    3fc6:	f000 f881 	bl	40cc <_malloc_r>
    3fca:	2800      	cmp	r0, #0
    3fcc:	d108      	bne.n	3fe0 <__smakebuf_r+0x44>
    3fce:	220c      	movs	r2, #12
    3fd0:	5ea3      	ldrsh	r3, [r4, r2]
    3fd2:	059a      	lsls	r2, r3, #22
    3fd4:	d4ef      	bmi.n	3fb6 <__smakebuf_r+0x1a>
    3fd6:	2203      	movs	r2, #3
    3fd8:	4393      	bics	r3, r2
    3fda:	431e      	orrs	r6, r3
    3fdc:	81a6      	strh	r6, [r4, #12]
    3fde:	e7e4      	b.n	3faa <__smakebuf_r+0xe>
    3fe0:	4b0f      	ldr	r3, [pc, #60]	; (4020 <__smakebuf_r+0x84>)
    3fe2:	62ab      	str	r3, [r5, #40]	; 0x28
    3fe4:	2380      	movs	r3, #128	; 0x80
    3fe6:	89a2      	ldrh	r2, [r4, #12]
    3fe8:	6020      	str	r0, [r4, #0]
    3fea:	4313      	orrs	r3, r2
    3fec:	81a3      	strh	r3, [r4, #12]
    3fee:	9b00      	ldr	r3, [sp, #0]
    3ff0:	6120      	str	r0, [r4, #16]
    3ff2:	6163      	str	r3, [r4, #20]
    3ff4:	9b01      	ldr	r3, [sp, #4]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d00d      	beq.n	4016 <__smakebuf_r+0x7a>
    3ffa:	230e      	movs	r3, #14
    3ffc:	5ee1      	ldrsh	r1, [r4, r3]
    3ffe:	0028      	movs	r0, r5
    4000:	f000 fc24 	bl	484c <_isatty_r>
    4004:	2800      	cmp	r0, #0
    4006:	d006      	beq.n	4016 <__smakebuf_r+0x7a>
    4008:	2203      	movs	r2, #3
    400a:	89a3      	ldrh	r3, [r4, #12]
    400c:	4393      	bics	r3, r2
    400e:	001a      	movs	r2, r3
    4010:	2301      	movs	r3, #1
    4012:	4313      	orrs	r3, r2
    4014:	81a3      	strh	r3, [r4, #12]
    4016:	89a0      	ldrh	r0, [r4, #12]
    4018:	4338      	orrs	r0, r7
    401a:	81a0      	strh	r0, [r4, #12]
    401c:	e7cb      	b.n	3fb6 <__smakebuf_r+0x1a>
    401e:	46c0      	nop			; (mov r8, r8)
    4020:	00003d9d 	.word	0x00003d9d

00004024 <malloc>:
    4024:	b510      	push	{r4, lr}
    4026:	4b03      	ldr	r3, [pc, #12]	; (4034 <malloc+0x10>)
    4028:	0001      	movs	r1, r0
    402a:	6818      	ldr	r0, [r3, #0]
    402c:	f000 f84e 	bl	40cc <_malloc_r>
    4030:	bd10      	pop	{r4, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	2000002c 	.word	0x2000002c

00004038 <_free_r>:
    4038:	b570      	push	{r4, r5, r6, lr}
    403a:	0005      	movs	r5, r0
    403c:	2900      	cmp	r1, #0
    403e:	d010      	beq.n	4062 <_free_r+0x2a>
    4040:	1f0c      	subs	r4, r1, #4
    4042:	6823      	ldr	r3, [r4, #0]
    4044:	2b00      	cmp	r3, #0
    4046:	da00      	bge.n	404a <_free_r+0x12>
    4048:	18e4      	adds	r4, r4, r3
    404a:	0028      	movs	r0, r5
    404c:	f000 fc2f 	bl	48ae <__malloc_lock>
    4050:	4a1d      	ldr	r2, [pc, #116]	; (40c8 <_free_r+0x90>)
    4052:	6813      	ldr	r3, [r2, #0]
    4054:	2b00      	cmp	r3, #0
    4056:	d105      	bne.n	4064 <_free_r+0x2c>
    4058:	6063      	str	r3, [r4, #4]
    405a:	6014      	str	r4, [r2, #0]
    405c:	0028      	movs	r0, r5
    405e:	f000 fc27 	bl	48b0 <__malloc_unlock>
    4062:	bd70      	pop	{r4, r5, r6, pc}
    4064:	42a3      	cmp	r3, r4
    4066:	d909      	bls.n	407c <_free_r+0x44>
    4068:	6821      	ldr	r1, [r4, #0]
    406a:	1860      	adds	r0, r4, r1
    406c:	4283      	cmp	r3, r0
    406e:	d1f3      	bne.n	4058 <_free_r+0x20>
    4070:	6818      	ldr	r0, [r3, #0]
    4072:	685b      	ldr	r3, [r3, #4]
    4074:	1841      	adds	r1, r0, r1
    4076:	6021      	str	r1, [r4, #0]
    4078:	e7ee      	b.n	4058 <_free_r+0x20>
    407a:	0013      	movs	r3, r2
    407c:	685a      	ldr	r2, [r3, #4]
    407e:	2a00      	cmp	r2, #0
    4080:	d001      	beq.n	4086 <_free_r+0x4e>
    4082:	42a2      	cmp	r2, r4
    4084:	d9f9      	bls.n	407a <_free_r+0x42>
    4086:	6819      	ldr	r1, [r3, #0]
    4088:	1858      	adds	r0, r3, r1
    408a:	42a0      	cmp	r0, r4
    408c:	d10b      	bne.n	40a6 <_free_r+0x6e>
    408e:	6820      	ldr	r0, [r4, #0]
    4090:	1809      	adds	r1, r1, r0
    4092:	1858      	adds	r0, r3, r1
    4094:	6019      	str	r1, [r3, #0]
    4096:	4282      	cmp	r2, r0
    4098:	d1e0      	bne.n	405c <_free_r+0x24>
    409a:	6810      	ldr	r0, [r2, #0]
    409c:	6852      	ldr	r2, [r2, #4]
    409e:	1841      	adds	r1, r0, r1
    40a0:	6019      	str	r1, [r3, #0]
    40a2:	605a      	str	r2, [r3, #4]
    40a4:	e7da      	b.n	405c <_free_r+0x24>
    40a6:	42a0      	cmp	r0, r4
    40a8:	d902      	bls.n	40b0 <_free_r+0x78>
    40aa:	230c      	movs	r3, #12
    40ac:	602b      	str	r3, [r5, #0]
    40ae:	e7d5      	b.n	405c <_free_r+0x24>
    40b0:	6821      	ldr	r1, [r4, #0]
    40b2:	1860      	adds	r0, r4, r1
    40b4:	4282      	cmp	r2, r0
    40b6:	d103      	bne.n	40c0 <_free_r+0x88>
    40b8:	6810      	ldr	r0, [r2, #0]
    40ba:	6852      	ldr	r2, [r2, #4]
    40bc:	1841      	adds	r1, r0, r1
    40be:	6021      	str	r1, [r4, #0]
    40c0:	6062      	str	r2, [r4, #4]
    40c2:	605c      	str	r4, [r3, #4]
    40c4:	e7ca      	b.n	405c <_free_r+0x24>
    40c6:	46c0      	nop			; (mov r8, r8)
    40c8:	200001a4 	.word	0x200001a4

000040cc <_malloc_r>:
    40cc:	2303      	movs	r3, #3
    40ce:	b570      	push	{r4, r5, r6, lr}
    40d0:	1ccd      	adds	r5, r1, #3
    40d2:	439d      	bics	r5, r3
    40d4:	3508      	adds	r5, #8
    40d6:	0006      	movs	r6, r0
    40d8:	2d0c      	cmp	r5, #12
    40da:	d21e      	bcs.n	411a <_malloc_r+0x4e>
    40dc:	250c      	movs	r5, #12
    40de:	42a9      	cmp	r1, r5
    40e0:	d81d      	bhi.n	411e <_malloc_r+0x52>
    40e2:	0030      	movs	r0, r6
    40e4:	f000 fbe3 	bl	48ae <__malloc_lock>
    40e8:	4a25      	ldr	r2, [pc, #148]	; (4180 <_malloc_r+0xb4>)
    40ea:	6814      	ldr	r4, [r2, #0]
    40ec:	0021      	movs	r1, r4
    40ee:	2900      	cmp	r1, #0
    40f0:	d119      	bne.n	4126 <_malloc_r+0x5a>
    40f2:	4c24      	ldr	r4, [pc, #144]	; (4184 <_malloc_r+0xb8>)
    40f4:	6823      	ldr	r3, [r4, #0]
    40f6:	2b00      	cmp	r3, #0
    40f8:	d103      	bne.n	4102 <_malloc_r+0x36>
    40fa:	0030      	movs	r0, r6
    40fc:	f000 fb10 	bl	4720 <_sbrk_r>
    4100:	6020      	str	r0, [r4, #0]
    4102:	0029      	movs	r1, r5
    4104:	0030      	movs	r0, r6
    4106:	f000 fb0b 	bl	4720 <_sbrk_r>
    410a:	1c43      	adds	r3, r0, #1
    410c:	d12c      	bne.n	4168 <_malloc_r+0x9c>
    410e:	230c      	movs	r3, #12
    4110:	0030      	movs	r0, r6
    4112:	6033      	str	r3, [r6, #0]
    4114:	f000 fbcc 	bl	48b0 <__malloc_unlock>
    4118:	e003      	b.n	4122 <_malloc_r+0x56>
    411a:	2d00      	cmp	r5, #0
    411c:	dadf      	bge.n	40de <_malloc_r+0x12>
    411e:	230c      	movs	r3, #12
    4120:	6033      	str	r3, [r6, #0]
    4122:	2000      	movs	r0, #0
    4124:	bd70      	pop	{r4, r5, r6, pc}
    4126:	680b      	ldr	r3, [r1, #0]
    4128:	1b5b      	subs	r3, r3, r5
    412a:	d41a      	bmi.n	4162 <_malloc_r+0x96>
    412c:	2b0b      	cmp	r3, #11
    412e:	d903      	bls.n	4138 <_malloc_r+0x6c>
    4130:	600b      	str	r3, [r1, #0]
    4132:	18cc      	adds	r4, r1, r3
    4134:	6025      	str	r5, [r4, #0]
    4136:	e003      	b.n	4140 <_malloc_r+0x74>
    4138:	428c      	cmp	r4, r1
    413a:	d10e      	bne.n	415a <_malloc_r+0x8e>
    413c:	6863      	ldr	r3, [r4, #4]
    413e:	6013      	str	r3, [r2, #0]
    4140:	0030      	movs	r0, r6
    4142:	f000 fbb5 	bl	48b0 <__malloc_unlock>
    4146:	0020      	movs	r0, r4
    4148:	2207      	movs	r2, #7
    414a:	300b      	adds	r0, #11
    414c:	1d23      	adds	r3, r4, #4
    414e:	4390      	bics	r0, r2
    4150:	1ac3      	subs	r3, r0, r3
    4152:	d0e7      	beq.n	4124 <_malloc_r+0x58>
    4154:	425a      	negs	r2, r3
    4156:	50e2      	str	r2, [r4, r3]
    4158:	e7e4      	b.n	4124 <_malloc_r+0x58>
    415a:	684b      	ldr	r3, [r1, #4]
    415c:	6063      	str	r3, [r4, #4]
    415e:	000c      	movs	r4, r1
    4160:	e7ee      	b.n	4140 <_malloc_r+0x74>
    4162:	000c      	movs	r4, r1
    4164:	6849      	ldr	r1, [r1, #4]
    4166:	e7c2      	b.n	40ee <_malloc_r+0x22>
    4168:	2303      	movs	r3, #3
    416a:	1cc4      	adds	r4, r0, #3
    416c:	439c      	bics	r4, r3
    416e:	42a0      	cmp	r0, r4
    4170:	d0e0      	beq.n	4134 <_malloc_r+0x68>
    4172:	1a21      	subs	r1, r4, r0
    4174:	0030      	movs	r0, r6
    4176:	f000 fad3 	bl	4720 <_sbrk_r>
    417a:	1c43      	adds	r3, r0, #1
    417c:	d1da      	bne.n	4134 <_malloc_r+0x68>
    417e:	e7c6      	b.n	410e <_malloc_r+0x42>
    4180:	200001a4 	.word	0x200001a4
    4184:	200001a8 	.word	0x200001a8

00004188 <__sfputc_r>:
    4188:	6893      	ldr	r3, [r2, #8]
    418a:	b510      	push	{r4, lr}
    418c:	3b01      	subs	r3, #1
    418e:	6093      	str	r3, [r2, #8]
    4190:	2b00      	cmp	r3, #0
    4192:	da05      	bge.n	41a0 <__sfputc_r+0x18>
    4194:	6994      	ldr	r4, [r2, #24]
    4196:	42a3      	cmp	r3, r4
    4198:	db08      	blt.n	41ac <__sfputc_r+0x24>
    419a:	b2cb      	uxtb	r3, r1
    419c:	2b0a      	cmp	r3, #10
    419e:	d005      	beq.n	41ac <__sfputc_r+0x24>
    41a0:	6813      	ldr	r3, [r2, #0]
    41a2:	1c58      	adds	r0, r3, #1
    41a4:	6010      	str	r0, [r2, #0]
    41a6:	7019      	strb	r1, [r3, #0]
    41a8:	b2c8      	uxtb	r0, r1
    41aa:	bd10      	pop	{r4, pc}
    41ac:	f7ff fc74 	bl	3a98 <__swbuf_r>
    41b0:	e7fb      	b.n	41aa <__sfputc_r+0x22>

000041b2 <__sfputs_r>:
    41b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41b4:	0006      	movs	r6, r0
    41b6:	000f      	movs	r7, r1
    41b8:	0014      	movs	r4, r2
    41ba:	18d5      	adds	r5, r2, r3
    41bc:	42ac      	cmp	r4, r5
    41be:	d101      	bne.n	41c4 <__sfputs_r+0x12>
    41c0:	2000      	movs	r0, #0
    41c2:	e007      	b.n	41d4 <__sfputs_r+0x22>
    41c4:	7821      	ldrb	r1, [r4, #0]
    41c6:	003a      	movs	r2, r7
    41c8:	0030      	movs	r0, r6
    41ca:	f7ff ffdd 	bl	4188 <__sfputc_r>
    41ce:	3401      	adds	r4, #1
    41d0:	1c43      	adds	r3, r0, #1
    41d2:	d1f3      	bne.n	41bc <__sfputs_r+0xa>
    41d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000041d8 <_vfiprintf_r>:
    41d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41da:	b09f      	sub	sp, #124	; 0x7c
    41dc:	0006      	movs	r6, r0
    41de:	000f      	movs	r7, r1
    41e0:	0014      	movs	r4, r2
    41e2:	9305      	str	r3, [sp, #20]
    41e4:	2800      	cmp	r0, #0
    41e6:	d004      	beq.n	41f2 <_vfiprintf_r+0x1a>
    41e8:	6983      	ldr	r3, [r0, #24]
    41ea:	2b00      	cmp	r3, #0
    41ec:	d101      	bne.n	41f2 <_vfiprintf_r+0x1a>
    41ee:	f7ff fe17 	bl	3e20 <__sinit>
    41f2:	4b7f      	ldr	r3, [pc, #508]	; (43f0 <_vfiprintf_r+0x218>)
    41f4:	429f      	cmp	r7, r3
    41f6:	d15c      	bne.n	42b2 <_vfiprintf_r+0xda>
    41f8:	6877      	ldr	r7, [r6, #4]
    41fa:	89bb      	ldrh	r3, [r7, #12]
    41fc:	071b      	lsls	r3, r3, #28
    41fe:	d562      	bpl.n	42c6 <_vfiprintf_r+0xee>
    4200:	693b      	ldr	r3, [r7, #16]
    4202:	2b00      	cmp	r3, #0
    4204:	d05f      	beq.n	42c6 <_vfiprintf_r+0xee>
    4206:	2300      	movs	r3, #0
    4208:	ad06      	add	r5, sp, #24
    420a:	616b      	str	r3, [r5, #20]
    420c:	3320      	adds	r3, #32
    420e:	766b      	strb	r3, [r5, #25]
    4210:	3310      	adds	r3, #16
    4212:	76ab      	strb	r3, [r5, #26]
    4214:	9402      	str	r4, [sp, #8]
    4216:	9c02      	ldr	r4, [sp, #8]
    4218:	7823      	ldrb	r3, [r4, #0]
    421a:	2b00      	cmp	r3, #0
    421c:	d15d      	bne.n	42da <_vfiprintf_r+0x102>
    421e:	9b02      	ldr	r3, [sp, #8]
    4220:	1ae3      	subs	r3, r4, r3
    4222:	9304      	str	r3, [sp, #16]
    4224:	d00d      	beq.n	4242 <_vfiprintf_r+0x6a>
    4226:	9b04      	ldr	r3, [sp, #16]
    4228:	9a02      	ldr	r2, [sp, #8]
    422a:	0039      	movs	r1, r7
    422c:	0030      	movs	r0, r6
    422e:	f7ff ffc0 	bl	41b2 <__sfputs_r>
    4232:	1c43      	adds	r3, r0, #1
    4234:	d100      	bne.n	4238 <_vfiprintf_r+0x60>
    4236:	e0cc      	b.n	43d2 <_vfiprintf_r+0x1fa>
    4238:	696a      	ldr	r2, [r5, #20]
    423a:	9b04      	ldr	r3, [sp, #16]
    423c:	4694      	mov	ip, r2
    423e:	4463      	add	r3, ip
    4240:	616b      	str	r3, [r5, #20]
    4242:	7823      	ldrb	r3, [r4, #0]
    4244:	2b00      	cmp	r3, #0
    4246:	d100      	bne.n	424a <_vfiprintf_r+0x72>
    4248:	e0c3      	b.n	43d2 <_vfiprintf_r+0x1fa>
    424a:	2201      	movs	r2, #1
    424c:	2300      	movs	r3, #0
    424e:	4252      	negs	r2, r2
    4250:	606a      	str	r2, [r5, #4]
    4252:	a902      	add	r1, sp, #8
    4254:	3254      	adds	r2, #84	; 0x54
    4256:	1852      	adds	r2, r2, r1
    4258:	3401      	adds	r4, #1
    425a:	602b      	str	r3, [r5, #0]
    425c:	60eb      	str	r3, [r5, #12]
    425e:	60ab      	str	r3, [r5, #8]
    4260:	7013      	strb	r3, [r2, #0]
    4262:	65ab      	str	r3, [r5, #88]	; 0x58
    4264:	7821      	ldrb	r1, [r4, #0]
    4266:	2205      	movs	r2, #5
    4268:	4862      	ldr	r0, [pc, #392]	; (43f4 <_vfiprintf_r+0x21c>)
    426a:	f000 fb15 	bl	4898 <memchr>
    426e:	1c63      	adds	r3, r4, #1
    4270:	469c      	mov	ip, r3
    4272:	2800      	cmp	r0, #0
    4274:	d135      	bne.n	42e2 <_vfiprintf_r+0x10a>
    4276:	6829      	ldr	r1, [r5, #0]
    4278:	06cb      	lsls	r3, r1, #27
    427a:	d504      	bpl.n	4286 <_vfiprintf_r+0xae>
    427c:	2353      	movs	r3, #83	; 0x53
    427e:	aa02      	add	r2, sp, #8
    4280:	3020      	adds	r0, #32
    4282:	189b      	adds	r3, r3, r2
    4284:	7018      	strb	r0, [r3, #0]
    4286:	070b      	lsls	r3, r1, #28
    4288:	d504      	bpl.n	4294 <_vfiprintf_r+0xbc>
    428a:	2353      	movs	r3, #83	; 0x53
    428c:	202b      	movs	r0, #43	; 0x2b
    428e:	aa02      	add	r2, sp, #8
    4290:	189b      	adds	r3, r3, r2
    4292:	7018      	strb	r0, [r3, #0]
    4294:	7823      	ldrb	r3, [r4, #0]
    4296:	2b2a      	cmp	r3, #42	; 0x2a
    4298:	d02c      	beq.n	42f4 <_vfiprintf_r+0x11c>
    429a:	2000      	movs	r0, #0
    429c:	210a      	movs	r1, #10
    429e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42a0:	7822      	ldrb	r2, [r4, #0]
    42a2:	3a30      	subs	r2, #48	; 0x30
    42a4:	2a09      	cmp	r2, #9
    42a6:	d800      	bhi.n	42aa <_vfiprintf_r+0xd2>
    42a8:	e06b      	b.n	4382 <_vfiprintf_r+0x1aa>
    42aa:	2800      	cmp	r0, #0
    42ac:	d02a      	beq.n	4304 <_vfiprintf_r+0x12c>
    42ae:	9309      	str	r3, [sp, #36]	; 0x24
    42b0:	e028      	b.n	4304 <_vfiprintf_r+0x12c>
    42b2:	4b51      	ldr	r3, [pc, #324]	; (43f8 <_vfiprintf_r+0x220>)
    42b4:	429f      	cmp	r7, r3
    42b6:	d101      	bne.n	42bc <_vfiprintf_r+0xe4>
    42b8:	68b7      	ldr	r7, [r6, #8]
    42ba:	e79e      	b.n	41fa <_vfiprintf_r+0x22>
    42bc:	4b4f      	ldr	r3, [pc, #316]	; (43fc <_vfiprintf_r+0x224>)
    42be:	429f      	cmp	r7, r3
    42c0:	d19b      	bne.n	41fa <_vfiprintf_r+0x22>
    42c2:	68f7      	ldr	r7, [r6, #12]
    42c4:	e799      	b.n	41fa <_vfiprintf_r+0x22>
    42c6:	0039      	movs	r1, r7
    42c8:	0030      	movs	r0, r6
    42ca:	f7ff fc3b 	bl	3b44 <__swsetup_r>
    42ce:	2800      	cmp	r0, #0
    42d0:	d099      	beq.n	4206 <_vfiprintf_r+0x2e>
    42d2:	2001      	movs	r0, #1
    42d4:	4240      	negs	r0, r0
    42d6:	b01f      	add	sp, #124	; 0x7c
    42d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42da:	2b25      	cmp	r3, #37	; 0x25
    42dc:	d09f      	beq.n	421e <_vfiprintf_r+0x46>
    42de:	3401      	adds	r4, #1
    42e0:	e79a      	b.n	4218 <_vfiprintf_r+0x40>
    42e2:	4b44      	ldr	r3, [pc, #272]	; (43f4 <_vfiprintf_r+0x21c>)
    42e4:	6829      	ldr	r1, [r5, #0]
    42e6:	1ac0      	subs	r0, r0, r3
    42e8:	2301      	movs	r3, #1
    42ea:	4083      	lsls	r3, r0
    42ec:	430b      	orrs	r3, r1
    42ee:	602b      	str	r3, [r5, #0]
    42f0:	4664      	mov	r4, ip
    42f2:	e7b7      	b.n	4264 <_vfiprintf_r+0x8c>
    42f4:	9b05      	ldr	r3, [sp, #20]
    42f6:	1d18      	adds	r0, r3, #4
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	9005      	str	r0, [sp, #20]
    42fc:	2b00      	cmp	r3, #0
    42fe:	db3a      	blt.n	4376 <_vfiprintf_r+0x19e>
    4300:	9309      	str	r3, [sp, #36]	; 0x24
    4302:	4664      	mov	r4, ip
    4304:	7823      	ldrb	r3, [r4, #0]
    4306:	2b2e      	cmp	r3, #46	; 0x2e
    4308:	d10b      	bne.n	4322 <_vfiprintf_r+0x14a>
    430a:	7863      	ldrb	r3, [r4, #1]
    430c:	1c62      	adds	r2, r4, #1
    430e:	2b2a      	cmp	r3, #42	; 0x2a
    4310:	d13f      	bne.n	4392 <_vfiprintf_r+0x1ba>
    4312:	9b05      	ldr	r3, [sp, #20]
    4314:	3402      	adds	r4, #2
    4316:	1d1a      	adds	r2, r3, #4
    4318:	681b      	ldr	r3, [r3, #0]
    431a:	9205      	str	r2, [sp, #20]
    431c:	2b00      	cmp	r3, #0
    431e:	db35      	blt.n	438c <_vfiprintf_r+0x1b4>
    4320:	9307      	str	r3, [sp, #28]
    4322:	7821      	ldrb	r1, [r4, #0]
    4324:	2203      	movs	r2, #3
    4326:	4836      	ldr	r0, [pc, #216]	; (4400 <_vfiprintf_r+0x228>)
    4328:	f000 fab6 	bl	4898 <memchr>
    432c:	2800      	cmp	r0, #0
    432e:	d007      	beq.n	4340 <_vfiprintf_r+0x168>
    4330:	4b33      	ldr	r3, [pc, #204]	; (4400 <_vfiprintf_r+0x228>)
    4332:	682a      	ldr	r2, [r5, #0]
    4334:	1ac0      	subs	r0, r0, r3
    4336:	2340      	movs	r3, #64	; 0x40
    4338:	4083      	lsls	r3, r0
    433a:	4313      	orrs	r3, r2
    433c:	602b      	str	r3, [r5, #0]
    433e:	3401      	adds	r4, #1
    4340:	7821      	ldrb	r1, [r4, #0]
    4342:	1c63      	adds	r3, r4, #1
    4344:	2206      	movs	r2, #6
    4346:	482f      	ldr	r0, [pc, #188]	; (4404 <_vfiprintf_r+0x22c>)
    4348:	9302      	str	r3, [sp, #8]
    434a:	7629      	strb	r1, [r5, #24]
    434c:	f000 faa4 	bl	4898 <memchr>
    4350:	2800      	cmp	r0, #0
    4352:	d044      	beq.n	43de <_vfiprintf_r+0x206>
    4354:	4b2c      	ldr	r3, [pc, #176]	; (4408 <_vfiprintf_r+0x230>)
    4356:	2b00      	cmp	r3, #0
    4358:	d12f      	bne.n	43ba <_vfiprintf_r+0x1e2>
    435a:	6829      	ldr	r1, [r5, #0]
    435c:	9b05      	ldr	r3, [sp, #20]
    435e:	2207      	movs	r2, #7
    4360:	05c9      	lsls	r1, r1, #23
    4362:	d528      	bpl.n	43b6 <_vfiprintf_r+0x1de>
    4364:	189b      	adds	r3, r3, r2
    4366:	4393      	bics	r3, r2
    4368:	3308      	adds	r3, #8
    436a:	9305      	str	r3, [sp, #20]
    436c:	696b      	ldr	r3, [r5, #20]
    436e:	9a03      	ldr	r2, [sp, #12]
    4370:	189b      	adds	r3, r3, r2
    4372:	616b      	str	r3, [r5, #20]
    4374:	e74f      	b.n	4216 <_vfiprintf_r+0x3e>
    4376:	425b      	negs	r3, r3
    4378:	60eb      	str	r3, [r5, #12]
    437a:	2302      	movs	r3, #2
    437c:	430b      	orrs	r3, r1
    437e:	602b      	str	r3, [r5, #0]
    4380:	e7bf      	b.n	4302 <_vfiprintf_r+0x12a>
    4382:	434b      	muls	r3, r1
    4384:	3401      	adds	r4, #1
    4386:	189b      	adds	r3, r3, r2
    4388:	2001      	movs	r0, #1
    438a:	e789      	b.n	42a0 <_vfiprintf_r+0xc8>
    438c:	2301      	movs	r3, #1
    438e:	425b      	negs	r3, r3
    4390:	e7c6      	b.n	4320 <_vfiprintf_r+0x148>
    4392:	2300      	movs	r3, #0
    4394:	0014      	movs	r4, r2
    4396:	200a      	movs	r0, #10
    4398:	001a      	movs	r2, r3
    439a:	606b      	str	r3, [r5, #4]
    439c:	7821      	ldrb	r1, [r4, #0]
    439e:	3930      	subs	r1, #48	; 0x30
    43a0:	2909      	cmp	r1, #9
    43a2:	d903      	bls.n	43ac <_vfiprintf_r+0x1d4>
    43a4:	2b00      	cmp	r3, #0
    43a6:	d0bc      	beq.n	4322 <_vfiprintf_r+0x14a>
    43a8:	9207      	str	r2, [sp, #28]
    43aa:	e7ba      	b.n	4322 <_vfiprintf_r+0x14a>
    43ac:	4342      	muls	r2, r0
    43ae:	3401      	adds	r4, #1
    43b0:	1852      	adds	r2, r2, r1
    43b2:	2301      	movs	r3, #1
    43b4:	e7f2      	b.n	439c <_vfiprintf_r+0x1c4>
    43b6:	3307      	adds	r3, #7
    43b8:	e7d5      	b.n	4366 <_vfiprintf_r+0x18e>
    43ba:	ab05      	add	r3, sp, #20
    43bc:	9300      	str	r3, [sp, #0]
    43be:	003a      	movs	r2, r7
    43c0:	4b12      	ldr	r3, [pc, #72]	; (440c <_vfiprintf_r+0x234>)
    43c2:	0029      	movs	r1, r5
    43c4:	0030      	movs	r0, r6
    43c6:	e000      	b.n	43ca <_vfiprintf_r+0x1f2>
    43c8:	bf00      	nop
    43ca:	9003      	str	r0, [sp, #12]
    43cc:	9b03      	ldr	r3, [sp, #12]
    43ce:	3301      	adds	r3, #1
    43d0:	d1cc      	bne.n	436c <_vfiprintf_r+0x194>
    43d2:	89bb      	ldrh	r3, [r7, #12]
    43d4:	065b      	lsls	r3, r3, #25
    43d6:	d500      	bpl.n	43da <_vfiprintf_r+0x202>
    43d8:	e77b      	b.n	42d2 <_vfiprintf_r+0xfa>
    43da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    43dc:	e77b      	b.n	42d6 <_vfiprintf_r+0xfe>
    43de:	ab05      	add	r3, sp, #20
    43e0:	9300      	str	r3, [sp, #0]
    43e2:	003a      	movs	r2, r7
    43e4:	4b09      	ldr	r3, [pc, #36]	; (440c <_vfiprintf_r+0x234>)
    43e6:	0029      	movs	r1, r5
    43e8:	0030      	movs	r0, r6
    43ea:	f000 f87f 	bl	44ec <_printf_i>
    43ee:	e7ec      	b.n	43ca <_vfiprintf_r+0x1f2>
    43f0:	00004e08 	.word	0x00004e08
    43f4:	00004e48 	.word	0x00004e48
    43f8:	00004e28 	.word	0x00004e28
    43fc:	00004de8 	.word	0x00004de8
    4400:	00004e4e 	.word	0x00004e4e
    4404:	00004e52 	.word	0x00004e52
    4408:	00000000 	.word	0x00000000
    440c:	000041b3 	.word	0x000041b3

00004410 <_printf_common>:
    4410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4412:	0015      	movs	r5, r2
    4414:	9301      	str	r3, [sp, #4]
    4416:	688a      	ldr	r2, [r1, #8]
    4418:	690b      	ldr	r3, [r1, #16]
    441a:	9000      	str	r0, [sp, #0]
    441c:	000c      	movs	r4, r1
    441e:	4293      	cmp	r3, r2
    4420:	da00      	bge.n	4424 <_printf_common+0x14>
    4422:	0013      	movs	r3, r2
    4424:	0022      	movs	r2, r4
    4426:	602b      	str	r3, [r5, #0]
    4428:	3243      	adds	r2, #67	; 0x43
    442a:	7812      	ldrb	r2, [r2, #0]
    442c:	2a00      	cmp	r2, #0
    442e:	d001      	beq.n	4434 <_printf_common+0x24>
    4430:	3301      	adds	r3, #1
    4432:	602b      	str	r3, [r5, #0]
    4434:	6823      	ldr	r3, [r4, #0]
    4436:	069b      	lsls	r3, r3, #26
    4438:	d502      	bpl.n	4440 <_printf_common+0x30>
    443a:	682b      	ldr	r3, [r5, #0]
    443c:	3302      	adds	r3, #2
    443e:	602b      	str	r3, [r5, #0]
    4440:	2706      	movs	r7, #6
    4442:	6823      	ldr	r3, [r4, #0]
    4444:	401f      	ands	r7, r3
    4446:	d027      	beq.n	4498 <_printf_common+0x88>
    4448:	0023      	movs	r3, r4
    444a:	3343      	adds	r3, #67	; 0x43
    444c:	781b      	ldrb	r3, [r3, #0]
    444e:	1e5a      	subs	r2, r3, #1
    4450:	4193      	sbcs	r3, r2
    4452:	6822      	ldr	r2, [r4, #0]
    4454:	0692      	lsls	r2, r2, #26
    4456:	d430      	bmi.n	44ba <_printf_common+0xaa>
    4458:	0022      	movs	r2, r4
    445a:	9901      	ldr	r1, [sp, #4]
    445c:	3243      	adds	r2, #67	; 0x43
    445e:	9800      	ldr	r0, [sp, #0]
    4460:	9e08      	ldr	r6, [sp, #32]
    4462:	47b0      	blx	r6
    4464:	1c43      	adds	r3, r0, #1
    4466:	d025      	beq.n	44b4 <_printf_common+0xa4>
    4468:	2306      	movs	r3, #6
    446a:	6820      	ldr	r0, [r4, #0]
    446c:	682a      	ldr	r2, [r5, #0]
    446e:	68e1      	ldr	r1, [r4, #12]
    4470:	4003      	ands	r3, r0
    4472:	2500      	movs	r5, #0
    4474:	2b04      	cmp	r3, #4
    4476:	d103      	bne.n	4480 <_printf_common+0x70>
    4478:	1a8d      	subs	r5, r1, r2
    447a:	43eb      	mvns	r3, r5
    447c:	17db      	asrs	r3, r3, #31
    447e:	401d      	ands	r5, r3
    4480:	68a3      	ldr	r3, [r4, #8]
    4482:	6922      	ldr	r2, [r4, #16]
    4484:	4293      	cmp	r3, r2
    4486:	dd01      	ble.n	448c <_printf_common+0x7c>
    4488:	1a9b      	subs	r3, r3, r2
    448a:	18ed      	adds	r5, r5, r3
    448c:	2700      	movs	r7, #0
    448e:	42bd      	cmp	r5, r7
    4490:	d120      	bne.n	44d4 <_printf_common+0xc4>
    4492:	2000      	movs	r0, #0
    4494:	e010      	b.n	44b8 <_printf_common+0xa8>
    4496:	3701      	adds	r7, #1
    4498:	68e3      	ldr	r3, [r4, #12]
    449a:	682a      	ldr	r2, [r5, #0]
    449c:	1a9b      	subs	r3, r3, r2
    449e:	429f      	cmp	r7, r3
    44a0:	dad2      	bge.n	4448 <_printf_common+0x38>
    44a2:	0022      	movs	r2, r4
    44a4:	2301      	movs	r3, #1
    44a6:	3219      	adds	r2, #25
    44a8:	9901      	ldr	r1, [sp, #4]
    44aa:	9800      	ldr	r0, [sp, #0]
    44ac:	9e08      	ldr	r6, [sp, #32]
    44ae:	47b0      	blx	r6
    44b0:	1c43      	adds	r3, r0, #1
    44b2:	d1f0      	bne.n	4496 <_printf_common+0x86>
    44b4:	2001      	movs	r0, #1
    44b6:	4240      	negs	r0, r0
    44b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    44ba:	2030      	movs	r0, #48	; 0x30
    44bc:	18e1      	adds	r1, r4, r3
    44be:	3143      	adds	r1, #67	; 0x43
    44c0:	7008      	strb	r0, [r1, #0]
    44c2:	0021      	movs	r1, r4
    44c4:	1c5a      	adds	r2, r3, #1
    44c6:	3145      	adds	r1, #69	; 0x45
    44c8:	7809      	ldrb	r1, [r1, #0]
    44ca:	18a2      	adds	r2, r4, r2
    44cc:	3243      	adds	r2, #67	; 0x43
    44ce:	3302      	adds	r3, #2
    44d0:	7011      	strb	r1, [r2, #0]
    44d2:	e7c1      	b.n	4458 <_printf_common+0x48>
    44d4:	0022      	movs	r2, r4
    44d6:	2301      	movs	r3, #1
    44d8:	321a      	adds	r2, #26
    44da:	9901      	ldr	r1, [sp, #4]
    44dc:	9800      	ldr	r0, [sp, #0]
    44de:	9e08      	ldr	r6, [sp, #32]
    44e0:	47b0      	blx	r6
    44e2:	1c43      	adds	r3, r0, #1
    44e4:	d0e6      	beq.n	44b4 <_printf_common+0xa4>
    44e6:	3701      	adds	r7, #1
    44e8:	e7d1      	b.n	448e <_printf_common+0x7e>
	...

000044ec <_printf_i>:
    44ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ee:	b08b      	sub	sp, #44	; 0x2c
    44f0:	9206      	str	r2, [sp, #24]
    44f2:	000a      	movs	r2, r1
    44f4:	3243      	adds	r2, #67	; 0x43
    44f6:	9307      	str	r3, [sp, #28]
    44f8:	9005      	str	r0, [sp, #20]
    44fa:	9204      	str	r2, [sp, #16]
    44fc:	7e0a      	ldrb	r2, [r1, #24]
    44fe:	000c      	movs	r4, r1
    4500:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4502:	2a6e      	cmp	r2, #110	; 0x6e
    4504:	d100      	bne.n	4508 <_printf_i+0x1c>
    4506:	e08f      	b.n	4628 <_printf_i+0x13c>
    4508:	d817      	bhi.n	453a <_printf_i+0x4e>
    450a:	2a63      	cmp	r2, #99	; 0x63
    450c:	d02c      	beq.n	4568 <_printf_i+0x7c>
    450e:	d808      	bhi.n	4522 <_printf_i+0x36>
    4510:	2a00      	cmp	r2, #0
    4512:	d100      	bne.n	4516 <_printf_i+0x2a>
    4514:	e099      	b.n	464a <_printf_i+0x15e>
    4516:	2a58      	cmp	r2, #88	; 0x58
    4518:	d054      	beq.n	45c4 <_printf_i+0xd8>
    451a:	0026      	movs	r6, r4
    451c:	3642      	adds	r6, #66	; 0x42
    451e:	7032      	strb	r2, [r6, #0]
    4520:	e029      	b.n	4576 <_printf_i+0x8a>
    4522:	2a64      	cmp	r2, #100	; 0x64
    4524:	d001      	beq.n	452a <_printf_i+0x3e>
    4526:	2a69      	cmp	r2, #105	; 0x69
    4528:	d1f7      	bne.n	451a <_printf_i+0x2e>
    452a:	6821      	ldr	r1, [r4, #0]
    452c:	681a      	ldr	r2, [r3, #0]
    452e:	0608      	lsls	r0, r1, #24
    4530:	d523      	bpl.n	457a <_printf_i+0x8e>
    4532:	1d11      	adds	r1, r2, #4
    4534:	6019      	str	r1, [r3, #0]
    4536:	6815      	ldr	r5, [r2, #0]
    4538:	e025      	b.n	4586 <_printf_i+0x9a>
    453a:	2a73      	cmp	r2, #115	; 0x73
    453c:	d100      	bne.n	4540 <_printf_i+0x54>
    453e:	e088      	b.n	4652 <_printf_i+0x166>
    4540:	d808      	bhi.n	4554 <_printf_i+0x68>
    4542:	2a6f      	cmp	r2, #111	; 0x6f
    4544:	d029      	beq.n	459a <_printf_i+0xae>
    4546:	2a70      	cmp	r2, #112	; 0x70
    4548:	d1e7      	bne.n	451a <_printf_i+0x2e>
    454a:	2220      	movs	r2, #32
    454c:	6809      	ldr	r1, [r1, #0]
    454e:	430a      	orrs	r2, r1
    4550:	6022      	str	r2, [r4, #0]
    4552:	e003      	b.n	455c <_printf_i+0x70>
    4554:	2a75      	cmp	r2, #117	; 0x75
    4556:	d020      	beq.n	459a <_printf_i+0xae>
    4558:	2a78      	cmp	r2, #120	; 0x78
    455a:	d1de      	bne.n	451a <_printf_i+0x2e>
    455c:	0022      	movs	r2, r4
    455e:	2178      	movs	r1, #120	; 0x78
    4560:	3245      	adds	r2, #69	; 0x45
    4562:	7011      	strb	r1, [r2, #0]
    4564:	4a6c      	ldr	r2, [pc, #432]	; (4718 <_printf_i+0x22c>)
    4566:	e030      	b.n	45ca <_printf_i+0xde>
    4568:	000e      	movs	r6, r1
    456a:	681a      	ldr	r2, [r3, #0]
    456c:	3642      	adds	r6, #66	; 0x42
    456e:	1d11      	adds	r1, r2, #4
    4570:	6019      	str	r1, [r3, #0]
    4572:	6813      	ldr	r3, [r2, #0]
    4574:	7033      	strb	r3, [r6, #0]
    4576:	2301      	movs	r3, #1
    4578:	e079      	b.n	466e <_printf_i+0x182>
    457a:	0649      	lsls	r1, r1, #25
    457c:	d5d9      	bpl.n	4532 <_printf_i+0x46>
    457e:	1d11      	adds	r1, r2, #4
    4580:	6019      	str	r1, [r3, #0]
    4582:	2300      	movs	r3, #0
    4584:	5ed5      	ldrsh	r5, [r2, r3]
    4586:	2d00      	cmp	r5, #0
    4588:	da03      	bge.n	4592 <_printf_i+0xa6>
    458a:	232d      	movs	r3, #45	; 0x2d
    458c:	9a04      	ldr	r2, [sp, #16]
    458e:	426d      	negs	r5, r5
    4590:	7013      	strb	r3, [r2, #0]
    4592:	4b62      	ldr	r3, [pc, #392]	; (471c <_printf_i+0x230>)
    4594:	270a      	movs	r7, #10
    4596:	9303      	str	r3, [sp, #12]
    4598:	e02f      	b.n	45fa <_printf_i+0x10e>
    459a:	6820      	ldr	r0, [r4, #0]
    459c:	6819      	ldr	r1, [r3, #0]
    459e:	0605      	lsls	r5, r0, #24
    45a0:	d503      	bpl.n	45aa <_printf_i+0xbe>
    45a2:	1d08      	adds	r0, r1, #4
    45a4:	6018      	str	r0, [r3, #0]
    45a6:	680d      	ldr	r5, [r1, #0]
    45a8:	e005      	b.n	45b6 <_printf_i+0xca>
    45aa:	0640      	lsls	r0, r0, #25
    45ac:	d5f9      	bpl.n	45a2 <_printf_i+0xb6>
    45ae:	680d      	ldr	r5, [r1, #0]
    45b0:	1d08      	adds	r0, r1, #4
    45b2:	6018      	str	r0, [r3, #0]
    45b4:	b2ad      	uxth	r5, r5
    45b6:	4b59      	ldr	r3, [pc, #356]	; (471c <_printf_i+0x230>)
    45b8:	2708      	movs	r7, #8
    45ba:	9303      	str	r3, [sp, #12]
    45bc:	2a6f      	cmp	r2, #111	; 0x6f
    45be:	d018      	beq.n	45f2 <_printf_i+0x106>
    45c0:	270a      	movs	r7, #10
    45c2:	e016      	b.n	45f2 <_printf_i+0x106>
    45c4:	3145      	adds	r1, #69	; 0x45
    45c6:	700a      	strb	r2, [r1, #0]
    45c8:	4a54      	ldr	r2, [pc, #336]	; (471c <_printf_i+0x230>)
    45ca:	9203      	str	r2, [sp, #12]
    45cc:	681a      	ldr	r2, [r3, #0]
    45ce:	6821      	ldr	r1, [r4, #0]
    45d0:	1d10      	adds	r0, r2, #4
    45d2:	6018      	str	r0, [r3, #0]
    45d4:	6815      	ldr	r5, [r2, #0]
    45d6:	0608      	lsls	r0, r1, #24
    45d8:	d522      	bpl.n	4620 <_printf_i+0x134>
    45da:	07cb      	lsls	r3, r1, #31
    45dc:	d502      	bpl.n	45e4 <_printf_i+0xf8>
    45de:	2320      	movs	r3, #32
    45e0:	4319      	orrs	r1, r3
    45e2:	6021      	str	r1, [r4, #0]
    45e4:	2710      	movs	r7, #16
    45e6:	2d00      	cmp	r5, #0
    45e8:	d103      	bne.n	45f2 <_printf_i+0x106>
    45ea:	2320      	movs	r3, #32
    45ec:	6822      	ldr	r2, [r4, #0]
    45ee:	439a      	bics	r2, r3
    45f0:	6022      	str	r2, [r4, #0]
    45f2:	0023      	movs	r3, r4
    45f4:	2200      	movs	r2, #0
    45f6:	3343      	adds	r3, #67	; 0x43
    45f8:	701a      	strb	r2, [r3, #0]
    45fa:	6863      	ldr	r3, [r4, #4]
    45fc:	60a3      	str	r3, [r4, #8]
    45fe:	2b00      	cmp	r3, #0
    4600:	db5c      	blt.n	46bc <_printf_i+0x1d0>
    4602:	2204      	movs	r2, #4
    4604:	6821      	ldr	r1, [r4, #0]
    4606:	4391      	bics	r1, r2
    4608:	6021      	str	r1, [r4, #0]
    460a:	2d00      	cmp	r5, #0
    460c:	d158      	bne.n	46c0 <_printf_i+0x1d4>
    460e:	9e04      	ldr	r6, [sp, #16]
    4610:	2b00      	cmp	r3, #0
    4612:	d064      	beq.n	46de <_printf_i+0x1f2>
    4614:	0026      	movs	r6, r4
    4616:	9b03      	ldr	r3, [sp, #12]
    4618:	3642      	adds	r6, #66	; 0x42
    461a:	781b      	ldrb	r3, [r3, #0]
    461c:	7033      	strb	r3, [r6, #0]
    461e:	e05e      	b.n	46de <_printf_i+0x1f2>
    4620:	0648      	lsls	r0, r1, #25
    4622:	d5da      	bpl.n	45da <_printf_i+0xee>
    4624:	b2ad      	uxth	r5, r5
    4626:	e7d8      	b.n	45da <_printf_i+0xee>
    4628:	6809      	ldr	r1, [r1, #0]
    462a:	681a      	ldr	r2, [r3, #0]
    462c:	0608      	lsls	r0, r1, #24
    462e:	d505      	bpl.n	463c <_printf_i+0x150>
    4630:	1d11      	adds	r1, r2, #4
    4632:	6019      	str	r1, [r3, #0]
    4634:	6813      	ldr	r3, [r2, #0]
    4636:	6962      	ldr	r2, [r4, #20]
    4638:	601a      	str	r2, [r3, #0]
    463a:	e006      	b.n	464a <_printf_i+0x15e>
    463c:	0649      	lsls	r1, r1, #25
    463e:	d5f7      	bpl.n	4630 <_printf_i+0x144>
    4640:	1d11      	adds	r1, r2, #4
    4642:	6019      	str	r1, [r3, #0]
    4644:	6813      	ldr	r3, [r2, #0]
    4646:	8aa2      	ldrh	r2, [r4, #20]
    4648:	801a      	strh	r2, [r3, #0]
    464a:	2300      	movs	r3, #0
    464c:	9e04      	ldr	r6, [sp, #16]
    464e:	6123      	str	r3, [r4, #16]
    4650:	e054      	b.n	46fc <_printf_i+0x210>
    4652:	681a      	ldr	r2, [r3, #0]
    4654:	1d11      	adds	r1, r2, #4
    4656:	6019      	str	r1, [r3, #0]
    4658:	6816      	ldr	r6, [r2, #0]
    465a:	2100      	movs	r1, #0
    465c:	6862      	ldr	r2, [r4, #4]
    465e:	0030      	movs	r0, r6
    4660:	f000 f91a 	bl	4898 <memchr>
    4664:	2800      	cmp	r0, #0
    4666:	d001      	beq.n	466c <_printf_i+0x180>
    4668:	1b80      	subs	r0, r0, r6
    466a:	6060      	str	r0, [r4, #4]
    466c:	6863      	ldr	r3, [r4, #4]
    466e:	6123      	str	r3, [r4, #16]
    4670:	2300      	movs	r3, #0
    4672:	9a04      	ldr	r2, [sp, #16]
    4674:	7013      	strb	r3, [r2, #0]
    4676:	e041      	b.n	46fc <_printf_i+0x210>
    4678:	6923      	ldr	r3, [r4, #16]
    467a:	0032      	movs	r2, r6
    467c:	9906      	ldr	r1, [sp, #24]
    467e:	9805      	ldr	r0, [sp, #20]
    4680:	9d07      	ldr	r5, [sp, #28]
    4682:	47a8      	blx	r5
    4684:	1c43      	adds	r3, r0, #1
    4686:	d043      	beq.n	4710 <_printf_i+0x224>
    4688:	6823      	ldr	r3, [r4, #0]
    468a:	2500      	movs	r5, #0
    468c:	079b      	lsls	r3, r3, #30
    468e:	d40f      	bmi.n	46b0 <_printf_i+0x1c4>
    4690:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4692:	68e0      	ldr	r0, [r4, #12]
    4694:	4298      	cmp	r0, r3
    4696:	da3d      	bge.n	4714 <_printf_i+0x228>
    4698:	0018      	movs	r0, r3
    469a:	e03b      	b.n	4714 <_printf_i+0x228>
    469c:	0022      	movs	r2, r4
    469e:	2301      	movs	r3, #1
    46a0:	3219      	adds	r2, #25
    46a2:	9906      	ldr	r1, [sp, #24]
    46a4:	9805      	ldr	r0, [sp, #20]
    46a6:	9e07      	ldr	r6, [sp, #28]
    46a8:	47b0      	blx	r6
    46aa:	1c43      	adds	r3, r0, #1
    46ac:	d030      	beq.n	4710 <_printf_i+0x224>
    46ae:	3501      	adds	r5, #1
    46b0:	68e3      	ldr	r3, [r4, #12]
    46b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    46b4:	1a9b      	subs	r3, r3, r2
    46b6:	429d      	cmp	r5, r3
    46b8:	dbf0      	blt.n	469c <_printf_i+0x1b0>
    46ba:	e7e9      	b.n	4690 <_printf_i+0x1a4>
    46bc:	2d00      	cmp	r5, #0
    46be:	d0a9      	beq.n	4614 <_printf_i+0x128>
    46c0:	9e04      	ldr	r6, [sp, #16]
    46c2:	0028      	movs	r0, r5
    46c4:	0039      	movs	r1, r7
    46c6:	f7ff f847 	bl	3758 <__aeabi_uidivmod>
    46ca:	9b03      	ldr	r3, [sp, #12]
    46cc:	3e01      	subs	r6, #1
    46ce:	5c5b      	ldrb	r3, [r3, r1]
    46d0:	0028      	movs	r0, r5
    46d2:	7033      	strb	r3, [r6, #0]
    46d4:	0039      	movs	r1, r7
    46d6:	f7fe ffb9 	bl	364c <__udivsi3>
    46da:	1e05      	subs	r5, r0, #0
    46dc:	d1f1      	bne.n	46c2 <_printf_i+0x1d6>
    46de:	2f08      	cmp	r7, #8
    46e0:	d109      	bne.n	46f6 <_printf_i+0x20a>
    46e2:	6823      	ldr	r3, [r4, #0]
    46e4:	07db      	lsls	r3, r3, #31
    46e6:	d506      	bpl.n	46f6 <_printf_i+0x20a>
    46e8:	6863      	ldr	r3, [r4, #4]
    46ea:	6922      	ldr	r2, [r4, #16]
    46ec:	4293      	cmp	r3, r2
    46ee:	dc02      	bgt.n	46f6 <_printf_i+0x20a>
    46f0:	2330      	movs	r3, #48	; 0x30
    46f2:	3e01      	subs	r6, #1
    46f4:	7033      	strb	r3, [r6, #0]
    46f6:	9b04      	ldr	r3, [sp, #16]
    46f8:	1b9b      	subs	r3, r3, r6
    46fa:	6123      	str	r3, [r4, #16]
    46fc:	9b07      	ldr	r3, [sp, #28]
    46fe:	aa09      	add	r2, sp, #36	; 0x24
    4700:	9300      	str	r3, [sp, #0]
    4702:	0021      	movs	r1, r4
    4704:	9b06      	ldr	r3, [sp, #24]
    4706:	9805      	ldr	r0, [sp, #20]
    4708:	f7ff fe82 	bl	4410 <_printf_common>
    470c:	1c43      	adds	r3, r0, #1
    470e:	d1b3      	bne.n	4678 <_printf_i+0x18c>
    4710:	2001      	movs	r0, #1
    4712:	4240      	negs	r0, r0
    4714:	b00b      	add	sp, #44	; 0x2c
    4716:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4718:	00004e6a 	.word	0x00004e6a
    471c:	00004e59 	.word	0x00004e59

00004720 <_sbrk_r>:
    4720:	2300      	movs	r3, #0
    4722:	b570      	push	{r4, r5, r6, lr}
    4724:	4c06      	ldr	r4, [pc, #24]	; (4740 <_sbrk_r+0x20>)
    4726:	0005      	movs	r5, r0
    4728:	0008      	movs	r0, r1
    472a:	6023      	str	r3, [r4, #0]
    472c:	f7fe f8c6 	bl	28bc <_sbrk>
    4730:	1c43      	adds	r3, r0, #1
    4732:	d103      	bne.n	473c <_sbrk_r+0x1c>
    4734:	6823      	ldr	r3, [r4, #0]
    4736:	2b00      	cmp	r3, #0
    4738:	d000      	beq.n	473c <_sbrk_r+0x1c>
    473a:	602b      	str	r3, [r5, #0]
    473c:	bd70      	pop	{r4, r5, r6, pc}
    473e:	46c0      	nop			; (mov r8, r8)
    4740:	20000250 	.word	0x20000250

00004744 <__sread>:
    4744:	b570      	push	{r4, r5, r6, lr}
    4746:	000c      	movs	r4, r1
    4748:	250e      	movs	r5, #14
    474a:	5f49      	ldrsh	r1, [r1, r5]
    474c:	f000 f8b2 	bl	48b4 <_read_r>
    4750:	2800      	cmp	r0, #0
    4752:	db03      	blt.n	475c <__sread+0x18>
    4754:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4756:	181b      	adds	r3, r3, r0
    4758:	6563      	str	r3, [r4, #84]	; 0x54
    475a:	bd70      	pop	{r4, r5, r6, pc}
    475c:	89a3      	ldrh	r3, [r4, #12]
    475e:	4a02      	ldr	r2, [pc, #8]	; (4768 <__sread+0x24>)
    4760:	4013      	ands	r3, r2
    4762:	81a3      	strh	r3, [r4, #12]
    4764:	e7f9      	b.n	475a <__sread+0x16>
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	ffffefff 	.word	0xffffefff

0000476c <__swrite>:
    476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    476e:	001f      	movs	r7, r3
    4770:	898b      	ldrh	r3, [r1, #12]
    4772:	0005      	movs	r5, r0
    4774:	000c      	movs	r4, r1
    4776:	0016      	movs	r6, r2
    4778:	05db      	lsls	r3, r3, #23
    477a:	d505      	bpl.n	4788 <__swrite+0x1c>
    477c:	230e      	movs	r3, #14
    477e:	5ec9      	ldrsh	r1, [r1, r3]
    4780:	2200      	movs	r2, #0
    4782:	2302      	movs	r3, #2
    4784:	f000 f874 	bl	4870 <_lseek_r>
    4788:	89a3      	ldrh	r3, [r4, #12]
    478a:	4a05      	ldr	r2, [pc, #20]	; (47a0 <__swrite+0x34>)
    478c:	0028      	movs	r0, r5
    478e:	4013      	ands	r3, r2
    4790:	81a3      	strh	r3, [r4, #12]
    4792:	0032      	movs	r2, r6
    4794:	230e      	movs	r3, #14
    4796:	5ee1      	ldrsh	r1, [r4, r3]
    4798:	003b      	movs	r3, r7
    479a:	f000 f81f 	bl	47dc <_write_r>
    479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47a0:	ffffefff 	.word	0xffffefff

000047a4 <__sseek>:
    47a4:	b570      	push	{r4, r5, r6, lr}
    47a6:	000c      	movs	r4, r1
    47a8:	250e      	movs	r5, #14
    47aa:	5f49      	ldrsh	r1, [r1, r5]
    47ac:	f000 f860 	bl	4870 <_lseek_r>
    47b0:	89a3      	ldrh	r3, [r4, #12]
    47b2:	1c42      	adds	r2, r0, #1
    47b4:	d103      	bne.n	47be <__sseek+0x1a>
    47b6:	4a05      	ldr	r2, [pc, #20]	; (47cc <__sseek+0x28>)
    47b8:	4013      	ands	r3, r2
    47ba:	81a3      	strh	r3, [r4, #12]
    47bc:	bd70      	pop	{r4, r5, r6, pc}
    47be:	2280      	movs	r2, #128	; 0x80
    47c0:	0152      	lsls	r2, r2, #5
    47c2:	4313      	orrs	r3, r2
    47c4:	81a3      	strh	r3, [r4, #12]
    47c6:	6560      	str	r0, [r4, #84]	; 0x54
    47c8:	e7f8      	b.n	47bc <__sseek+0x18>
    47ca:	46c0      	nop			; (mov r8, r8)
    47cc:	ffffefff 	.word	0xffffefff

000047d0 <__sclose>:
    47d0:	b510      	push	{r4, lr}
    47d2:	230e      	movs	r3, #14
    47d4:	5ec9      	ldrsh	r1, [r1, r3]
    47d6:	f000 f815 	bl	4804 <_close_r>
    47da:	bd10      	pop	{r4, pc}

000047dc <_write_r>:
    47dc:	b570      	push	{r4, r5, r6, lr}
    47de:	0005      	movs	r5, r0
    47e0:	0008      	movs	r0, r1
    47e2:	0011      	movs	r1, r2
    47e4:	2200      	movs	r2, #0
    47e6:	4c06      	ldr	r4, [pc, #24]	; (4800 <_write_r+0x24>)
    47e8:	6022      	str	r2, [r4, #0]
    47ea:	001a      	movs	r2, r3
    47ec:	f7fe f83e 	bl	286c <_write>
    47f0:	1c43      	adds	r3, r0, #1
    47f2:	d103      	bne.n	47fc <_write_r+0x20>
    47f4:	6823      	ldr	r3, [r4, #0]
    47f6:	2b00      	cmp	r3, #0
    47f8:	d000      	beq.n	47fc <_write_r+0x20>
    47fa:	602b      	str	r3, [r5, #0]
    47fc:	bd70      	pop	{r4, r5, r6, pc}
    47fe:	46c0      	nop			; (mov r8, r8)
    4800:	20000250 	.word	0x20000250

00004804 <_close_r>:
    4804:	2300      	movs	r3, #0
    4806:	b570      	push	{r4, r5, r6, lr}
    4808:	4c06      	ldr	r4, [pc, #24]	; (4824 <_close_r+0x20>)
    480a:	0005      	movs	r5, r0
    480c:	0008      	movs	r0, r1
    480e:	6023      	str	r3, [r4, #0]
    4810:	f7fe f866 	bl	28e0 <_close>
    4814:	1c43      	adds	r3, r0, #1
    4816:	d103      	bne.n	4820 <_close_r+0x1c>
    4818:	6823      	ldr	r3, [r4, #0]
    481a:	2b00      	cmp	r3, #0
    481c:	d000      	beq.n	4820 <_close_r+0x1c>
    481e:	602b      	str	r3, [r5, #0]
    4820:	bd70      	pop	{r4, r5, r6, pc}
    4822:	46c0      	nop			; (mov r8, r8)
    4824:	20000250 	.word	0x20000250

00004828 <_fstat_r>:
    4828:	2300      	movs	r3, #0
    482a:	b570      	push	{r4, r5, r6, lr}
    482c:	4c06      	ldr	r4, [pc, #24]	; (4848 <_fstat_r+0x20>)
    482e:	0005      	movs	r5, r0
    4830:	0008      	movs	r0, r1
    4832:	0011      	movs	r1, r2
    4834:	6023      	str	r3, [r4, #0]
    4836:	f7fe f856 	bl	28e6 <_fstat>
    483a:	1c43      	adds	r3, r0, #1
    483c:	d103      	bne.n	4846 <_fstat_r+0x1e>
    483e:	6823      	ldr	r3, [r4, #0]
    4840:	2b00      	cmp	r3, #0
    4842:	d000      	beq.n	4846 <_fstat_r+0x1e>
    4844:	602b      	str	r3, [r5, #0]
    4846:	bd70      	pop	{r4, r5, r6, pc}
    4848:	20000250 	.word	0x20000250

0000484c <_isatty_r>:
    484c:	2300      	movs	r3, #0
    484e:	b570      	push	{r4, r5, r6, lr}
    4850:	4c06      	ldr	r4, [pc, #24]	; (486c <_isatty_r+0x20>)
    4852:	0005      	movs	r5, r0
    4854:	0008      	movs	r0, r1
    4856:	6023      	str	r3, [r4, #0]
    4858:	f7fe f84a 	bl	28f0 <_isatty>
    485c:	1c43      	adds	r3, r0, #1
    485e:	d103      	bne.n	4868 <_isatty_r+0x1c>
    4860:	6823      	ldr	r3, [r4, #0]
    4862:	2b00      	cmp	r3, #0
    4864:	d000      	beq.n	4868 <_isatty_r+0x1c>
    4866:	602b      	str	r3, [r5, #0]
    4868:	bd70      	pop	{r4, r5, r6, pc}
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	20000250 	.word	0x20000250

00004870 <_lseek_r>:
    4870:	b570      	push	{r4, r5, r6, lr}
    4872:	0005      	movs	r5, r0
    4874:	0008      	movs	r0, r1
    4876:	0011      	movs	r1, r2
    4878:	2200      	movs	r2, #0
    487a:	4c06      	ldr	r4, [pc, #24]	; (4894 <_lseek_r+0x24>)
    487c:	6022      	str	r2, [r4, #0]
    487e:	001a      	movs	r2, r3
    4880:	f7fe f838 	bl	28f4 <_lseek>
    4884:	1c43      	adds	r3, r0, #1
    4886:	d103      	bne.n	4890 <_lseek_r+0x20>
    4888:	6823      	ldr	r3, [r4, #0]
    488a:	2b00      	cmp	r3, #0
    488c:	d000      	beq.n	4890 <_lseek_r+0x20>
    488e:	602b      	str	r3, [r5, #0]
    4890:	bd70      	pop	{r4, r5, r6, pc}
    4892:	46c0      	nop			; (mov r8, r8)
    4894:	20000250 	.word	0x20000250

00004898 <memchr>:
    4898:	b2c9      	uxtb	r1, r1
    489a:	1882      	adds	r2, r0, r2
    489c:	4290      	cmp	r0, r2
    489e:	d101      	bne.n	48a4 <memchr+0xc>
    48a0:	2000      	movs	r0, #0
    48a2:	4770      	bx	lr
    48a4:	7803      	ldrb	r3, [r0, #0]
    48a6:	428b      	cmp	r3, r1
    48a8:	d0fb      	beq.n	48a2 <memchr+0xa>
    48aa:	3001      	adds	r0, #1
    48ac:	e7f6      	b.n	489c <memchr+0x4>

000048ae <__malloc_lock>:
    48ae:	4770      	bx	lr

000048b0 <__malloc_unlock>:
    48b0:	4770      	bx	lr
	...

000048b4 <_read_r>:
    48b4:	b570      	push	{r4, r5, r6, lr}
    48b6:	0005      	movs	r5, r0
    48b8:	0008      	movs	r0, r1
    48ba:	0011      	movs	r1, r2
    48bc:	2200      	movs	r2, #0
    48be:	4c06      	ldr	r4, [pc, #24]	; (48d8 <_read_r+0x24>)
    48c0:	6022      	str	r2, [r4, #0]
    48c2:	001a      	movs	r2, r3
    48c4:	f7fd ffb0 	bl	2828 <_read>
    48c8:	1c43      	adds	r3, r0, #1
    48ca:	d103      	bne.n	48d4 <_read_r+0x20>
    48cc:	6823      	ldr	r3, [r4, #0]
    48ce:	2b00      	cmp	r3, #0
    48d0:	d000      	beq.n	48d4 <_read_r+0x20>
    48d2:	602b      	str	r3, [r5, #0]
    48d4:	bd70      	pop	{r4, r5, r6, pc}
    48d6:	46c0      	nop			; (mov r8, r8)
    48d8:	20000250 	.word	0x20000250
    48dc:	00000458 	.word	0x00000458
    48e0:	000006a2 	.word	0x000006a2
    48e4:	000006a2 	.word	0x000006a2
    48e8:	000006a2 	.word	0x000006a2
    48ec:	000006a2 	.word	0x000006a2
    48f0:	000006a2 	.word	0x000006a2
    48f4:	000006a2 	.word	0x000006a2
    48f8:	000006a2 	.word	0x000006a2
    48fc:	000006a2 	.word	0x000006a2
    4900:	000006a2 	.word	0x000006a2
    4904:	000006a2 	.word	0x000006a2
    4908:	000006a2 	.word	0x000006a2
    490c:	000006a2 	.word	0x000006a2
    4910:	000006a2 	.word	0x000006a2
    4914:	000006a2 	.word	0x000006a2
    4918:	000006a2 	.word	0x000006a2
    491c:	00000440 	.word	0x00000440
    4920:	000006a2 	.word	0x000006a2
    4924:	000006a2 	.word	0x000006a2
    4928:	000006a2 	.word	0x000006a2
    492c:	000006a2 	.word	0x000006a2
    4930:	000006a2 	.word	0x000006a2
    4934:	000006a2 	.word	0x000006a2
    4938:	000006a2 	.word	0x000006a2
    493c:	000006a2 	.word	0x000006a2
    4940:	000006a2 	.word	0x000006a2
    4944:	000006a2 	.word	0x000006a2
    4948:	000006a2 	.word	0x000006a2
    494c:	000006a2 	.word	0x000006a2
    4950:	000006a2 	.word	0x000006a2
    4954:	000006a2 	.word	0x000006a2
    4958:	000006a2 	.word	0x000006a2
    495c:	00000450 	.word	0x00000450
    4960:	000006a2 	.word	0x000006a2
    4964:	000006a2 	.word	0x000006a2
    4968:	000006a2 	.word	0x000006a2
    496c:	000006a2 	.word	0x000006a2
    4970:	000006a2 	.word	0x000006a2
    4974:	000006a2 	.word	0x000006a2
    4978:	000006a2 	.word	0x000006a2
    497c:	000006a2 	.word	0x000006a2
    4980:	000006a2 	.word	0x000006a2
    4984:	000006a2 	.word	0x000006a2
    4988:	000006a2 	.word	0x000006a2
    498c:	000006a2 	.word	0x000006a2
    4990:	000006a2 	.word	0x000006a2
    4994:	000006a2 	.word	0x000006a2
    4998:	000006a2 	.word	0x000006a2
    499c:	00000448 	.word	0x00000448
    49a0:	00000460 	.word	0x00000460
    49a4:	00000428 	.word	0x00000428
    49a8:	00000438 	.word	0x00000438
    49ac:	00000430 	.word	0x00000430
    49b0:	0000ffff 	.word	0x0000ffff
    49b4:	0000ffff 	.word	0x0000ffff
    49b8:	00000004 	.word	0x00000004
    49bc:	00000005 	.word	0x00000005
    49c0:	00000006 	.word	0x00000006
    49c4:	00000007 	.word	0x00000007
    49c8:	00000020 	.word	0x00000020
    49cc:	0000ffff 	.word	0x0000ffff
    49d0:	00000022 	.word	0x00000022
    49d4:	00000023 	.word	0x00000023
    49d8:	0000ffff 	.word	0x0000ffff
    49dc:	0000ffff 	.word	0x0000ffff
    49e0:	0000ffff 	.word	0x0000ffff
    49e4:	0000ffff 	.word	0x0000ffff
    49e8:	00000008 	.word	0x00000008
    49ec:	00000009 	.word	0x00000009
    49f0:	0000000a 	.word	0x0000000a
    49f4:	0000000b 	.word	0x0000000b
    49f8:	0000ffff 	.word	0x0000ffff
    49fc:	0000ffff 	.word	0x0000ffff
    4a00:	0000ffff 	.word	0x0000ffff
    4a04:	0000ffff 	.word	0x0000ffff
    4a08:	42000000 	.word	0x42000000
    4a0c:	42000400 	.word	0x42000400
    4a10:	42000800 	.word	0x42000800
    4a14:	42000c00 	.word	0x42000c00
    4a18:	42001000 	.word	0x42001000
    4a1c:	43000400 	.word	0x43000400
    4a20:	00001e1e 	.word	0x00001e1e
    4a24:	00001e1a 	.word	0x00001e1a
    4a28:	00001e1a 	.word	0x00001e1a
    4a2c:	00001e80 	.word	0x00001e80
    4a30:	00001e80 	.word	0x00001e80
    4a34:	00001e34 	.word	0x00001e34
    4a38:	00001e24 	.word	0x00001e24
    4a3c:	00001e3a 	.word	0x00001e3a
    4a40:	00001e6e 	.word	0x00001e6e
    4a44:	00002024 	.word	0x00002024
    4a48:	00002004 	.word	0x00002004
    4a4c:	00002004 	.word	0x00002004
    4a50:	0000209e 	.word	0x0000209e
    4a54:	00002016 	.word	0x00002016
    4a58:	00002032 	.word	0x00002032
    4a5c:	00002008 	.word	0x00002008
    4a60:	00002040 	.word	0x00002040
    4a64:	00002082 	.word	0x00002082
    4a68:	000020dc 	.word	0x000020dc
    4a6c:	0000211e 	.word	0x0000211e
    4a70:	0000211e 	.word	0x0000211e
    4a74:	0000211e 	.word	0x0000211e
    4a78:	000020ce 	.word	0x000020ce
    4a7c:	000020ea 	.word	0x000020ea
    4a80:	000020c0 	.word	0x000020c0
    4a84:	000020f8 	.word	0x000020f8
    4a88:	0000210e 	.word	0x0000210e
    4a8c:	00002158 	.word	0x00002158
    4a90:	00002140 	.word	0x00002140
    4a94:	00002140 	.word	0x00002140
    4a98:	00002198 	.word	0x00002198
    4a9c:	0000214e 	.word	0x0000214e
    4aa0:	00002162 	.word	0x00002162
    4aa4:	00002144 	.word	0x00002144
    4aa8:	0000216c 	.word	0x0000216c
    4aac:	00002184 	.word	0x00002184
    4ab0:	0000306a 	.word	0x0000306a
    4ab4:	00003110 	.word	0x00003110
    4ab8:	00003118 	.word	0x00003118
    4abc:	0000314a 	.word	0x0000314a
    4ac0:	00003194 	.word	0x00003194
    4ac4:	000031dc 	.word	0x000031dc
    4ac8:	20414d44 	.word	0x20414d44
    4acc:	65746e69 	.word	0x65746e69
    4ad0:	70757272 	.word	0x70757272
    4ad4:	636f2074 	.word	0x636f2074
    4ad8:	73727563 	.word	0x73727563
    4adc:	0000000d 	.word	0x0000000d
    4ae0:	3d3d3d3d 	.word	0x3d3d3d3d
    4ae4:	3d3d3d3d 	.word	0x3d3d3d3d
    4ae8:	3d3d3d3d 	.word	0x3d3d3d3d
    4aec:	3d3d3d3d 	.word	0x3d3d3d3d
    4af0:	3d3d3d3d 	.word	0x3d3d3d3d
    4af4:	3d3d3d3d 	.word	0x3d3d3d3d
    4af8:	3d3d3d3d 	.word	0x3d3d3d3d
    4afc:	3d3d3d3d 	.word	0x3d3d3d3d
    4b00:	3d3d3d3d 	.word	0x3d3d3d3d
    4b04:	3d3d3d3d 	.word	0x3d3d3d3d
    4b08:	3d3d3d3d 	.word	0x3d3d3d3d
    4b0c:	0a3d3d3d 	.word	0x0a3d3d3d
    4b10:	0000000d 	.word	0x0000000d
    4b14:	756e654d 	.word	0x756e654d
    4b18:	7270203a 	.word	0x7270203a
    4b1c:	20737365 	.word	0x20737365
    4b20:	656b2061 	.word	0x656b2061
    4b24:	6f742079 	.word	0x6f742079
    4b28:	6e6f6320 	.word	0x6e6f6320
    4b2c:	756e6974 	.word	0x756e6974
    4b30:	0d0a2e65 	.word	0x0d0a2e65
    4b34:	00000000 	.word	0x00000000
    4b38:	20612020 	.word	0x20612020
    4b3c:	4341203a 	.word	0x4341203a
    4b40:	45564954 	.word	0x45564954
    4b44:	646f6d20 	.word	0x646f6d20
    4b48:	50203a65 	.word	0x50203a65
    4b4c:	6f667265 	.word	0x6f667265
    4b50:	6e616d72 	.word	0x6e616d72
    4b54:	4c206563 	.word	0x4c206563
    4b58:	6c657665 	.word	0x6c657665
    4b5c:	61203020 	.word	0x61203020
    4b60:	32312074 	.word	0x32312074
    4b64:	0a7a484d 	.word	0x0a7a484d
    4b68:	0000000d 	.word	0x0000000d
    4b6c:	20622020 	.word	0x20622020
    4b70:	4341203a 	.word	0x4341203a
    4b74:	45564954 	.word	0x45564954
    4b78:	646f6d20 	.word	0x646f6d20
    4b7c:	50203a65 	.word	0x50203a65
    4b80:	6f667265 	.word	0x6f667265
    4b84:	6e616d72 	.word	0x6e616d72
    4b88:	4c206563 	.word	0x4c206563
    4b8c:	6c657665 	.word	0x6c657665
    4b90:	61203220 	.word	0x61203220
    4b94:	38342074 	.word	0x38342074
    4b98:	0a7a484d 	.word	0x0a7a484d
    4b9c:	0000000d 	.word	0x0000000d
    4ba0:	20632020 	.word	0x20632020
    4ba4:	4449203a 	.word	0x4449203a
    4ba8:	6d20454c 	.word	0x6d20454c
    4bac:	3a65646f 	.word	0x3a65646f
    4bb0:	72655020 	.word	0x72655020
    4bb4:	6d726f66 	.word	0x6d726f66
    4bb8:	65636e61 	.word	0x65636e61
    4bbc:	76654c20 	.word	0x76654c20
    4bc0:	30206c65 	.word	0x30206c65
    4bc4:	20746120 	.word	0x20746120
    4bc8:	484d3231 	.word	0x484d3231
    4bcc:	000d0a7a 	.word	0x000d0a7a
    4bd0:	20642020 	.word	0x20642020
    4bd4:	5453203a 	.word	0x5453203a
    4bd8:	42444e41 	.word	0x42444e41
    4bdc:	6f6d2059 	.word	0x6f6d2059
    4be0:	503a6564 	.word	0x503a6564
    4be4:	502c3044 	.word	0x502c3044
    4be8:	61203144 	.word	0x61203144
    4bec:	5020646e 	.word	0x5020646e
    4bf0:	69203244 	.word	0x69203244
    4bf4:	6572206e 	.word	0x6572206e
    4bf8:	746e6574 	.word	0x746e6574
    4bfc:	206e6f69 	.word	0x206e6f69
    4c00:	74617473 	.word	0x74617473
    4c04:	000d0a65 	.word	0x000d0a65
    4c08:	20652020 	.word	0x20652020
    4c0c:	4142203a 	.word	0x4142203a
    4c10:	50554b43 	.word	0x50554b43
    4c14:	646f6d20 	.word	0x646f6d20
    4c18:	000d0a65 	.word	0x000d0a65
    4c1c:	20662020 	.word	0x20662020
    4c20:	464f203a 	.word	0x464f203a
    4c24:	6f6d2046 	.word	0x6f6d2046
    4c28:	0d0a6564 	.word	0x0d0a6564
    4c2c:	00000000 	.word	0x00000000
    4c30:	20712020 	.word	0x20712020
    4c34:	6e45203a 	.word	0x6e45203a
    4c38:	20726574 	.word	0x20726574
    4c3c:	616e7964 	.word	0x616e7964
    4c40:	2063696d 	.word	0x2063696d
    4c44:	65776f70 	.word	0x65776f70
    4c48:	61672072 	.word	0x61672072
    4c4c:	676e6974 	.word	0x676e6974
    4c50:	61786520 	.word	0x61786520
    4c54:	656c706d 	.word	0x656c706d
    4c58:	00000d0a 	.word	0x00000d0a
    4c5c:	2d2d2d2d 	.word	0x2d2d2d2d
    4c60:	2d2d2d2d 	.word	0x2d2d2d2d
    4c64:	2d2d2d2d 	.word	0x2d2d2d2d
    4c68:	2d2d2d2d 	.word	0x2d2d2d2d
    4c6c:	2d2d2d2d 	.word	0x2d2d2d2d
    4c70:	2d2d2d2d 	.word	0x2d2d2d2d
    4c74:	2d2d2d2d 	.word	0x2d2d2d2d
    4c78:	2d2d2d2d 	.word	0x2d2d2d2d
    4c7c:	2d2d2d2d 	.word	0x2d2d2d2d
    4c80:	2d2d2d2d 	.word	0x2d2d2d2d
    4c84:	2d2d2d2d 	.word	0x2d2d2d2d
    4c88:	0a2d2d2d 	.word	0x0a2d2d2d
    4c8c:	0000000d 	.word	0x0000000d
    4c90:	00003e3e 	.word	0x00003e3e
    4c94:	6f590a0d 	.word	0x6f590a0d
    4c98:	6e692075 	.word	0x6e692075
    4c9c:	20747570 	.word	0x20747570
    4ca0:	0d63253a 	.word	0x0d63253a
    4ca4:	0000000a 	.word	0x0000000a
    4ca8:	6e726157 	.word	0x6e726157
    4cac:	3a676e69 	.word	0x3a676e69
    4cb0:	74737953 	.word	0x74737953
    4cb4:	77206d65 	.word	0x77206d65
    4cb8:	206c6c69 	.word	0x206c6c69
    4cbc:	65746e65 	.word	0x65746e65
    4cc0:	44492072 	.word	0x44492072
    4cc4:	6d20454c 	.word	0x6d20454c
    4cc8:	2c65646f 	.word	0x2c65646f
    4ccc:	61656c70 	.word	0x61656c70
    4cd0:	77206573 	.word	0x77206573
    4cd4:	20746961 	.word	0x20746961
    4cd8:	69746e75 	.word	0x69746e75
    4cdc:	454c206c 	.word	0x454c206c
    4ce0:	62203044 	.word	0x62203044
    4ce4:	6d6f6365 	.word	0x6d6f6365
    4ce8:	4f207365 	.word	0x4f207365
    4cec:	0d204646 	.word	0x0d204646
    4cf0:	00000000 	.word	0x00000000
    4cf4:	74737953 	.word	0x74737953
    4cf8:	77206d65 	.word	0x77206d65
    4cfc:	206c6c69 	.word	0x206c6c69
    4d00:	65746e65 	.word	0x65746e65
    4d04:	54532072 	.word	0x54532072
    4d08:	42444e41 	.word	0x42444e41
    4d0c:	6f6d2059 	.word	0x6f6d2059
    4d10:	733a6564 	.word	0x733a6564
    4d14:	69746174 	.word	0x69746174
    4d18:	6f702063 	.word	0x6f702063
    4d1c:	20726577 	.word	0x20726577
    4d20:	65656c73 	.word	0x65656c73
    4d24:	6c617770 	.word	0x6c617770
    4d28:	676e696b 	.word	0x676e696b
    4d2c:	00000d2e 	.word	0x00000d2e
    4d30:	74737953 	.word	0x74737953
    4d34:	77206d65 	.word	0x77206d65
    4d38:	20656b61 	.word	0x20656b61
    4d3c:	66207075 	.word	0x66207075
    4d40:	206d6f72 	.word	0x206d6f72
    4d44:	6e617473 	.word	0x6e617473
    4d48:	6d207962 	.word	0x6d207962
    4d4c:	0d65646f 	.word	0x0d65646f
    4d50:	00000000 	.word	0x00000000
    4d54:	74737953 	.word	0x74737953
    4d58:	77206d65 	.word	0x77206d65
    4d5c:	206c6c69 	.word	0x206c6c69
    4d60:	65746e65 	.word	0x65746e65
    4d64:	54532072 	.word	0x54532072
    4d68:	42444e41 	.word	0x42444e41
    4d6c:	6f6d2059 	.word	0x6f6d2059
    4d70:	443a6564 	.word	0x443a6564
    4d74:	6d616e79 	.word	0x6d616e79
    4d78:	50206369 	.word	0x50206369
    4d7c:	7265776f 	.word	0x7265776f
    4d80:	656c5320 	.word	0x656c5320
    4d84:	61577065 	.word	0x61577065
    4d88:	6e696b6c 	.word	0x6e696b6c
    4d8c:	00000d67 	.word	0x00000d67
    4d90:	74737953 	.word	0x74737953
    4d94:	77206d65 	.word	0x77206d65
    4d98:	20656b61 	.word	0x20656b61
    4d9c:	66207075 	.word	0x66207075
    4da0:	206d6f72 	.word	0x206d6f72
    4da4:	6e617473 	.word	0x6e617473
    4da8:	6d207962 	.word	0x6d207962
    4dac:	2c65646f 	.word	0x2c65646f
    4db0:	43444120 	.word	0x43444120
    4db4:	73657220 	.word	0x73657220
    4db8:	0d746c75 	.word	0x0d746c75
    4dbc:	00000000 	.word	0x00000000
    4dc0:	00206425 	.word	0x00206425
    4dc4:	74737953 	.word	0x74737953
    4dc8:	77206d65 	.word	0x77206d65
    4dcc:	206c6c69 	.word	0x206c6c69
    4dd0:	74697773 	.word	0x74697773
    4dd4:	74206863 	.word	0x74206863
    4dd8:	4c50206f 	.word	0x4c50206f
    4ddc:	2064253a 	.word	0x2064253a
    4de0:	00000a0d 	.word	0x00000a0d

00004de4 <_global_impure_ptr>:
    4de4:	20000030                                0.. 

00004de8 <__sf_fake_stderr>:
	...

00004e08 <__sf_fake_stdin>:
	...

00004e28 <__sf_fake_stdout>:
	...
    4e48:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4e58:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4e68:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4e78:	00006665                                ef..

00004e7c <_init>:
    4e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e7e:	46c0      	nop			; (mov r8, r8)
    4e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e82:	bc08      	pop	{r3}
    4e84:	469e      	mov	lr, r3
    4e86:	4770      	bx	lr

00004e88 <__init_array_start>:
    4e88:	000000dd 	.word	0x000000dd

00004e8c <_fini>:
    4e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e8e:	46c0      	nop			; (mov r8, r8)
    4e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e92:	bc08      	pop	{r3}
    4e94:	469e      	mov	lr, r3
    4e96:	4770      	bx	lr

00004e98 <__fini_array_start>:
    4e98:	000000b5 	.word	0x000000b5
